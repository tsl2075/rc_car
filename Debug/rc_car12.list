
rc_car12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab48  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  0800ace8  0800ace8  0000bce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aec4  0800aec4  0000c0c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aec4  0800aec4  0000bec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aecc  0800aecc  0000c0c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aecc  0800aecc  0000becc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aed0  0800aed0  0000bed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  0800aed4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e64  200000c4  0800af98  0000c0c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f28  0800af98  0000cf28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001feea  00000000  00000000  0000c0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b6d  00000000  00000000  0002bfde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c0  00000000  00000000  00030b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013f6  00000000  00000000  00032510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b97b  00000000  00000000  00033906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020851  00000000  00000000  0004f281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e2f0  00000000  00000000  0006fad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ddc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000737c  00000000  00000000  0010de08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00115184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c4 	.word	0x200000c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800acd0 	.word	0x0800acd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c8 	.word	0x200000c8
 80001dc:	0800acd0 	.word	0x0800acd0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <delay_us>:

#include "delay.h"


void delay_us(uint16_t us)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim11, 0); //타이머를 0으로 초기화 한다는 뜻이고
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <delay_us+0x30>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2200      	movs	r2, #0
 80005bc:	625a      	str	r2, [r3, #36]	@ 0x24
  //50000만까지 올라가다가 초과되면 빠져 나옴
  while((__HAL_TIM_GET_COUNTER(&htim11)) < us);
 80005be:	bf00      	nop
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <delay_us+0x30>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d3f9      	bcc.n	80005c0 <delay_us+0x14>
} //호출했더니 들어가서 값을 갖고옴 us에 100을줬으면 set되고
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200002b8 	.word	0x200002b8

080005e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <MX_DMA_Init+0x3c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4a0b      	ldr	r2, [pc, #44]	@ (800061c <MX_DMA_Init+0x3c>)
 80005f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4b09      	ldr	r3, [pc, #36]	@ (800061c <MX_DMA_Init+0x3c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2105      	movs	r1, #5
 8000606:	2044      	movs	r0, #68	@ 0x44
 8000608:	f001 fe80 	bl	800230c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800060c:	2044      	movs	r0, #68	@ 0x44
 800060e:	f001 fe99 	bl	8002344 <HAL_NVIC_EnableIRQ>

}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800

08000620 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b092      	sub	sp, #72	@ 0x48
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */


    /* Create the thread(s) */
    osThreadAttr_t ultrasonicTask_attributes = {
 8000626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800062a:	2224      	movs	r2, #36	@ 0x24
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f009 fb23 	bl	8009c7a <memset>
 8000634:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <MX_FREERTOS_Init+0xa0>)
 8000636:	627b      	str	r3, [r7, #36]	@ 0x24
 8000638:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800063c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800063e:	2318      	movs	r3, #24
 8000640:	63fb      	str	r3, [r7, #60]	@ 0x3c
      .name = "ultrasonicTask",
      .priority = (osPriority_t) osPriorityNormal,
      .stack_size = 256 * 4
    };
    osThreadNew(StartUltrasonicTask, NULL, &ultrasonicTask_attributes);
 8000642:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000646:	461a      	mov	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	481e      	ldr	r0, [pc, #120]	@ (80006c4 <MX_FREERTOS_Init+0xa4>)
 800064c:	f006 fc7a 	bl	8006f44 <osThreadNew>

    osThreadAttr_t controlTask_attributes = {
 8000650:	463b      	mov	r3, r7
 8000652:	2224      	movs	r2, #36	@ 0x24
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f009 fb0f 	bl	8009c7a <memset>
 800065c:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <MX_FREERTOS_Init+0xa8>)
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000664:	617b      	str	r3, [r7, #20]
 8000666:	2320      	movs	r3, #32
 8000668:	61bb      	str	r3, [r7, #24]
      .name = "controlTask",
      .priority = (osPriority_t) osPriorityAboveNormal,
      .stack_size = 128 * 4
    };
    osThreadNew(StartControlTask, NULL, &controlTask_attributes);
 800066a:	463b      	mov	r3, r7
 800066c:	461a      	mov	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	4816      	ldr	r0, [pc, #88]	@ (80006cc <MX_FREERTOS_Init+0xac>)
 8000672:	f006 fc67 	bl	8006f44 <osThreadNew>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UltrasonicTask */
  UltrasonicTaskHandle = osThreadNew(StartUltrasonicTask, NULL, &UltrasonicTask_attributes);
 8000676:	4a16      	ldr	r2, [pc, #88]	@ (80006d0 <MX_FREERTOS_Init+0xb0>)
 8000678:	2100      	movs	r1, #0
 800067a:	4812      	ldr	r0, [pc, #72]	@ (80006c4 <MX_FREERTOS_Init+0xa4>)
 800067c:	f006 fc62 	bl	8006f44 <osThreadNew>
 8000680:	4603      	mov	r3, r0
 8000682:	4a14      	ldr	r2, [pc, #80]	@ (80006d4 <MX_FREERTOS_Init+0xb4>)
 8000684:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(StartMotorTask, NULL, &MotorTask_attributes);
 8000686:	4a14      	ldr	r2, [pc, #80]	@ (80006d8 <MX_FREERTOS_Init+0xb8>)
 8000688:	2100      	movs	r1, #0
 800068a:	4814      	ldr	r0, [pc, #80]	@ (80006dc <MX_FREERTOS_Init+0xbc>)
 800068c:	f006 fc5a 	bl	8006f44 <osThreadNew>
 8000690:	4603      	mov	r3, r0
 8000692:	4a13      	ldr	r2, [pc, #76]	@ (80006e0 <MX_FREERTOS_Init+0xc0>)
 8000694:	6013      	str	r3, [r2, #0]

  /* creation of LcdTask */
  LcdTaskHandle = osThreadNew(StartLcdTask, NULL, &LcdTask_attributes);
 8000696:	4a13      	ldr	r2, [pc, #76]	@ (80006e4 <MX_FREERTOS_Init+0xc4>)
 8000698:	2100      	movs	r1, #0
 800069a:	4813      	ldr	r0, [pc, #76]	@ (80006e8 <MX_FREERTOS_Init+0xc8>)
 800069c:	f006 fc52 	bl	8006f44 <osThreadNew>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a12      	ldr	r2, [pc, #72]	@ (80006ec <MX_FREERTOS_Init+0xcc>)
 80006a4:	6013      	str	r3, [r2, #0]

  /* creation of ControlTask */
  ControlTaskHandle = osThreadNew(StartControlTask, NULL, &ControlTask_attributes);
 80006a6:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <MX_FREERTOS_Init+0xd0>)
 80006a8:	2100      	movs	r1, #0
 80006aa:	4808      	ldr	r0, [pc, #32]	@ (80006cc <MX_FREERTOS_Init+0xac>)
 80006ac:	f006 fc4a 	bl	8006f44 <osThreadNew>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a10      	ldr	r2, [pc, #64]	@ (80006f4 <MX_FREERTOS_Init+0xd4>)
 80006b4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80006b6:	bf00      	nop
 80006b8:	3748      	adds	r7, #72	@ 0x48
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	0800ad18 	.word	0x0800ad18
 80006c4:	080006f9 	.word	0x080006f9
 80006c8:	0800ad28 	.word	0x0800ad28
 80006cc:	08000959 	.word	0x08000959
 80006d0:	0800ade0 	.word	0x0800ade0
 80006d4:	200000e0 	.word	0x200000e0
 80006d8:	0800ae04 	.word	0x0800ae04
 80006dc:	08000771 	.word	0x08000771
 80006e0:	200000e4 	.word	0x200000e4
 80006e4:	0800ae28 	.word	0x0800ae28
 80006e8:	08000865 	.word	0x08000865
 80006ec:	200000e8 	.word	0x200000e8
 80006f0:	0800ae4c 	.word	0x0800ae4c
 80006f4:	200000ec 	.word	0x200000ec

080006f8 <StartUltrasonicTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUltrasonicTask */
void StartUltrasonicTask(void *argument)
{
 80006f8:	b5b0      	push	{r4, r5, r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUltrasonicTask */

  uint8_t current_sensor = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	73fb      	strb	r3, [r7, #15]


  /* Infinite loop */
  for (;;)
  {
      TriggerSensor(&sensors[current_sensor]);
 8000704:	7bfa      	ldrb	r2, [r7, #15]
 8000706:	4613      	mov	r3, r2
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4a15      	ldr	r2, [pc, #84]	@ (8000764 <StartUltrasonicTask+0x6c>)
 8000710:	4413      	add	r3, r2
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fa18 	bl	8001b48 <TriggerSensor>
      current_sensor = (current_sensor + 1) % NUM_SENSORS;
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <StartUltrasonicTask+0x70>)
 800071e:	fb83 3102 	smull	r3, r1, r3, r2
 8000722:	17d3      	asrs	r3, r2, #31
 8000724:	1ac9      	subs	r1, r1, r3
 8000726:	460b      	mov	r3, r1
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	440b      	add	r3, r1
 800072c:	1ad1      	subs	r1, r2, r3
 800072e:	460b      	mov	r3, r1
 8000730:	73fb      	strb	r3, [r7, #15]

      osDelay(40);  // 간섭 방지용 딜레이
 8000732:	2028      	movs	r0, #40	@ 0x28
 8000734:	f006 fc98 	bl	8007068 <osDelay>

      printf("Distances: L:%dcm, F:%dcm, R:%dcm\n",
             GetDistance(0), GetDistance(1), GetDistance(2));
 8000738:	2000      	movs	r0, #0
 800073a:	f001 f9ef 	bl	8001b1c <GetDistance>
 800073e:	4603      	mov	r3, r0
      printf("Distances: L:%dcm, F:%dcm, R:%dcm\n",
 8000740:	461c      	mov	r4, r3
             GetDistance(0), GetDistance(1), GetDistance(2));
 8000742:	2001      	movs	r0, #1
 8000744:	f001 f9ea 	bl	8001b1c <GetDistance>
 8000748:	4603      	mov	r3, r0
      printf("Distances: L:%dcm, F:%dcm, R:%dcm\n",
 800074a:	461d      	mov	r5, r3
             GetDistance(0), GetDistance(1), GetDistance(2));
 800074c:	2002      	movs	r0, #2
 800074e:	f001 f9e5 	bl	8001b1c <GetDistance>
 8000752:	4603      	mov	r3, r0
      printf("Distances: L:%dcm, F:%dcm, R:%dcm\n",
 8000754:	462a      	mov	r2, r5
 8000756:	4621      	mov	r1, r4
 8000758:	4804      	ldr	r0, [pc, #16]	@ (800076c <StartUltrasonicTask+0x74>)
 800075a:	f009 fa17 	bl	8009b8c <iprintf>
      TriggerSensor(&sensors[current_sensor]);
 800075e:	bf00      	nop
 8000760:	e7d0      	b.n	8000704 <StartUltrasonicTask+0xc>
 8000762:	bf00      	nop
 8000764:	20000008 	.word	0x20000008
 8000768:	55555556 	.word	0x55555556
 800076c:	0800ad34 	.word	0x0800ad34

08000770 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
      //char line2[17];

      //i2c_lcd_init();       // LCD 초기화
      //sprintf(line1, "Mode: %s", manual_override ? "Manual" : "Auto");
      // 수동 제어 중이면 자율주행 정지
      if (manual_override)
 8000778:	4b38      	ldr	r3, [pc, #224]	@ (800085c <StartMotorTask+0xec>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d010      	beq.n	80007a4 <StartMotorTask+0x34>
	{
	  // 수동 제어 유지 시간 설정 (예: 3000ms)
	  if (HAL_GetTick() - last_manual_time > 5000)
 8000782:	f001 fcdb 	bl	800213c <HAL_GetTick>
 8000786:	4602      	mov	r2, r0
 8000788:	4b35      	ldr	r3, [pc, #212]	@ (8000860 <StartMotorTask+0xf0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000792:	4293      	cmp	r3, r2
 8000794:	d902      	bls.n	800079c <StartMotorTask+0x2c>
	    {
	      manual_override = 0;
 8000796:	4b31      	ldr	r3, [pc, #196]	@ (800085c <StartMotorTask+0xec>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
	    }
	  osDelay(40);
 800079c:	2028      	movs	r0, #40	@ 0x28
 800079e:	f006 fc63 	bl	8007068 <osDelay>
	  continue;
 80007a2:	e059      	b.n	8000858 <StartMotorTask+0xe8>
	}


      uint8_t left  = GetDistance(0);
 80007a4:	2000      	movs	r0, #0
 80007a6:	f001 f9b9 	bl	8001b1c <GetDistance>
 80007aa:	4603      	mov	r3, r0
 80007ac:	73fb      	strb	r3, [r7, #15]
      uint8_t front = GetDistance(1);
 80007ae:	2001      	movs	r0, #1
 80007b0:	f001 f9b4 	bl	8001b1c <GetDistance>
 80007b4:	4603      	mov	r3, r0
 80007b6:	73bb      	strb	r3, [r7, #14]
      uint8_t right = GetDistance(2);
 80007b8:	2002      	movs	r0, #2
 80007ba:	f001 f9af 	bl	8001b1c <GetDistance>
 80007be:	4603      	mov	r3, r0
 80007c0:	737b      	strb	r3, [r7, #13]

      //  벽에 너무 가까울 때 반대 방향으로 약간 회피
      if (left <= 11)
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	2b0b      	cmp	r3, #11
 80007c6:	d806      	bhi.n	80007d6 <StartMotorTask+0x66>
	{
	  Set_Direction('R');
 80007c8:	2052      	movs	r0, #82	@ 0x52
 80007ca:	f000 fbb9 	bl	8000f40 <Set_Direction>
	  //sprintf(line2, "Drive: Right   ");
	  osDelay(30);
 80007ce:	201e      	movs	r0, #30
 80007d0:	f006 fc4a 	bl	8007068 <osDelay>
 80007d4:	e008      	b.n	80007e8 <StartMotorTask+0x78>
	}
      else if (right <= 11)
 80007d6:	7b7b      	ldrb	r3, [r7, #13]
 80007d8:	2b0b      	cmp	r3, #11
 80007da:	d805      	bhi.n	80007e8 <StartMotorTask+0x78>
	{
	  Set_Direction('L');
 80007dc:	204c      	movs	r0, #76	@ 0x4c
 80007de:	f000 fbaf 	bl	8000f40 <Set_Direction>
	  //sprintf(line2, "Drive: Left    ");
	  osDelay(30);
 80007e2:	201e      	movs	r0, #30
 80007e4:	f006 fc40 	bl	8007068 <osDelay>
	}

      if (front < 28)
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	2b1b      	cmp	r3, #27
 80007ec:	d82b      	bhi.n	8000846 <StartMotorTask+0xd6>
      {
          // 기존 회피 알고리즘 그대로
          int diff = abs((int)left - (int)right);
 80007ee:	7bfa      	ldrb	r2, [r7, #15]
 80007f0:	7b7b      	ldrb	r3, [r7, #13]
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bfb8      	it	lt
 80007f8:	425b      	neglt	r3, r3
 80007fa:	60bb      	str	r3, [r7, #8]

          if (diff <= 4)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	2b04      	cmp	r3, #4
 8000800:	dc0b      	bgt.n	800081a <StartMotorTask+0xaa>
          {
              if (left < right)
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	7b7b      	ldrb	r3, [r7, #13]
 8000806:	429a      	cmp	r2, r3
 8000808:	d203      	bcs.n	8000812 <StartMotorTask+0xa2>
        	{
                  Set_Direction('L');  // 좁은 쪽으로 탈출
 800080a:	204c      	movs	r0, #76	@ 0x4c
 800080c:	f000 fb98 	bl	8000f40 <Set_Direction>
 8000810:	e01c      	b.n	800084c <StartMotorTask+0xdc>
                  //sprintf(line2, "Drive: Left    ");
        	}
              else
        	{
                  Set_Direction('R');
 8000812:	2052      	movs	r0, #82	@ 0x52
 8000814:	f000 fb94 	bl	8000f40 <Set_Direction>
 8000818:	e018      	b.n	800084c <StartMotorTask+0xdc>
                  //sprintf(line2, "Drive: Right   ");
        	}
          }
          else
          {
              if (left < 18 && right < 18)
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	2b11      	cmp	r3, #17
 800081e:	d806      	bhi.n	800082e <StartMotorTask+0xbe>
 8000820:	7b7b      	ldrb	r3, [r7, #13]
 8000822:	2b11      	cmp	r3, #17
 8000824:	d803      	bhi.n	800082e <StartMotorTask+0xbe>
        	{
                  Set_Direction('B');
 8000826:	2042      	movs	r0, #66	@ 0x42
 8000828:	f000 fb8a 	bl	8000f40 <Set_Direction>
 800082c:	e00e      	b.n	800084c <StartMotorTask+0xdc>
        	}
              else if (left > right)
 800082e:	7bfa      	ldrb	r2, [r7, #15]
 8000830:	7b7b      	ldrb	r3, [r7, #13]
 8000832:	429a      	cmp	r2, r3
 8000834:	d903      	bls.n	800083e <StartMotorTask+0xce>
        	{
                  Set_Direction('L');
 8000836:	204c      	movs	r0, #76	@ 0x4c
 8000838:	f000 fb82 	bl	8000f40 <Set_Direction>
 800083c:	e006      	b.n	800084c <StartMotorTask+0xdc>
        	}
              else
        	{
                  Set_Direction('R');
 800083e:	2052      	movs	r0, #82	@ 0x52
 8000840:	f000 fb7e 	bl	8000f40 <Set_Direction>
 8000844:	e002      	b.n	800084c <StartMotorTask+0xdc>
          }
      }
      else
      {
          // 정상 직진
          Set_Direction('F');
 8000846:	2046      	movs	r0, #70	@ 0x46
 8000848:	f000 fb7a 	bl	8000f40 <Set_Direction>
      }
      Set_Speed(84);
 800084c:	2054      	movs	r0, #84	@ 0x54
 800084e:	f000 fc51 	bl	80010f4 <Set_Speed>
      osDelay(30);  // 주기*/
 8000852:	201e      	movs	r0, #30
 8000854:	f006 fc08 	bl	8007068 <osDelay>
  {
 8000858:	e78e      	b.n	8000778 <StartMotorTask+0x8>
 800085a:	bf00      	nop
 800085c:	20000146 	.word	0x20000146
 8000860:	20000148 	.word	0x20000148

08000864 <StartLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcdTask */
void StartLcdTask(void *argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	@ 0x30
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  extern char current_direction;  // 방향 상태를 외부에서 접근 가능하게

  char line1[17];
  char line2[17];

  i2c_lcd_init();  // ❗ 여기서 딱 한 번만 호출
 800086c:	f000 f9bc 	bl	8000be8 <i2c_lcd_init>


  for(;;)
  {
      sprintf(line1, "Mode: %-10s", manual_override ? "Manual" : "Auto");
 8000870:	4b2f      	ldr	r3, [pc, #188]	@ (8000930 <StartLcdTask+0xcc>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <StartLcdTask+0x1a>
 800087a:	4a2e      	ldr	r2, [pc, #184]	@ (8000934 <StartLcdTask+0xd0>)
 800087c:	e000      	b.n	8000880 <StartLcdTask+0x1c>
 800087e:	4a2e      	ldr	r2, [pc, #184]	@ (8000938 <StartLcdTask+0xd4>)
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	492d      	ldr	r1, [pc, #180]	@ (800093c <StartLcdTask+0xd8>)
 8000886:	4618      	mov	r0, r3
 8000888:	f009 f992 	bl	8009bb0 <siprintf>

       char dir_snapshot = current_direction;
 800088c:	4b2c      	ldr	r3, [pc, #176]	@ (8000940 <StartLcdTask+0xdc>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

       if (dir_snapshot == 'F' || dir_snapshot == 'Z')
 8000894:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000898:	2b46      	cmp	r3, #70	@ 0x46
 800089a:	d003      	beq.n	80008a4 <StartLcdTask+0x40>
 800089c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008a0:	2b5a      	cmp	r3, #90	@ 0x5a
 80008a2:	d106      	bne.n	80008b2 <StartLcdTask+0x4e>
           sprintf(line2, "Drive: Forward ");
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4926      	ldr	r1, [pc, #152]	@ (8000944 <StartLcdTask+0xe0>)
 80008aa:	4618      	mov	r0, r3
 80008ac:	f009 f980 	bl	8009bb0 <siprintf>
 80008b0:	e026      	b.n	8000900 <StartLcdTask+0x9c>
       else if (dir_snapshot == 'B')
 80008b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008b6:	2b42      	cmp	r3, #66	@ 0x42
 80008b8:	d106      	bne.n	80008c8 <StartLcdTask+0x64>
           sprintf(line2, "Drive: Backward");
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	4922      	ldr	r1, [pc, #136]	@ (8000948 <StartLcdTask+0xe4>)
 80008c0:	4618      	mov	r0, r3
 80008c2:	f009 f975 	bl	8009bb0 <siprintf>
 80008c6:	e01b      	b.n	8000900 <StartLcdTask+0x9c>
       else if (dir_snapshot == 'L')
 80008c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008cc:	2b4c      	cmp	r3, #76	@ 0x4c
 80008ce:	d106      	bne.n	80008de <StartLcdTask+0x7a>
           sprintf(line2, "Drive: Left    ");
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	491d      	ldr	r1, [pc, #116]	@ (800094c <StartLcdTask+0xe8>)
 80008d6:	4618      	mov	r0, r3
 80008d8:	f009 f96a 	bl	8009bb0 <siprintf>
 80008dc:	e010      	b.n	8000900 <StartLcdTask+0x9c>
       else if (dir_snapshot == 'R')
 80008de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008e2:	2b52      	cmp	r3, #82	@ 0x52
 80008e4:	d106      	bne.n	80008f4 <StartLcdTask+0x90>
           sprintf(line2, "Drive: Right   ");
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	4919      	ldr	r1, [pc, #100]	@ (8000950 <StartLcdTask+0xec>)
 80008ec:	4618      	mov	r0, r3
 80008ee:	f009 f95f 	bl	8009bb0 <siprintf>
 80008f2:	e005      	b.n	8000900 <StartLcdTask+0x9c>
       else
           sprintf(line2, "Drive: Stop    ");
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	4916      	ldr	r1, [pc, #88]	@ (8000954 <StartLcdTask+0xf0>)
 80008fa:	4618      	mov	r0, r3
 80008fc:	f009 f958 	bl	8009bb0 <siprintf>

       move_cursor(0, 0);
 8000900:	2100      	movs	r1, #0
 8000902:	2000      	movs	r0, #0
 8000904:	f000 f9b0 	bl	8000c68 <move_cursor>
       lcd_string(line1);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4618      	mov	r0, r3
 800090e:	f000 f996 	bl	8000c3e <lcd_string>

       move_cursor(1, 0);
 8000912:	2100      	movs	r1, #0
 8000914:	2001      	movs	r0, #1
 8000916:	f000 f9a7 	bl	8000c68 <move_cursor>
       lcd_string(line2);
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f98d 	bl	8000c3e <lcd_string>

       osDelay(500);
 8000924:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000928:	f006 fb9e 	bl	8007068 <osDelay>
  {
 800092c:	e7a0      	b.n	8000870 <StartLcdTask+0xc>
 800092e:	bf00      	nop
 8000930:	20000146 	.word	0x20000146
 8000934:	0800ad58 	.word	0x0800ad58
 8000938:	0800ad60 	.word	0x0800ad60
 800093c:	0800ad68 	.word	0x0800ad68
 8000940:	20000000 	.word	0x20000000
 8000944:	0800ad74 	.word	0x0800ad74
 8000948:	0800ad84 	.word	0x0800ad84
 800094c:	0800ad94 	.word	0x0800ad94
 8000950:	0800ada4 	.word	0x0800ada4
 8000954:	0800adb4 	.word	0x0800adb4

08000958 <StartControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControlTask */
void StartControlTask(void *argument)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControlTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000960:	2001      	movs	r0, #1
 8000962:	f006 fb81 	bl	8007068 <osDelay>
 8000966:	e7fb      	b.n	8000960 <StartControlTask+0x8>

08000968 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	4b28      	ldr	r3, [pc, #160]	@ (8000a24 <MX_GPIO_Init+0xbc>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a27      	ldr	r2, [pc, #156]	@ (8000a24 <MX_GPIO_Init+0xbc>)
 8000988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b25      	ldr	r3, [pc, #148]	@ (8000a24 <MX_GPIO_Init+0xbc>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b21      	ldr	r3, [pc, #132]	@ (8000a24 <MX_GPIO_Init+0xbc>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a20      	ldr	r2, [pc, #128]	@ (8000a24 <MX_GPIO_Init+0xbc>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a24 <MX_GPIO_Init+0xbc>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <MX_GPIO_Init+0xbc>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a19      	ldr	r2, [pc, #100]	@ (8000a24 <MX_GPIO_Init+0xbc>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <MX_GPIO_Init+0xbc>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14
 80009d2:	2200      	movs	r2, #0
 80009d4:	f24e 7102 	movw	r1, #59138	@ 0xe702
 80009d8:	4813      	ldr	r0, [pc, #76]	@ (8000a28 <MX_GPIO_Init+0xc0>)
 80009da:	f002 fa47 	bl	8002e6c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB1 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009de:	f24e 0302 	movw	r3, #57346	@ 0xe002
 80009e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4619      	mov	r1, r3
 80009f6:	480c      	ldr	r0, [pc, #48]	@ (8000a28 <MX_GPIO_Init+0xc0>)
 80009f8:	f002 f8b4 	bl	8002b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9;
 80009fc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000a00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4619      	mov	r1, r3
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <MX_GPIO_Init+0xc0>)
 8000a16:	f002 f8a5 	bl	8002b64 <HAL_GPIO_Init>

}
 8000a1a:	bf00      	nop
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020400 	.word	0x40020400

08000a2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a32:	4a13      	ldr	r2, [pc, #76]	@ (8000a80 <MX_I2C1_Init+0x54>)
 8000a34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a38:	4a12      	ldr	r2, [pc, #72]	@ (8000a84 <MX_I2C1_Init+0x58>)
 8000a3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a56:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a6a:	f002 fa19 	bl	8002ea0 <HAL_I2C_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a74:	f000 fa48 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200000f0 	.word	0x200000f0
 8000a80:	40005400 	.word	0x40005400
 8000a84:	000186a0 	.word	0x000186a0

08000a88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a19      	ldr	r2, [pc, #100]	@ (8000b0c <HAL_I2C_MspInit+0x84>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d12b      	bne.n	8000b02 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a17      	ldr	r2, [pc, #92]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ac6:	23c0      	movs	r3, #192	@ 0xc0
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aca:	2312      	movs	r3, #18
 8000acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <HAL_I2C_MspInit+0x8c>)
 8000ae2:	f002 f83f 	bl	8002b64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	4a08      	ldr	r2, [pc, #32]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000af0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af6:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	@ 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020400 	.word	0x40020400

08000b18 <lcd_command>:

#include "i2c_lcd.h"


void lcd_command(uint8_t command)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  uint8_t high_nibble, low_nibble; //하위비트 상위비트 나눠줌
  uint8_t i2c_buffer[4];

  high_nibble = command & 0xf0;
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f023 030f 	bic.w	r3, r3, #15
 8000b28:	73fb      	strb	r3, [r7, #15]
  low_nibble = (command << 4) & 0xf0;
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	011b      	lsls	r3, r3, #4
 8000b2e:	73bb      	strb	r3, [r7, #14]

  i2c_buffer[0] = high_nibble | 0x04 | 0x08;
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	f043 030c 	orr.w	r3, r3, #12
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	723b      	strb	r3, [r7, #8]
  //enable pin=1, rs pin=0, rw pin = 0, backlight=1
  i2c_buffer[1] = high_nibble | 0x00 | 0x08;
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	f043 0308 	orr.w	r3, r3, #8
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	727b      	strb	r3, [r7, #9]
  //enable pin=0, rs pin=0, rw pin = 0, backlight=1
  i2c_buffer[2] = low_nibble  | 0x04 | 0x08;
 8000b44:	7bbb      	ldrb	r3, [r7, #14]
 8000b46:	f043 030c 	orr.w	r3, r3, #12
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	72bb      	strb	r3, [r7, #10]
  //enable pin=1, rs pin=0, rw pin = 0, backlight=1
  i2c_buffer[3] = low_nibble  | 0x00 | 0x08;
 8000b4e:	7bbb      	ldrb	r3, [r7, #14]
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	72fb      	strb	r3, [r7, #11]
  //enable pin=0, rs pin=0, rw pin = 0, backlight=1

  while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS, i2c_buffer, 4, 100) != HAL_OK)
 8000b58:	bf00      	nop
 8000b5a:	f107 0208 	add.w	r2, r7, #8
 8000b5e:	2364      	movs	r3, #100	@ 0x64
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	2304      	movs	r3, #4
 8000b64:	214e      	movs	r1, #78	@ 0x4e
 8000b66:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <lcd_command+0x64>)
 8000b68:	f002 fade 	bl	8003128 <HAL_I2C_Master_Transmit>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d1f3      	bne.n	8000b5a <lcd_command+0x42>
    {
      //HAL_Delay(1);
    }
}
 8000b72:	bf00      	nop
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200000f0 	.word	0x200000f0

08000b80 <lcd_data>:

void lcd_data(uint8_t data)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af02      	add	r7, sp, #8
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  uint8_t high_nibble, low_nibble; //하위비트 상위비트 나눠줌
  uint8_t i2c_buffer[4];

  high_nibble = data & 0xf0;
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f023 030f 	bic.w	r3, r3, #15
 8000b90:	73fb      	strb	r3, [r7, #15]
  low_nibble = (data << 4) & 0xf0;
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	011b      	lsls	r3, r3, #4
 8000b96:	73bb      	strb	r3, [r7, #14]

  i2c_buffer[0] = high_nibble | 0x05 | 0x08;
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	f043 030d 	orr.w	r3, r3, #13
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	723b      	strb	r3, [r7, #8]
  //enable pin=1, rs pin=1, rw pin = 0, backlight=1
  i2c_buffer[1] = high_nibble | 0x01 | 0x08;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	f043 0309 	orr.w	r3, r3, #9
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	727b      	strb	r3, [r7, #9]
  //enable pin=0, rs pin=1, rw pin = 0, backlight=1
  i2c_buffer[2] = low_nibble  | 0x05 | 0x08;
 8000bac:	7bbb      	ldrb	r3, [r7, #14]
 8000bae:	f043 030d 	orr.w	r3, r3, #13
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	72bb      	strb	r3, [r7, #10]
  //enable pin=1, rs pin=1, rw pin = 0, backlight=1
  i2c_buffer[3] = low_nibble  | 0x01 | 0x08;
 8000bb6:	7bbb      	ldrb	r3, [r7, #14]
 8000bb8:	f043 0309 	orr.w	r3, r3, #9
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	72fb      	strb	r3, [r7, #11]
  //enable pin=0, rs pin=1, rw pin = 0, backlight=1

  while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS, i2c_buffer, 4, 100) != HAL_OK)
 8000bc0:	bf00      	nop
 8000bc2:	f107 0208 	add.w	r2, r7, #8
 8000bc6:	2364      	movs	r3, #100	@ 0x64
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2304      	movs	r3, #4
 8000bcc:	214e      	movs	r1, #78	@ 0x4e
 8000bce:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <lcd_data+0x64>)
 8000bd0:	f002 faaa 	bl	8003128 <HAL_I2C_Master_Transmit>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1f3      	bne.n	8000bc2 <lcd_data+0x42>
    {
      //HAL_Delay(1);
    }

}
 8000bda:	bf00      	nop
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200000f0 	.word	0x200000f0

08000be8 <i2c_lcd_init>:

void i2c_lcd_init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8000bec:	2032      	movs	r0, #50	@ 0x32
 8000bee:	f001 fab1 	bl	8002154 <HAL_Delay>
  lcd_command(0x33);
 8000bf2:	2033      	movs	r0, #51	@ 0x33
 8000bf4:	f7ff ff90 	bl	8000b18 <lcd_command>
  HAL_Delay(5);
 8000bf8:	2005      	movs	r0, #5
 8000bfa:	f001 faab 	bl	8002154 <HAL_Delay>
  lcd_command(0x32);
 8000bfe:	2032      	movs	r0, #50	@ 0x32
 8000c00:	f7ff ff8a 	bl	8000b18 <lcd_command>
  HAL_Delay(5);
 8000c04:	2005      	movs	r0, #5
 8000c06:	f001 faa5 	bl	8002154 <HAL_Delay>
  lcd_command(0x28);
 8000c0a:	2028      	movs	r0, #40	@ 0x28
 8000c0c:	f7ff ff84 	bl	8000b18 <lcd_command>
  HAL_Delay(5);
 8000c10:	2005      	movs	r0, #5
 8000c12:	f001 fa9f 	bl	8002154 <HAL_Delay>
  lcd_command(DISPLAY_ON);
 8000c16:	200c      	movs	r0, #12
 8000c18:	f7ff ff7e 	bl	8000b18 <lcd_command>
  HAL_Delay(5);
 8000c1c:	2005      	movs	r0, #5
 8000c1e:	f001 fa99 	bl	8002154 <HAL_Delay>
  lcd_command(0x06);
 8000c22:	2006      	movs	r0, #6
 8000c24:	f7ff ff78 	bl	8000b18 <lcd_command>
  HAL_Delay(5);
 8000c28:	2005      	movs	r0, #5
 8000c2a:	f001 fa93 	bl	8002154 <HAL_Delay>
  lcd_command(CLEAR_DISPLAY);
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f7ff ff72 	bl	8000b18 <lcd_command>
  HAL_Delay(2);
 8000c34:	2002      	movs	r0, #2
 8000c36:	f001 fa8d 	bl	8002154 <HAL_Delay>
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <lcd_string>:


void lcd_string(char *str)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  while(*str)
 8000c46:	e006      	b.n	8000c56 <lcd_string+0x18>
    { //문자열은 배열은 주소
      lcd_data(*str++);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff95 	bl	8000b80 <lcd_data>
  while(*str)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f4      	bne.n	8000c48 <lcd_string+0xa>
    }
}
 8000c5e:	bf00      	nop
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <move_cursor>:

void move_cursor(uint8_t row, uint8_t col)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	460a      	mov	r2, r1
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	4613      	mov	r3, r2
 8000c76:	71bb      	strb	r3, [r7, #6]
  lcd_command(0x80 | row<<6 | col);
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	019b      	lsls	r3, r3, #6
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	79bb      	ldrb	r3, [r7, #6]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff44 	bl	8000b18 <lcd_command>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <__io_putchar>:
/** @brief Retargets the C library printf function to the USART.
 *  @param None
 *  @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop
     until the end of transmission */
  if(ch == '\n')
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b0a      	cmp	r3, #10
 8000ca4:	d106      	bne.n	8000cb4 <__io_putchar+0x1c>
    HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 8000ca6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000caa:	2201      	movs	r2, #1
 8000cac:	4907      	ldr	r1, [pc, #28]	@ (8000ccc <__io_putchar+0x34>)
 8000cae:	4808      	ldr	r0, [pc, #32]	@ (8000cd0 <__io_putchar+0x38>)
 8000cb0:	f004 fed0 	bl	8005a54 <HAL_UART_Transmit>
   HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000cb4:	1d39      	adds	r1, r7, #4
 8000cb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <__io_putchar+0x38>)
 8000cbe:	f004 fec9 	bl	8005a54 <HAL_UART_Transmit>
}
 8000cc2:	bf00      	nop
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	0800adc4 	.word	0x0800adc4
 8000cd0:	20000348 	.word	0x20000348

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd8:	f001 f9fa 	bl	80020d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cdc:	f000 f852 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce0:	f7ff fe42 	bl	8000968 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ce4:	f7ff fc7c 	bl	80005e0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000ce8:	f000 fcce 	bl	8001688 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000cec:	f001 f8b4 	bl	8001e58 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000cf0:	f000 fbe6 	bl	80014c0 <MX_TIM1_Init>
  MX_TIM11_Init();
 8000cf4:	f000 fdba 	bl	800186c <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000cf8:	f001 f8d8 	bl	8001eac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000cfc:	f000 fc54 	bl	80015a8 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000d00:	f7ff fe94 	bl	8000a2c <MX_I2C1_Init>
  MX_TIM5_Init();
 8000d04:	f000 fd42 	bl	800178c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // LCD 초기화
  //i2c_lcd_init();

  Motor_Init();
 8000d08:	f000 f904 	bl	8000f14 <Motor_Init>

  //HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx, 2);
  HAL_TIM_Base_Start(&htim1);
 8000d0c:	4816      	ldr	r0, [pc, #88]	@ (8000d68 <main+0x94>)
 8000d0e:	f003 fa7f 	bl	8004210 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8000d12:	4816      	ldr	r0, [pc, #88]	@ (8000d6c <main+0x98>)
 8000d14:	f003 fa7c 	bl	8004210 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8000d18:	4815      	ldr	r0, [pc, #84]	@ (8000d70 <main+0x9c>)
 8000d1a:	f003 fa79 	bl	8004210 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim11);  //  이게 반드시 필요
 8000d1e:	4815      	ldr	r0, [pc, #84]	@ (8000d74 <main+0xa0>)
 8000d20:	f003 fa76 	bl	8004210 <HAL_TIM_Base_Start>


  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d24:	2100      	movs	r1, #0
 8000d26:	4810      	ldr	r0, [pc, #64]	@ (8000d68 <main+0x94>)
 8000d28:	f003 fc92 	bl	8004650 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	480f      	ldr	r0, [pc, #60]	@ (8000d6c <main+0x98>)
 8000d30:	f003 fc8e 	bl	8004650 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 8000d34:	2104      	movs	r1, #4
 8000d36:	480e      	ldr	r0, [pc, #56]	@ (8000d70 <main+0x9c>)
 8000d38:	f003 fc8a 	bl	8004650 <HAL_TIM_IC_Start_IT>

  //DMA

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_buffer, RX_BUF_SIZE);
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	490e      	ldr	r1, [pc, #56]	@ (8000d78 <main+0xa4>)
 8000d40:	480e      	ldr	r0, [pc, #56]	@ (8000d7c <main+0xa8>)
 8000d42:	f004 ff12 	bl	8005b6a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);  // Half Transfer Interrupt OFF
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <main+0xac>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <main+0xac>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 0208 	bic.w	r2, r2, #8
 8000d54:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d56:	f006 f8ab 	bl	8006eb0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d5a:	f7ff fc61 	bl	8000620 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d5e:	f006 f8cb 	bl	8006ef8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d62:	bf00      	nop
 8000d64:	e7fd      	b.n	8000d62 <main+0x8e>
 8000d66:	bf00      	nop
 8000d68:	20000198 	.word	0x20000198
 8000d6c:	200001e0 	.word	0x200001e0
 8000d70:	20000270 	.word	0x20000270
 8000d74:	200002b8 	.word	0x200002b8
 8000d78:	20000144 	.word	0x20000144
 8000d7c:	20000300 	.word	0x20000300
 8000d80:	20000390 	.word	0x20000390

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b094      	sub	sp, #80	@ 0x50
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	f107 0320 	add.w	r3, r7, #32
 8000d8e:	2230      	movs	r2, #48	@ 0x30
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f008 ff71 	bl	8009c7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	4b27      	ldr	r3, [pc, #156]	@ (8000e4c <SystemClock_Config+0xc8>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db0:	4a26      	ldr	r2, [pc, #152]	@ (8000e4c <SystemClock_Config+0xc8>)
 8000db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db8:	4b24      	ldr	r3, [pc, #144]	@ (8000e4c <SystemClock_Config+0xc8>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	4b21      	ldr	r3, [pc, #132]	@ (8000e50 <SystemClock_Config+0xcc>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a20      	ldr	r2, [pc, #128]	@ (8000e50 <SystemClock_Config+0xcc>)
 8000dce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e50 <SystemClock_Config+0xcc>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de0:	2301      	movs	r3, #1
 8000de2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dea:	2302      	movs	r3, #2
 8000dec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000df4:	2304      	movs	r3, #4
 8000df6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000df8:	2364      	movs	r3, #100	@ 0x64
 8000dfa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e00:	2304      	movs	r3, #4
 8000e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e04:	f107 0320 	add.w	r3, r7, #32
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f002 fce7 	bl	80037dc <HAL_RCC_OscConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e14:	f000 f878 	bl	8000f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e18:	230f      	movs	r3, #15
 8000e1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	2103      	movs	r1, #3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f002 ff49 	bl	8003ccc <HAL_RCC_ClockConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e40:	f000 f862 	bl	8000f08 <Error_Handler>
  }
}
 8000e44:	bf00      	nop
 8000e46:	3750      	adds	r7, #80	@ 0x50
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40007000 	.word	0x40007000

08000e54 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	@ (8000ecc <HAL_UARTEx_RxEventCallback+0x78>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d12c      	bne.n	8000ec4 <HAL_UARTEx_RxEventCallback+0x70>
  {
      if (Size > 0)
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d029      	beq.n	8000ec4 <HAL_UARTEx_RxEventCallback+0x70>
      {
          char dir = rx_buffer[0];
 8000e70:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <HAL_UARTEx_RxEventCallback+0x7c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	73fb      	strb	r3, [r7, #15]

          manual_override = 1;
 8000e76:	4b17      	ldr	r3, [pc, #92]	@ (8000ed4 <HAL_UARTEx_RxEventCallback+0x80>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]
          last_manual_time = HAL_GetTick();
 8000e7c:	f001 f95e 	bl	800213c <HAL_GetTick>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4a15      	ldr	r2, [pc, #84]	@ (8000ed8 <HAL_UARTEx_RxEventCallback+0x84>)
 8000e84:	6013      	str	r3, [r2, #0]

          Set_Direction(dir);
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 f859 	bl	8000f40 <Set_Direction>

          if (dir == 'S')
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	2b53      	cmp	r3, #83	@ 0x53
 8000e92:	d103      	bne.n	8000e9c <HAL_UARTEx_RxEventCallback+0x48>
            {
              Set_Speed(0);
 8000e94:	2000      	movs	r0, #0
 8000e96:	f000 f92d 	bl	80010f4 <Set_Speed>
 8000e9a:	e002      	b.n	8000ea2 <HAL_UARTEx_RxEventCallback+0x4e>
            }
          else
            {
              Set_Speed(88);
 8000e9c:	2058      	movs	r0, #88	@ 0x58
 8000e9e:	f000 f929 	bl	80010f4 <Set_Speed>
            }
          Set_Direction(dir);  // 한 번만 호출
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 f84b 	bl	8000f40 <Set_Direction>

      HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_buffer, RX_BUF_SIZE);
 8000eaa:	2202      	movs	r2, #2
 8000eac:	4908      	ldr	r1, [pc, #32]	@ (8000ed0 <HAL_UARTEx_RxEventCallback+0x7c>)
 8000eae:	480b      	ldr	r0, [pc, #44]	@ (8000edc <HAL_UARTEx_RxEventCallback+0x88>)
 8000eb0:	f004 fe5b 	bl	8005b6a <HAL_UARTEx_ReceiveToIdle_DMA>
      __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0208 	bic.w	r2, r2, #8
 8000ec2:	601a      	str	r2, [r3, #0]
      }
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40011000 	.word	0x40011000
 8000ed0:	20000144 	.word	0x20000144
 8000ed4:	20000146 	.word	0x20000146
 8000ed8:	20000148 	.word	0x20000148
 8000edc:	20000300 	.word	0x20000300
 8000ee0:	20000390 	.word	0x20000390

08000ee4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d101      	bne.n	8000efa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000ef6:	f001 f90d 	bl	8002114 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40014400 	.word	0x40014400

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <Error_Handler+0x8>

08000f14 <Motor_Init>:
#include "motor.h"

char current_direction = 'S';  // 현재 방향을 나타냄

void Motor_Init()
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // 꼭 먼저 호출
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4808      	ldr	r0, [pc, #32]	@ (8000f3c <Motor_Init+0x28>)
 8000f1c:	f003 fa8e 	bl	800443c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f20:	2104      	movs	r1, #4
 8000f22:	4806      	ldr	r0, [pc, #24]	@ (8000f3c <Motor_Init+0x28>)
 8000f24:	f003 fa8a 	bl	800443c <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0); // 초기 듀티 0
 8000f28:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <Motor_Init+0x28>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000f30:	4b02      	ldr	r3, [pc, #8]	@ (8000f3c <Motor_Init+0x28>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2200      	movs	r2, #0
 8000f36:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000228 	.word	0x20000228

08000f40 <Set_Direction>:


void Set_Direction(char dir)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  current_direction = dir; // 현재 방향 저장
 8000f4a:	4a68      	ldr	r2, [pc, #416]	@ (80010ec <Set_Direction+0x1ac>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	7013      	strb	r3, [r2, #0]

    switch (dir)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	3b42      	subs	r3, #66	@ 0x42
 8000f54:	2b18      	cmp	r3, #24
 8000f56:	d87d      	bhi.n	8001054 <Set_Direction+0x114>
 8000f58:	a201      	add	r2, pc, #4	@ (adr r2, 8000f60 <Set_Direction+0x20>)
 8000f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5e:	bf00      	nop
 8000f60:	08001025 	.word	0x08001025
 8000f64:	08001055 	.word	0x08001055
 8000f68:	08001055 	.word	0x08001055
 8000f6c:	08001055 	.word	0x08001055
 8000f70:	08000ff5 	.word	0x08000ff5
 8000f74:	08001055 	.word	0x08001055
 8000f78:	08001055 	.word	0x08001055
 8000f7c:	08001055 	.word	0x08001055
 8000f80:	08001055 	.word	0x08001055
 8000f84:	08001055 	.word	0x08001055
 8000f88:	08001085 	.word	0x08001085
 8000f8c:	08001055 	.word	0x08001055
 8000f90:	08001055 	.word	0x08001055
 8000f94:	08001055 	.word	0x08001055
 8000f98:	08001055 	.word	0x08001055
 8000f9c:	08001055 	.word	0x08001055
 8000fa0:	080010b5 	.word	0x080010b5
 8000fa4:	08001055 	.word	0x08001055
 8000fa8:	08001055 	.word	0x08001055
 8000fac:	08001055 	.word	0x08001055
 8000fb0:	08001055 	.word	0x08001055
 8000fb4:	08001055 	.word	0x08001055
 8000fb8:	08001055 	.word	0x08001055
 8000fbc:	08001055 	.word	0x08001055
 8000fc0:	08000fc5 	.word	0x08000fc5
    {
	case 'Z':
          // 전진
          HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2102      	movs	r1, #2
 8000fc8:	4849      	ldr	r0, [pc, #292]	@ (80010f0 <Set_Direction+0x1b0>)
 8000fca:	f001 ff4f 	bl	8002e6c <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fd4:	4846      	ldr	r0, [pc, #280]	@ (80010f0 <Set_Direction+0x1b0>)
 8000fd6:	f001 ff49 	bl	8002e6c <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fe0:	4843      	ldr	r0, [pc, #268]	@ (80010f0 <Set_Direction+0x1b0>)
 8000fe2:	f001 ff43 	bl	8002e6c <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fec:	4840      	ldr	r0, [pc, #256]	@ (80010f0 <Set_Direction+0x1b0>)
 8000fee:	f001 ff3d 	bl	8002e6c <HAL_GPIO_WritePin>

          break;
 8000ff2:	e077      	b.n	80010e4 <Set_Direction+0x1a4>
        case 'F':
            // 전진
            HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	483d      	ldr	r0, [pc, #244]	@ (80010f0 <Set_Direction+0x1b0>)
 8000ffa:	f001 ff37 	bl	8002e6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001004:	483a      	ldr	r0, [pc, #232]	@ (80010f0 <Set_Direction+0x1b0>)
 8001006:	f001 ff31 	bl	8002e6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);
 800100a:	2201      	movs	r2, #1
 800100c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001010:	4837      	ldr	r0, [pc, #220]	@ (80010f0 <Set_Direction+0x1b0>)
 8001012:	f001 ff2b 	bl	8002e6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800101c:	4834      	ldr	r0, [pc, #208]	@ (80010f0 <Set_Direction+0x1b0>)
 800101e:	f001 ff25 	bl	8002e6c <HAL_GPIO_WritePin>

            break;
 8001022:	e05f      	b.n	80010e4 <Set_Direction+0x1a4>
        case 'B':
            // 후진
            HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2102      	movs	r1, #2
 8001028:	4831      	ldr	r0, [pc, #196]	@ (80010f0 <Set_Direction+0x1b0>)
 800102a:	f001 ff1f 	bl	8002e6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001034:	482e      	ldr	r0, [pc, #184]	@ (80010f0 <Set_Direction+0x1b0>)
 8001036:	f001 ff19 	bl	8002e6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001040:	482b      	ldr	r0, [pc, #172]	@ (80010f0 <Set_Direction+0x1b0>)
 8001042:	f001 ff13 	bl	8002e6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800104c:	4828      	ldr	r0, [pc, #160]	@ (80010f0 <Set_Direction+0x1b0>)
 800104e:	f001 ff0d 	bl	8002e6c <HAL_GPIO_WritePin>

            break;
 8001052:	e047      	b.n	80010e4 <Set_Direction+0x1a4>
        case 'S':
        default:
            // 정지
            HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2102      	movs	r1, #2
 8001058:	4825      	ldr	r0, [pc, #148]	@ (80010f0 <Set_Direction+0x1b0>)
 800105a:	f001 ff07 	bl	8002e6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001064:	4822      	ldr	r0, [pc, #136]	@ (80010f0 <Set_Direction+0x1b0>)
 8001066:	f001 ff01 	bl	8002e6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001070:	481f      	ldr	r0, [pc, #124]	@ (80010f0 <Set_Direction+0x1b0>)
 8001072:	f001 fefb 	bl	8002e6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800107c:	481c      	ldr	r0, [pc, #112]	@ (80010f0 <Set_Direction+0x1b0>)
 800107e:	f001 fef5 	bl	8002e6c <HAL_GPIO_WritePin>

            break;
 8001082:	e02f      	b.n	80010e4 <Set_Direction+0x1a4>
        case 'L':
            // 제자리 좌회전
            HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2102      	movs	r1, #2
 8001088:	4819      	ldr	r0, [pc, #100]	@ (80010f0 <Set_Direction+0x1b0>)
 800108a:	f001 feef 	bl	8002e6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);   // 왼쪽 후진
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001094:	4816      	ldr	r0, [pc, #88]	@ (80010f0 <Set_Direction+0x1b0>)
 8001096:	f001 fee9 	bl	8002e6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010a0:	4813      	ldr	r0, [pc, #76]	@ (80010f0 <Set_Direction+0x1b0>)
 80010a2:	f001 fee3 	bl	8002e6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET); // 오른쪽 전진
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ac:	4810      	ldr	r0, [pc, #64]	@ (80010f0 <Set_Direction+0x1b0>)
 80010ae:	f001 fedd 	bl	8002e6c <HAL_GPIO_WritePin>
            break;
 80010b2:	e017      	b.n	80010e4 <Set_Direction+0x1a4>


        case 'R':
	    // 제자리 우회전
            HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2102      	movs	r1, #2
 80010b8:	480d      	ldr	r0, [pc, #52]	@ (80010f0 <Set_Direction+0x1b0>)
 80010ba:	f001 fed7 	bl	8002e6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010c4:	480a      	ldr	r0, [pc, #40]	@ (80010f0 <Set_Direction+0x1b0>)
 80010c6:	f001 fed1 	bl	8002e6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010d0:	4807      	ldr	r0, [pc, #28]	@ (80010f0 <Set_Direction+0x1b0>)
 80010d2:	f001 fecb 	bl	8002e6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010dc:	4804      	ldr	r0, [pc, #16]	@ (80010f0 <Set_Direction+0x1b0>)
 80010de:	f001 fec5 	bl	8002e6c <HAL_GPIO_WritePin>
            break;
 80010e2:	bf00      	nop
    }
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000000 	.word	0x20000000
 80010f0:	40020400 	.word	0x40020400

080010f4 <Set_Speed>:


void Set_Speed(int speed_percent)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    if (speed_percent < 0) speed_percent = 0;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	da01      	bge.n	8001106 <Set_Speed+0x12>
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
    if (speed_percent > 100) speed_percent = 100;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b64      	cmp	r3, #100	@ 0x64
 800110a:	dd01      	ble.n	8001110 <Set_Speed+0x1c>
 800110c:	2364      	movs	r3, #100	@ 0x64
 800110e:	607b      	str	r3, [r7, #4]

    uint16_t duty = (4999 * speed_percent) / 100;  // PWM Period = 4999
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001116:	fb02 f303 	mul.w	r3, r2, r3
 800111a:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <Set_Speed+0x50>)
 800111c:	fb82 1203 	smull	r1, r2, r2, r3
 8001120:	1152      	asrs	r2, r2, #5
 8001122:	17db      	asrs	r3, r3, #31
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty);
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <Set_Speed+0x54>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	89fa      	ldrh	r2, [r7, #14]
 800112e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty);
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <Set_Speed+0x54>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	89fa      	ldrh	r2, [r7, #14]
 8001136:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	51eb851f 	.word	0x51eb851f
 8001148:	20000228 	.word	0x20000228

0800114c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <HAL_MspInit+0x54>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	4a11      	ldr	r2, [pc, #68]	@ (80011a0 <HAL_MspInit+0x54>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001160:	6453      	str	r3, [r2, #68]	@ 0x44
 8001162:	4b0f      	ldr	r3, [pc, #60]	@ (80011a0 <HAL_MspInit+0x54>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <HAL_MspInit+0x54>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <HAL_MspInit+0x54>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800117c:	6413      	str	r3, [r2, #64]	@ 0x40
 800117e:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <HAL_MspInit+0x54>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	210f      	movs	r1, #15
 800118e:	f06f 0001 	mvn.w	r0, #1
 8001192:	f001 f8bb 	bl	800230c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800

080011a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	@ 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001274 <HAL_InitTick+0xd0>)
 80011ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001274 <HAL_InitTick+0xd0>)
 80011be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80011c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001274 <HAL_InitTick+0xd0>)
 80011c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011d0:	f107 020c 	add.w	r2, r7, #12
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 ff96 	bl	800410c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011e0:	f002 ff80 	bl	80040e4 <HAL_RCC_GetPCLK2Freq>
 80011e4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e8:	4a23      	ldr	r2, [pc, #140]	@ (8001278 <HAL_InitTick+0xd4>)
 80011ea:	fba2 2303 	umull	r2, r3, r2, r3
 80011ee:	0c9b      	lsrs	r3, r3, #18
 80011f0:	3b01      	subs	r3, #1
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80011f4:	4b21      	ldr	r3, [pc, #132]	@ (800127c <HAL_InitTick+0xd8>)
 80011f6:	4a22      	ldr	r2, [pc, #136]	@ (8001280 <HAL_InitTick+0xdc>)
 80011f8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80011fa:	4b20      	ldr	r3, [pc, #128]	@ (800127c <HAL_InitTick+0xd8>)
 80011fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001200:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001202:	4a1e      	ldr	r2, [pc, #120]	@ (800127c <HAL_InitTick+0xd8>)
 8001204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001206:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001208:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <HAL_InitTick+0xd8>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <HAL_InitTick+0xd8>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b19      	ldr	r3, [pc, #100]	@ (800127c <HAL_InitTick+0xd8>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800121a:	4818      	ldr	r0, [pc, #96]	@ (800127c <HAL_InitTick+0xd8>)
 800121c:	f002 ffa8 	bl	8004170 <HAL_TIM_Base_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001226:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800122a:	2b00      	cmp	r3, #0
 800122c:	d11b      	bne.n	8001266 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800122e:	4813      	ldr	r0, [pc, #76]	@ (800127c <HAL_InitTick+0xd8>)
 8001230:	f003 f848 	bl	80042c4 <HAL_TIM_Base_Start_IT>
 8001234:	4603      	mov	r3, r0
 8001236:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800123a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800123e:	2b00      	cmp	r3, #0
 8001240:	d111      	bne.n	8001266 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001242:	2019      	movs	r0, #25
 8001244:	f001 f87e 	bl	8002344 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b0f      	cmp	r3, #15
 800124c:	d808      	bhi.n	8001260 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800124e:	2200      	movs	r2, #0
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	2019      	movs	r0, #25
 8001254:	f001 f85a 	bl	800230c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001258:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <HAL_InitTick+0xe0>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e002      	b.n	8001266 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001266:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800126a:	4618      	mov	r0, r3
 800126c:	3730      	adds	r7, #48	@ 0x30
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	431bde83 	.word	0x431bde83
 800127c:	2000014c 	.word	0x2000014c
 8001280:	40014400 	.word	0x40014400
 8001284:	2000005c 	.word	0x2000005c

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <NMI_Handler+0x4>

08001290 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <HardFault_Handler+0x4>

08001298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <MemManage_Handler+0x4>

080012a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <UsageFault_Handler+0x4>

080012b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012c4:	4803      	ldr	r0, [pc, #12]	@ (80012d4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80012c6:	f003 fb8b 	bl	80049e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80012ca:	4803      	ldr	r0, [pc, #12]	@ (80012d8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80012cc:	f003 fb88 	bl	80049e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000198 	.word	0x20000198
 80012d8:	2000014c 	.word	0x2000014c

080012dc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <TIM1_CC_IRQHandler+0x10>)
 80012e2:	f003 fb7d 	bl	80049e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000198 	.word	0x20000198

080012f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <TIM2_IRQHandler+0x10>)
 80012f6:	f003 fb73 	bl	80049e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200001e0 	.word	0x200001e0

08001304 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <USART1_IRQHandler+0x10>)
 800130a:	f004 fc87 	bl	8005c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000300 	.word	0x20000300

08001318 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800131c:	4802      	ldr	r0, [pc, #8]	@ (8001328 <USART2_IRQHandler+0x10>)
 800131e:	f004 fc7d 	bl	8005c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000348 	.word	0x20000348

0800132c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <TIM5_IRQHandler+0x10>)
 8001332:	f003 fb55 	bl	80049e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000270 	.word	0x20000270

08001340 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <DMA2_Stream5_IRQHandler+0x10>)
 8001346:	f001 f9a3 	bl	8002690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000390 	.word	0x20000390

08001354 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	e00a      	b.n	800137c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001366:	f3af 8000 	nop.w
 800136a:	4601      	mov	r1, r0
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	60ba      	str	r2, [r7, #8]
 8001372:	b2ca      	uxtb	r2, r1
 8001374:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	3301      	adds	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	429a      	cmp	r2, r3
 8001382:	dbf0      	blt.n	8001366 <_read+0x12>
  }

  return len;
 8001384:	687b      	ldr	r3, [r7, #4]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e009      	b.n	80013b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	60ba      	str	r2, [r7, #8]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fc75 	bl	8000c98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dbf1      	blt.n	80013a0 <_write+0x12>
  }
  return len;
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_close>:

int _close(int file)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013ee:	605a      	str	r2, [r3, #4]
  return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <_isatty>:

int _isatty(int file)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001438:	4a14      	ldr	r2, [pc, #80]	@ (800148c <_sbrk+0x5c>)
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <_sbrk+0x60>)
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001444:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <_sbrk+0x64>)
 800144e:	4a12      	ldr	r2, [pc, #72]	@ (8001498 <_sbrk+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	429a      	cmp	r2, r3
 800145e:	d207      	bcs.n	8001470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001460:	f008 fcb8 	bl	8009dd4 <__errno>
 8001464:	4603      	mov	r3, r0
 8001466:	220c      	movs	r2, #12
 8001468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e009      	b.n	8001484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001470:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001476:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4a05      	ldr	r2, [pc, #20]	@ (8001494 <_sbrk+0x64>)
 8001480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20020000 	.word	0x20020000
 8001490:	00000400 	.word	0x00000400
 8001494:	20000194 	.word	0x20000194
 8001498:	20004f28 	.word	0x20004f28

0800149c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <SystemInit+0x20>)
 80014a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014a6:	4a05      	ldr	r2, [pc, #20]	@ (80014bc <SystemInit+0x20>)
 80014a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	@ 0x28
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c6:	f107 0318 	add.w	r3, r7, #24
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014de:	463b      	mov	r3, r7
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ea:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <MX_TIM1_Init+0xe0>)
 80014ec:	4a2d      	ldr	r2, [pc, #180]	@ (80015a4 <MX_TIM1_Init+0xe4>)
 80014ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80014f0:	4b2b      	ldr	r3, [pc, #172]	@ (80015a0 <MX_TIM1_Init+0xe0>)
 80014f2:	2263      	movs	r2, #99	@ 0x63
 80014f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f6:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <MX_TIM1_Init+0xe0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014fc:	4b28      	ldr	r3, [pc, #160]	@ (80015a0 <MX_TIM1_Init+0xe0>)
 80014fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001502:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001504:	4b26      	ldr	r3, [pc, #152]	@ (80015a0 <MX_TIM1_Init+0xe0>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800150a:	4b25      	ldr	r3, [pc, #148]	@ (80015a0 <MX_TIM1_Init+0xe0>)
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001510:	4b23      	ldr	r3, [pc, #140]	@ (80015a0 <MX_TIM1_Init+0xe0>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001516:	4822      	ldr	r0, [pc, #136]	@ (80015a0 <MX_TIM1_Init+0xe0>)
 8001518:	f002 fe2a 	bl	8004170 <HAL_TIM_Base_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001522:	f7ff fcf1 	bl	8000f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001526:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800152a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800152c:	f107 0318 	add.w	r3, r7, #24
 8001530:	4619      	mov	r1, r3
 8001532:	481b      	ldr	r0, [pc, #108]	@ (80015a0 <MX_TIM1_Init+0xe0>)
 8001534:	f003 fca2 	bl	8004e7c <HAL_TIM_ConfigClockSource>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800153e:	f7ff fce3 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001542:	4817      	ldr	r0, [pc, #92]	@ (80015a0 <MX_TIM1_Init+0xe0>)
 8001544:	f003 f82a 	bl	800459c <HAL_TIM_IC_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800154e:	f7ff fcdb 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	4619      	mov	r1, r3
 8001560:	480f      	ldr	r0, [pc, #60]	@ (80015a0 <MX_TIM1_Init+0xe0>)
 8001562:	f004 f9a5 	bl	80058b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 800156c:	f7ff fccc 	bl	8000f08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001570:	2300      	movs	r3, #0
 8001572:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001574:	2301      	movs	r3, #1
 8001576:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	4619      	mov	r1, r3
 8001586:	4806      	ldr	r0, [pc, #24]	@ (80015a0 <MX_TIM1_Init+0xe0>)
 8001588:	f003 fb1a 	bl	8004bc0 <HAL_TIM_IC_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001592:	f7ff fcb9 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	@ 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000198 	.word	0x20000198
 80015a4:	40010000 	.word	0x40010000

080015a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	@ 0x28
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ae:	f107 0318 	add.w	r3, r7, #24
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015c6:	463b      	mov	r3, r7
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001684 <MX_TIM2_Init+0xdc>)
 80015d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80015da:	4b2a      	ldr	r3, [pc, #168]	@ (8001684 <MX_TIM2_Init+0xdc>)
 80015dc:	2263      	movs	r2, #99	@ 0x63
 80015de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	4b28      	ldr	r3, [pc, #160]	@ (8001684 <MX_TIM2_Init+0xdc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015e6:	4b27      	ldr	r3, [pc, #156]	@ (8001684 <MX_TIM2_Init+0xdc>)
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	4b25      	ldr	r3, [pc, #148]	@ (8001684 <MX_TIM2_Init+0xdc>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f4:	4b23      	ldr	r3, [pc, #140]	@ (8001684 <MX_TIM2_Init+0xdc>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015fa:	4822      	ldr	r0, [pc, #136]	@ (8001684 <MX_TIM2_Init+0xdc>)
 80015fc:	f002 fdb8 	bl	8004170 <HAL_TIM_Base_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001606:	f7ff fc7f 	bl	8000f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800160e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001610:	f107 0318 	add.w	r3, r7, #24
 8001614:	4619      	mov	r1, r3
 8001616:	481b      	ldr	r0, [pc, #108]	@ (8001684 <MX_TIM2_Init+0xdc>)
 8001618:	f003 fc30 	bl	8004e7c <HAL_TIM_ConfigClockSource>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001622:	f7ff fc71 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001626:	4817      	ldr	r0, [pc, #92]	@ (8001684 <MX_TIM2_Init+0xdc>)
 8001628:	f002 ffb8 	bl	800459c <HAL_TIM_IC_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001632:	f7ff fc69 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	4619      	mov	r1, r3
 8001644:	480f      	ldr	r0, [pc, #60]	@ (8001684 <MX_TIM2_Init+0xdc>)
 8001646:	f004 f933 	bl	80058b0 <HAL_TIMEx_MasterConfigSynchronization>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001650:	f7ff fc5a 	bl	8000f08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001654:	2300      	movs	r3, #0
 8001656:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001658:	2301      	movs	r3, #1
 800165a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001664:	463b      	mov	r3, r7
 8001666:	2200      	movs	r2, #0
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	@ (8001684 <MX_TIM2_Init+0xdc>)
 800166c:	f003 faa8 	bl	8004bc0 <HAL_TIM_IC_ConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001676:	f7ff fc47 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	@ 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200001e0 	.word	0x200001e0

08001688 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08e      	sub	sp, #56	@ 0x38
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169c:	f107 0320 	add.w	r3, r7, #32
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
 80016b4:	615a      	str	r2, [r3, #20]
 80016b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016b8:	4b32      	ldr	r3, [pc, #200]	@ (8001784 <MX_TIM3_Init+0xfc>)
 80016ba:	4a33      	ldr	r2, [pc, #204]	@ (8001788 <MX_TIM3_Init+0x100>)
 80016bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016be:	4b31      	ldr	r3, [pc, #196]	@ (8001784 <MX_TIM3_Init+0xfc>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001784 <MX_TIM3_Init+0xfc>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 80016ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001784 <MX_TIM3_Init+0xfc>)
 80016cc:	f241 3287 	movw	r2, #4999	@ 0x1387
 80016d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001784 <MX_TIM3_Init+0xfc>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001784 <MX_TIM3_Init+0xfc>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016de:	4829      	ldr	r0, [pc, #164]	@ (8001784 <MX_TIM3_Init+0xfc>)
 80016e0:	f002 fd46 	bl	8004170 <HAL_TIM_Base_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016ea:	f7ff fc0d 	bl	8000f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016f8:	4619      	mov	r1, r3
 80016fa:	4822      	ldr	r0, [pc, #136]	@ (8001784 <MX_TIM3_Init+0xfc>)
 80016fc:	f003 fbbe 	bl	8004e7c <HAL_TIM_ConfigClockSource>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001706:	f7ff fbff 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800170a:	481e      	ldr	r0, [pc, #120]	@ (8001784 <MX_TIM3_Init+0xfc>)
 800170c:	f002 fe3c 	bl	8004388 <HAL_TIM_PWM_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001716:	f7ff fbf7 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001722:	f107 0320 	add.w	r3, r7, #32
 8001726:	4619      	mov	r1, r3
 8001728:	4816      	ldr	r0, [pc, #88]	@ (8001784 <MX_TIM3_Init+0xfc>)
 800172a:	f004 f8c1 	bl	80058b0 <HAL_TIMEx_MasterConfigSynchronization>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001734:	f7ff fbe8 	bl	8000f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001738:	2360      	movs	r3, #96	@ 0x60
 800173a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2200      	movs	r2, #0
 800174c:	4619      	mov	r1, r3
 800174e:	480d      	ldr	r0, [pc, #52]	@ (8001784 <MX_TIM3_Init+0xfc>)
 8001750:	f003 fad2 	bl	8004cf8 <HAL_TIM_PWM_ConfigChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800175a:	f7ff fbd5 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2204      	movs	r2, #4
 8001762:	4619      	mov	r1, r3
 8001764:	4807      	ldr	r0, [pc, #28]	@ (8001784 <MX_TIM3_Init+0xfc>)
 8001766:	f003 fac7 	bl	8004cf8 <HAL_TIM_PWM_ConfigChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001770:	f7ff fbca 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001774:	4803      	ldr	r0, [pc, #12]	@ (8001784 <MX_TIM3_Init+0xfc>)
 8001776:	f000 f997 	bl	8001aa8 <HAL_TIM_MspPostInit>

}
 800177a:	bf00      	nop
 800177c:	3738      	adds	r7, #56	@ 0x38
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000228 	.word	0x20000228
 8001788:	40000400 	.word	0x40000400

0800178c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	@ 0x28
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	f107 0318 	add.w	r3, r7, #24
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017aa:	463b      	mov	r3, r7
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001864 <MX_TIM5_Init+0xd8>)
 80017b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001868 <MX_TIM5_Init+0xdc>)
 80017ba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 80017bc:	4b29      	ldr	r3, [pc, #164]	@ (8001864 <MX_TIM5_Init+0xd8>)
 80017be:	2263      	movs	r2, #99	@ 0x63
 80017c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c2:	4b28      	ldr	r3, [pc, #160]	@ (8001864 <MX_TIM5_Init+0xd8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80017c8:	4b26      	ldr	r3, [pc, #152]	@ (8001864 <MX_TIM5_Init+0xd8>)
 80017ca:	f04f 32ff 	mov.w	r2, #4294967295
 80017ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d0:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <MX_TIM5_Init+0xd8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d6:	4b23      	ldr	r3, [pc, #140]	@ (8001864 <MX_TIM5_Init+0xd8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017dc:	4821      	ldr	r0, [pc, #132]	@ (8001864 <MX_TIM5_Init+0xd8>)
 80017de:	f002 fcc7 	bl	8004170 <HAL_TIM_Base_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 80017e8:	f7ff fb8e 	bl	8000f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017f2:	f107 0318 	add.w	r3, r7, #24
 80017f6:	4619      	mov	r1, r3
 80017f8:	481a      	ldr	r0, [pc, #104]	@ (8001864 <MX_TIM5_Init+0xd8>)
 80017fa:	f003 fb3f 	bl	8004e7c <HAL_TIM_ConfigClockSource>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001804:	f7ff fb80 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001808:	4816      	ldr	r0, [pc, #88]	@ (8001864 <MX_TIM5_Init+0xd8>)
 800180a:	f002 fec7 	bl	800459c <HAL_TIM_IC_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001814:	f7ff fb78 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	4619      	mov	r1, r3
 8001826:	480f      	ldr	r0, [pc, #60]	@ (8001864 <MX_TIM5_Init+0xd8>)
 8001828:	f004 f842 	bl	80058b0 <HAL_TIMEx_MasterConfigSynchronization>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8001832:	f7ff fb69 	bl	8000f08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800183a:	2301      	movs	r3, #1
 800183c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001846:	463b      	mov	r3, r7
 8001848:	2204      	movs	r2, #4
 800184a:	4619      	mov	r1, r3
 800184c:	4805      	ldr	r0, [pc, #20]	@ (8001864 <MX_TIM5_Init+0xd8>)
 800184e:	f003 f9b7 	bl	8004bc0 <HAL_TIM_IC_ConfigChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8001858:	f7ff fb56 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	3728      	adds	r7, #40	@ 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000270 	.word	0x20000270
 8001868:	40000c00 	.word	0x40000c00

0800186c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001870:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <MX_TIM11_Init+0x40>)
 8001872:	4a0f      	ldr	r2, [pc, #60]	@ (80018b0 <MX_TIM11_Init+0x44>)
 8001874:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8001876:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <MX_TIM11_Init+0x40>)
 8001878:	2263      	movs	r2, #99	@ 0x63
 800187a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187c:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <MX_TIM11_Init+0x40>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001882:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <MX_TIM11_Init+0x40>)
 8001884:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001888:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188a:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <MX_TIM11_Init+0x40>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <MX_TIM11_Init+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	@ (80018ac <MX_TIM11_Init+0x40>)
 8001898:	f002 fc6a 	bl	8004170 <HAL_TIM_Base_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80018a2:	f7ff fb31 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200002b8 	.word	0x200002b8
 80018b0:	40014800 	.word	0x40014800

080018b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b090      	sub	sp, #64	@ 0x40
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a6f      	ldr	r2, [pc, #444]	@ (8001a90 <HAL_TIM_Base_MspInit+0x1dc>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d13d      	bne.n	8001952 <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018da:	4b6e      	ldr	r3, [pc, #440]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	4a6d      	ldr	r2, [pc, #436]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e6:	4b6b      	ldr	r3, [pc, #428]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f6:	4b67      	ldr	r3, [pc, #412]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	4a66      	ldr	r2, [pc, #408]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6313      	str	r3, [r2, #48]	@ 0x30
 8001902:	4b64      	ldr	r3, [pc, #400]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800190e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001920:	2301      	movs	r3, #1
 8001922:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001928:	4619      	mov	r1, r3
 800192a:	485b      	ldr	r0, [pc, #364]	@ (8001a98 <HAL_TIM_Base_MspInit+0x1e4>)
 800192c:	f001 f91a 	bl	8002b64 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	210f      	movs	r1, #15
 8001934:	2019      	movs	r0, #25
 8001936:	f000 fce9 	bl	800230c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800193a:	2019      	movs	r0, #25
 800193c:	f000 fd02 	bl	8002344 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2105      	movs	r1, #5
 8001944:	201b      	movs	r0, #27
 8001946:	f000 fce1 	bl	800230c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800194a:	201b      	movs	r0, #27
 800194c:	f000 fcfa 	bl	8002344 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001950:	e09a      	b.n	8001a88 <HAL_TIM_Base_MspInit+0x1d4>
  else if(tim_baseHandle->Instance==TIM2)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800195a:	d134      	bne.n	80019c6 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
 8001960:	4b4c      	ldr	r3, [pc, #304]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001964:	4a4b      	ldr	r2, [pc, #300]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6413      	str	r3, [r2, #64]	@ 0x40
 800196c:	4b49      	ldr	r3, [pc, #292]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	623b      	str	r3, [r7, #32]
 8001976:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
 800197c:	4b45      	ldr	r3, [pc, #276]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001980:	4a44      	ldr	r2, [pc, #272]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6313      	str	r3, [r2, #48]	@ 0x30
 8001988:	4b42      	ldr	r3, [pc, #264]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001994:	2320      	movs	r3, #32
 8001996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019a4:	2301      	movs	r3, #1
 80019a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ac:	4619      	mov	r1, r3
 80019ae:	483a      	ldr	r0, [pc, #232]	@ (8001a98 <HAL_TIM_Base_MspInit+0x1e4>)
 80019b0:	f001 f8d8 	bl	8002b64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2105      	movs	r1, #5
 80019b8:	201c      	movs	r0, #28
 80019ba:	f000 fca7 	bl	800230c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019be:	201c      	movs	r0, #28
 80019c0:	f000 fcc0 	bl	8002344 <HAL_NVIC_EnableIRQ>
}
 80019c4:	e060      	b.n	8001a88 <HAL_TIM_Base_MspInit+0x1d4>
  else if(tim_baseHandle->Instance==TIM3)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a34      	ldr	r2, [pc, #208]	@ (8001a9c <HAL_TIM_Base_MspInit+0x1e8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d10e      	bne.n	80019ee <HAL_TIM_Base_MspInit+0x13a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	4a2e      	ldr	r2, [pc, #184]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 80019da:	f043 0302 	orr.w	r3, r3, #2
 80019de:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	69bb      	ldr	r3, [r7, #24]
}
 80019ec:	e04c      	b.n	8001a88 <HAL_TIM_Base_MspInit+0x1d4>
  else if(tim_baseHandle->Instance==TIM5)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a2b      	ldr	r2, [pc, #172]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x1ec>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d134      	bne.n	8001a62 <HAL_TIM_Base_MspInit+0x1ae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	4b25      	ldr	r3, [pc, #148]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	4a24      	ldr	r2, [pc, #144]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 8001a02:	f043 0308 	orr.w	r3, r3, #8
 8001a06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a08:	4b22      	ldr	r3, [pc, #136]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a24:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a30:	2302      	movs	r3, #2
 8001a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a40:	2302      	movs	r3, #2
 8001a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4813      	ldr	r0, [pc, #76]	@ (8001a98 <HAL_TIM_Base_MspInit+0x1e4>)
 8001a4c:	f001 f88a 	bl	8002b64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2105      	movs	r1, #5
 8001a54:	2032      	movs	r0, #50	@ 0x32
 8001a56:	f000 fc59 	bl	800230c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a5a:	2032      	movs	r0, #50	@ 0x32
 8001a5c:	f000 fc72 	bl	8002344 <HAL_NVIC_EnableIRQ>
}
 8001a60:	e012      	b.n	8001a88 <HAL_TIM_Base_MspInit+0x1d4>
  else if(tim_baseHandle->Instance==TIM11)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d10d      	bne.n	8001a88 <HAL_TIM_Base_MspInit+0x1d4>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 8001a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a74:	4a07      	ldr	r2, [pc, #28]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 8001a76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a7a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <HAL_TIM_Base_MspInit+0x1e0>)
 8001a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3740      	adds	r7, #64	@ 0x40
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40010000 	.word	0x40010000
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020000 	.word	0x40020000
 8001a9c:	40000400 	.word	0x40000400
 8001aa0:	40000c00 	.word	0x40000c00
 8001aa4:	40014800 	.word	0x40014800

08001aa8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a12      	ldr	r2, [pc, #72]	@ (8001b10 <HAL_TIM_MspPostInit+0x68>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d11d      	bne.n	8001b06 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <HAL_TIM_MspPostInit+0x6c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	4a10      	ldr	r2, [pc, #64]	@ (8001b14 <HAL_TIM_MspPostInit+0x6c>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <HAL_TIM_MspPostInit+0x6c>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ae6:	23c0      	movs	r3, #192	@ 0xc0
 8001ae8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 030c 	add.w	r3, r7, #12
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <HAL_TIM_MspPostInit+0x70>)
 8001b02:	f001 f82f 	bl	8002b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b06:	bf00      	nop
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40000400 	.word	0x40000400
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020000 	.word	0x40020000

08001b1c <GetDistance>:
    {GPIOB, GPIO_PIN_8, &htim5, TIM_CHANNEL_2}
};

// 거리 가져오기 함수
uint8_t GetDistance(uint8_t index)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
    return sensors[index].distance;
 8001b26:	79fa      	ldrb	r2, [r7, #7]
 8001b28:	4906      	ldr	r1, [pc, #24]	@ (8001b44 <GetDistance+0x28>)
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	1a9b      	subs	r3, r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	3318      	adds	r3, #24
 8001b36:	781b      	ldrb	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	20000008 	.word	0x20000008

08001b48 <TriggerSensor>:

// 트리거 함수
void TriggerSensor(UltrasonicSensor_t* sensor)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
    HAL_TIM_IC_Stop_IT(sensor->htim, sensor->channel);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	f002 fe92 	bl	8004884 <HAL_TIM_IC_Stop_IT>
    __HAL_TIM_SET_CAPTUREPOLARITY(sensor->htim, sensor->channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10a      	bne.n	8001b7e <TriggerSensor+0x36>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6a1a      	ldr	r2, [r3, #32]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 020a 	bic.w	r2, r2, #10
 8001b7a:	621a      	str	r2, [r3, #32]
 8001b7c:	e027      	b.n	8001bce <TriggerSensor+0x86>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d10a      	bne.n	8001b9c <TriggerSensor+0x54>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6892      	ldr	r2, [r2, #8]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001b98:	6213      	str	r3, [r2, #32]
 8001b9a:	e018      	b.n	8001bce <TriggerSensor+0x86>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d10a      	bne.n	8001bba <TriggerSensor+0x72>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6892      	ldr	r2, [r2, #8]
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8001bb6:	6213      	str	r3, [r2, #32]
 8001bb8:	e009      	b.n	8001bce <TriggerSensor+0x86>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6892      	ldr	r2, [r2, #8]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8001bcc:	6213      	str	r3, [r2, #32]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d108      	bne.n	8001be8 <TriggerSensor+0xa0>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6a12      	ldr	r2, [r2, #32]
 8001be4:	621a      	str	r2, [r3, #32]
 8001be6:	e021      	b.n	8001c2c <TriggerSensor+0xe4>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d108      	bne.n	8001c02 <TriggerSensor+0xba>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6892      	ldr	r2, [r2, #8]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	6213      	str	r3, [r2, #32]
 8001c00:	e014      	b.n	8001c2c <TriggerSensor+0xe4>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d108      	bne.n	8001c1c <TriggerSensor+0xd4>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6892      	ldr	r2, [r2, #8]
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	6213      	str	r3, [r2, #32]
 8001c1a:	e007      	b.n	8001c2c <TriggerSensor+0xe4>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6892      	ldr	r2, [r2, #8]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	6213      	str	r3, [r2, #32]
    HAL_TIM_IC_Start_IT(sensor->htim, sensor->channel);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4619      	mov	r1, r3
 8001c36:	4610      	mov	r0, r2
 8001c38:	f002 fd0a 	bl	8004650 <HAL_TIM_IC_Start_IT>

    HAL_GPIO_WritePin(sensor->trig_port, sensor->trig_pin, GPIO_PIN_RESET);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	889b      	ldrh	r3, [r3, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	4619      	mov	r1, r3
 8001c48:	f001 f910 	bl	8002e6c <HAL_GPIO_WritePin>
    delay_us(1);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f7fe fcad 	bl	80005ac <delay_us>
    HAL_GPIO_WritePin(sensor->trig_port, sensor->trig_pin, GPIO_PIN_SET);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	889b      	ldrh	r3, [r3, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f001 f905 	bl	8002e6c <HAL_GPIO_WritePin>
    delay_us(10);
 8001c62:	200a      	movs	r0, #10
 8001c64:	f7fe fca2 	bl	80005ac <delay_us>
    HAL_GPIO_WritePin(sensor->trig_port, sensor->trig_pin, GPIO_PIN_RESET);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	889b      	ldrh	r3, [r3, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	4619      	mov	r1, r3
 8001c74:	f001 f8fa 	bl	8002e6c <HAL_GPIO_WritePin>


    sensor->capture_flag = 0;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	751a      	strb	r2, [r3, #20]
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_TIM_IC_CaptureCallback>:



// 인터럽트 콜백 함수
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < NUM_SENSORS; i++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	e0d2      	b.n	8001e3c <HAL_TIM_IC_CaptureCallback+0x1b4>
    {
        UltrasonicSensor_t* sensor = &sensors[i];
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	1a9b      	subs	r3, r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4a6b      	ldr	r2, [pc, #428]	@ (8001e50 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60bb      	str	r3, [r7, #8]
        if (htim->Instance == sensor->htim->Instance)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	f040 80c0 	bne.w	8001e36 <HAL_TIM_IC_CaptureCallback+0x1ae>
        {
            if (sensor->capture_flag == 0)
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	7d1b      	ldrb	r3, [r3, #20]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d17d      	bne.n	8001dba <HAL_TIM_IC_CaptureCallback+0x132>
            {
                sensor->ic_val1 = HAL_TIM_ReadCapturedValue(sensor->htim, sensor->channel);
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4610      	mov	r0, r2
 8001cca:	f003 f99f 	bl	800500c <HAL_TIM_ReadCapturedValue>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	821a      	strh	r2, [r3, #16]
                sensor->capture_flag = 1;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	751a      	strb	r2, [r3, #20]
                __HAL_TIM_SET_CAPTUREPOLARITY(sensor->htim, sensor->channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10a      	bne.n	8001cfa <HAL_TIM_IC_CaptureCallback+0x72>
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6a1a      	ldr	r2, [r3, #32]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 020a 	bic.w	r2, r2, #10
 8001cf6:	621a      	str	r2, [r3, #32]
 8001cf8:	e027      	b.n	8001d4a <HAL_TIM_IC_CaptureCallback+0xc2>
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d10a      	bne.n	8001d18 <HAL_TIM_IC_CaptureCallback+0x90>
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	6892      	ldr	r2, [r2, #8]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001d14:	6213      	str	r3, [r2, #32]
 8001d16:	e018      	b.n	8001d4a <HAL_TIM_IC_CaptureCallback+0xc2>
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d10a      	bne.n	8001d36 <HAL_TIM_IC_CaptureCallback+0xae>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	6892      	ldr	r2, [r2, #8]
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8001d32:	6213      	str	r3, [r2, #32]
 8001d34:	e009      	b.n	8001d4a <HAL_TIM_IC_CaptureCallback+0xc2>
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	6892      	ldr	r2, [r2, #8]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8001d48:	6213      	str	r3, [r2, #32]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10a      	bne.n	8001d68 <HAL_TIM_IC_CaptureCallback+0xe0>
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6a1a      	ldr	r2, [r3, #32]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0202 	orr.w	r2, r2, #2
 8001d64:	621a      	str	r2, [r3, #32]
 8001d66:	e066      	b.n	8001e36 <HAL_TIM_IC_CaptureCallback+0x1ae>
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d10a      	bne.n	8001d86 <HAL_TIM_IC_CaptureCallback+0xfe>
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	6892      	ldr	r2, [r2, #8]
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	f043 0320 	orr.w	r3, r3, #32
 8001d82:	6213      	str	r3, [r2, #32]
 8001d84:	e057      	b.n	8001e36 <HAL_TIM_IC_CaptureCallback+0x1ae>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d10a      	bne.n	8001da4 <HAL_TIM_IC_CaptureCallback+0x11c>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	6892      	ldr	r2, [r2, #8]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001da0:	6213      	str	r3, [r2, #32]
 8001da2:	e048      	b.n	8001e36 <HAL_TIM_IC_CaptureCallback+0x1ae>
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	6892      	ldr	r2, [r2, #8]
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001db6:	6213      	str	r3, [r2, #32]
 8001db8:	e03d      	b.n	8001e36 <HAL_TIM_IC_CaptureCallback+0x1ae>
            }
            else
            {
                sensor->ic_val2 = HAL_TIM_ReadCapturedValue(sensor->htim, sensor->channel);
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	f003 f921 	bl	800500c <HAL_TIM_ReadCapturedValue>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	825a      	strh	r2, [r3, #18]
                if (sensor->ic_val2 >= sensor->ic_val1)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	8a5a      	ldrh	r2, [r3, #18]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	8a1b      	ldrh	r3, [r3, #16]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d308      	bcc.n	8001df0 <HAL_TIM_IC_CaptureCallback+0x168>
                    sensor->echo_time = sensor->ic_val2 - sensor->ic_val1;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	8a5a      	ldrh	r2, [r3, #18]
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	8a1b      	ldrh	r3, [r3, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	82da      	strh	r2, [r3, #22]
 8001dee:	e009      	b.n	8001e04 <HAL_TIM_IC_CaptureCallback+0x17c>
                else
                    sensor->echo_time = (0xFFFF - sensor->ic_val1) + sensor->ic_val2;
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	8a5a      	ldrh	r2, [r3, #18]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	8a1b      	ldrh	r3, [r3, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	82da      	strh	r2, [r3, #22]

                sensor->distance = sensor->echo_time / 58;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	8adb      	ldrh	r3, [r3, #22]
 8001e08:	4a12      	ldr	r2, [pc, #72]	@ (8001e54 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	761a      	strb	r2, [r3, #24]
                sensor->capture_flag = 0;
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	751a      	strb	r2, [r3, #20]

                __HAL_TIM_DISABLE_IT(sensor->htim, sensor->channel);
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68d9      	ldr	r1, [r3, #12]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	400a      	ands	r2, r1
 8001e34:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < NUM_SENSORS; i++)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	f77f af29 	ble.w	8001c96 <HAL_TIM_IC_CaptureCallback+0xe>
                //printf("Sensor %d: %d cm\n", i, sensor->distance);
            }
        }
    }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000008 	.word	0x20000008
 8001e54:	8d3dcb09 	.word	0x8d3dcb09

08001e58 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <MX_USART1_UART_Init+0x50>)
 8001e60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e62:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e64:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e7e:	220c      	movs	r2, #12
 8001e80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e82:	4b08      	ldr	r3, [pc, #32]	@ (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e8e:	4805      	ldr	r0, [pc, #20]	@ (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e90:	f003 fd90 	bl	80059b4 <HAL_UART_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e9a:	f7ff f835 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000300 	.word	0x20000300
 8001ea8:	40011000 	.word	0x40011000

08001eac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <MX_USART2_UART_Init+0x4c>)
 8001eb2:	4a12      	ldr	r2, [pc, #72]	@ (8001efc <MX_USART2_UART_Init+0x50>)
 8001eb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ef8 <MX_USART2_UART_Init+0x4c>)
 8001eb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ebc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <MX_USART2_UART_Init+0x4c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <MX_USART2_UART_Init+0x4c>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <MX_USART2_UART_Init+0x4c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ed0:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <MX_USART2_UART_Init+0x4c>)
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed6:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <MX_USART2_UART_Init+0x4c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <MX_USART2_UART_Init+0x4c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ee2:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <MX_USART2_UART_Init+0x4c>)
 8001ee4:	f003 fd66 	bl	80059b4 <HAL_UART_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001eee:	f7ff f80b 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000348 	.word	0x20000348
 8001efc:	40004400 	.word	0x40004400

08001f00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08c      	sub	sp, #48	@ 0x30
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a51      	ldr	r2, [pc, #324]	@ (8002064 <HAL_UART_MspInit+0x164>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d163      	bne.n	8001fea <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	4b50      	ldr	r3, [pc, #320]	@ (8002068 <HAL_UART_MspInit+0x168>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	4a4f      	ldr	r2, [pc, #316]	@ (8002068 <HAL_UART_MspInit+0x168>)
 8001f2c:	f043 0310 	orr.w	r3, r3, #16
 8001f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f32:	4b4d      	ldr	r3, [pc, #308]	@ (8002068 <HAL_UART_MspInit+0x168>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	4b49      	ldr	r3, [pc, #292]	@ (8002068 <HAL_UART_MspInit+0x168>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	4a48      	ldr	r2, [pc, #288]	@ (8002068 <HAL_UART_MspInit+0x168>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4e:	4b46      	ldr	r3, [pc, #280]	@ (8002068 <HAL_UART_MspInit+0x168>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f5a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f6c:	2307      	movs	r3, #7
 8001f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4619      	mov	r1, r3
 8001f76:	483d      	ldr	r0, [pc, #244]	@ (800206c <HAL_UART_MspInit+0x16c>)
 8001f78:	f000 fdf4 	bl	8002b64 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8001f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8002070 <HAL_UART_MspInit+0x170>)
 8001f7e:	4a3d      	ldr	r2, [pc, #244]	@ (8002074 <HAL_UART_MspInit+0x174>)
 8001f80:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001f82:	4b3b      	ldr	r3, [pc, #236]	@ (8002070 <HAL_UART_MspInit+0x170>)
 8001f84:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f88:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f8a:	4b39      	ldr	r3, [pc, #228]	@ (8002070 <HAL_UART_MspInit+0x170>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f90:	4b37      	ldr	r3, [pc, #220]	@ (8002070 <HAL_UART_MspInit+0x170>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f96:	4b36      	ldr	r3, [pc, #216]	@ (8002070 <HAL_UART_MspInit+0x170>)
 8001f98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f9c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f9e:	4b34      	ldr	r3, [pc, #208]	@ (8002070 <HAL_UART_MspInit+0x170>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fa4:	4b32      	ldr	r3, [pc, #200]	@ (8002070 <HAL_UART_MspInit+0x170>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001faa:	4b31      	ldr	r3, [pc, #196]	@ (8002070 <HAL_UART_MspInit+0x170>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fb0:	4b2f      	ldr	r3, [pc, #188]	@ (8002070 <HAL_UART_MspInit+0x170>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8002070 <HAL_UART_MspInit+0x170>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001fbc:	482c      	ldr	r0, [pc, #176]	@ (8002070 <HAL_UART_MspInit+0x170>)
 8001fbe:	f000 f9cf 	bl	8002360 <HAL_DMA_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001fc8:	f7fe ff9e 	bl	8000f08 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a28      	ldr	r2, [pc, #160]	@ (8002070 <HAL_UART_MspInit+0x170>)
 8001fd0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fd2:	4a27      	ldr	r2, [pc, #156]	@ (8002070 <HAL_UART_MspInit+0x170>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2105      	movs	r1, #5
 8001fdc:	2025      	movs	r0, #37	@ 0x25
 8001fde:	f000 f995 	bl	800230c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fe2:	2025      	movs	r0, #37	@ 0x25
 8001fe4:	f000 f9ae 	bl	8002344 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fe8:	e038      	b.n	800205c <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a22      	ldr	r2, [pc, #136]	@ (8002078 <HAL_UART_MspInit+0x178>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d133      	bne.n	800205c <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8002068 <HAL_UART_MspInit+0x168>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8002068 <HAL_UART_MspInit+0x168>)
 8001ffe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002002:	6413      	str	r3, [r2, #64]	@ 0x40
 8002004:	4b18      	ldr	r3, [pc, #96]	@ (8002068 <HAL_UART_MspInit+0x168>)
 8002006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	4b14      	ldr	r3, [pc, #80]	@ (8002068 <HAL_UART_MspInit+0x168>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002018:	4a13      	ldr	r2, [pc, #76]	@ (8002068 <HAL_UART_MspInit+0x168>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002020:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <HAL_UART_MspInit+0x168>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800202c:	230c      	movs	r3, #12
 800202e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002038:	2303      	movs	r3, #3
 800203a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800203c:	2307      	movs	r3, #7
 800203e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002040:	f107 031c 	add.w	r3, r7, #28
 8002044:	4619      	mov	r1, r3
 8002046:	4809      	ldr	r0, [pc, #36]	@ (800206c <HAL_UART_MspInit+0x16c>)
 8002048:	f000 fd8c 	bl	8002b64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	2105      	movs	r1, #5
 8002050:	2026      	movs	r0, #38	@ 0x26
 8002052:	f000 f95b 	bl	800230c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002056:	2026      	movs	r0, #38	@ 0x26
 8002058:	f000 f974 	bl	8002344 <HAL_NVIC_EnableIRQ>
}
 800205c:	bf00      	nop
 800205e:	3730      	adds	r7, #48	@ 0x30
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40011000 	.word	0x40011000
 8002068:	40023800 	.word	0x40023800
 800206c:	40020000 	.word	0x40020000
 8002070:	20000390 	.word	0x20000390
 8002074:	40026488 	.word	0x40026488
 8002078:	40004400 	.word	0x40004400

0800207c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800207c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002080:	f7ff fa0c 	bl	800149c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002084:	480c      	ldr	r0, [pc, #48]	@ (80020b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002086:	490d      	ldr	r1, [pc, #52]	@ (80020bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002088:	4a0d      	ldr	r2, [pc, #52]	@ (80020c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800208c:	e002      	b.n	8002094 <LoopCopyDataInit>

0800208e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002092:	3304      	adds	r3, #4

08002094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002098:	d3f9      	bcc.n	800208e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209a:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800209c:	4c0a      	ldr	r4, [pc, #40]	@ (80020c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a0:	e001      	b.n	80020a6 <LoopFillZerobss>

080020a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a4:	3204      	adds	r2, #4

080020a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a8:	d3fb      	bcc.n	80020a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020aa:	f007 fe99 	bl	8009de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ae:	f7fe fe11 	bl	8000cd4 <main>
  bx  lr    
 80020b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020bc:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80020c0:	0800aed4 	.word	0x0800aed4
  ldr r2, =_sbss
 80020c4:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80020c8:	20004f28 	.word	0x20004f28

080020cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020cc:	e7fe      	b.n	80020cc <ADC_IRQHandler>
	...

080020d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <HAL_Init+0x40>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002110 <HAL_Init+0x40>)
 80020da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_Init+0x40>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <HAL_Init+0x40>)
 80020e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ec:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <HAL_Init+0x40>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a07      	ldr	r2, [pc, #28]	@ (8002110 <HAL_Init+0x40>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f8:	2003      	movs	r0, #3
 80020fa:	f000 f8fc 	bl	80022f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fe:	200f      	movs	r0, #15
 8002100:	f7ff f850 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002104:	f7ff f822 	bl	800114c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023c00 	.word	0x40023c00

08002114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002118:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <HAL_IncTick+0x20>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <HAL_IncTick+0x24>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4413      	add	r3, r2
 8002124:	4a04      	ldr	r2, [pc, #16]	@ (8002138 <HAL_IncTick+0x24>)
 8002126:	6013      	str	r3, [r2, #0]
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20000060 	.word	0x20000060
 8002138:	200003f0 	.word	0x200003f0

0800213c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return uwTick;
 8002140:	4b03      	ldr	r3, [pc, #12]	@ (8002150 <HAL_GetTick+0x14>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	200003f0 	.word	0x200003f0

08002154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff ffee 	bl	800213c <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216c:	d005      	beq.n	800217a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800216e:	4b0a      	ldr	r3, [pc, #40]	@ (8002198 <HAL_Delay+0x44>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800217a:	bf00      	nop
 800217c:	f7ff ffde 	bl	800213c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	429a      	cmp	r2, r3
 800218a:	d8f7      	bhi.n	800217c <HAL_Delay+0x28>
  {
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000060 	.word	0x20000060

0800219c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ac:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <__NVIC_SetPriorityGrouping+0x44>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021b8:	4013      	ands	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ce:	4a04      	ldr	r2, [pc, #16]	@ (80021e0 <__NVIC_SetPriorityGrouping+0x44>)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	60d3      	str	r3, [r2, #12]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e8:	4b04      	ldr	r3, [pc, #16]	@ (80021fc <__NVIC_GetPriorityGrouping+0x18>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	f003 0307 	and.w	r3, r3, #7
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	2b00      	cmp	r3, #0
 8002210:	db0b      	blt.n	800222a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	f003 021f 	and.w	r2, r3, #31
 8002218:	4907      	ldr	r1, [pc, #28]	@ (8002238 <__NVIC_EnableIRQ+0x38>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	2001      	movs	r0, #1
 8002222:	fa00 f202 	lsl.w	r2, r0, r2
 8002226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000e100 	.word	0xe000e100

0800223c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	6039      	str	r1, [r7, #0]
 8002246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224c:	2b00      	cmp	r3, #0
 800224e:	db0a      	blt.n	8002266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	490c      	ldr	r1, [pc, #48]	@ (8002288 <__NVIC_SetPriority+0x4c>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	0112      	lsls	r2, r2, #4
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	440b      	add	r3, r1
 8002260:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002264:	e00a      	b.n	800227c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4908      	ldr	r1, [pc, #32]	@ (800228c <__NVIC_SetPriority+0x50>)
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	3b04      	subs	r3, #4
 8002274:	0112      	lsls	r2, r2, #4
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	440b      	add	r3, r1
 800227a:	761a      	strb	r2, [r3, #24]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000e100 	.word	0xe000e100
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	@ 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f1c3 0307 	rsb	r3, r3, #7
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	bf28      	it	cs
 80022ae:	2304      	movcs	r3, #4
 80022b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3304      	adds	r3, #4
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d902      	bls.n	80022c0 <NVIC_EncodePriority+0x30>
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3b03      	subs	r3, #3
 80022be:	e000      	b.n	80022c2 <NVIC_EncodePriority+0x32>
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	f04f 32ff 	mov.w	r2, #4294967295
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	401a      	ands	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d8:	f04f 31ff 	mov.w	r1, #4294967295
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	fa01 f303 	lsl.w	r3, r1, r3
 80022e2:	43d9      	mvns	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	4313      	orrs	r3, r2
         );
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3724      	adds	r7, #36	@ 0x24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ff4c 	bl	800219c <__NVIC_SetPriorityGrouping>
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800231e:	f7ff ff61 	bl	80021e4 <__NVIC_GetPriorityGrouping>
 8002322:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	6978      	ldr	r0, [r7, #20]
 800232a:	f7ff ffb1 	bl	8002290 <NVIC_EncodePriority>
 800232e:	4602      	mov	r2, r0
 8002330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ff80 	bl	800223c <__NVIC_SetPriority>
}
 800233c:	bf00      	nop
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff ff54 	bl	8002200 <__NVIC_EnableIRQ>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800236c:	f7ff fee6 	bl	800213c <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e099      	b.n	80024b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800239c:	e00f      	b.n	80023be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800239e:	f7ff fecd 	bl	800213c <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b05      	cmp	r3, #5
 80023aa:	d908      	bls.n	80023be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2220      	movs	r2, #32
 80023b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2203      	movs	r2, #3
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e078      	b.n	80024b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1e8      	bne.n	800239e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	4b38      	ldr	r3, [pc, #224]	@ (80024b8 <HAL_DMA_Init+0x158>)
 80023d8:	4013      	ands	r3, r2
 80023da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002414:	2b04      	cmp	r3, #4
 8002416:	d107      	bne.n	8002428 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002420:	4313      	orrs	r3, r2
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4313      	orrs	r3, r2
 8002426:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f023 0307 	bic.w	r3, r3, #7
 800243e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	4313      	orrs	r3, r2
 8002448:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244e:	2b04      	cmp	r3, #4
 8002450:	d117      	bne.n	8002482 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00e      	beq.n	8002482 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fb01 	bl	8002a6c <DMA_CheckFifoParam>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2240      	movs	r2, #64	@ 0x40
 8002474:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800247e:	2301      	movs	r3, #1
 8002480:	e016      	b.n	80024b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fab8 	bl	8002a00 <DMA_CalcBaseAndBitshift>
 8002490:	4603      	mov	r3, r0
 8002492:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002498:	223f      	movs	r2, #63	@ 0x3f
 800249a:	409a      	lsls	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	f010803f 	.word	0xf010803f

080024bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_DMA_Start_IT+0x26>
 80024de:	2302      	movs	r3, #2
 80024e0:	e040      	b.n	8002564 <HAL_DMA_Start_IT+0xa8>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d12f      	bne.n	8002556 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2202      	movs	r2, #2
 80024fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 fa4a 	bl	80029a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002514:	223f      	movs	r2, #63	@ 0x3f
 8002516:	409a      	lsls	r2, r3
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0216 	orr.w	r2, r2, #22
 800252a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0208 	orr.w	r2, r2, #8
 8002542:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	e005      	b.n	8002562 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800255e:	2302      	movs	r3, #2
 8002560:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002562:	7dfb      	ldrb	r3, [r7, #23]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002578:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800257a:	f7ff fddf 	bl	800213c <HAL_GetTick>
 800257e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d008      	beq.n	800259e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2280      	movs	r2, #128	@ 0x80
 8002590:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e052      	b.n	8002644 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0216 	bic.w	r2, r2, #22
 80025ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <HAL_DMA_Abort+0x62>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0208 	bic.w	r2, r2, #8
 80025dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ee:	e013      	b.n	8002618 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025f0:	f7ff fda4 	bl	800213c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b05      	cmp	r3, #5
 80025fc:	d90c      	bls.n	8002618 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2220      	movs	r2, #32
 8002602:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2203      	movs	r2, #3
 8002608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e015      	b.n	8002644 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1e4      	bne.n	80025f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262a:	223f      	movs	r2, #63	@ 0x3f
 800262c:	409a      	lsls	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d004      	beq.n	800266a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2280      	movs	r2, #128	@ 0x80
 8002664:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e00c      	b.n	8002684 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2205      	movs	r2, #5
 800266e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0201 	bic.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800269c:	4b8e      	ldr	r3, [pc, #568]	@ (80028d8 <HAL_DMA_IRQHandler+0x248>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a8e      	ldr	r2, [pc, #568]	@ (80028dc <HAL_DMA_IRQHandler+0x24c>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	0a9b      	lsrs	r3, r3, #10
 80026a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ba:	2208      	movs	r2, #8
 80026bc:	409a      	lsls	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d01a      	beq.n	80026fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d013      	beq.n	80026fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0204 	bic.w	r2, r2, #4
 80026e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e8:	2208      	movs	r2, #8
 80026ea:	409a      	lsls	r2, r3
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002700:	2201      	movs	r2, #1
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d012      	beq.n	8002732 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271e:	2201      	movs	r2, #1
 8002720:	409a      	lsls	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272a:	f043 0202 	orr.w	r2, r3, #2
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002736:	2204      	movs	r2, #4
 8002738:	409a      	lsls	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d012      	beq.n	8002768 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002754:	2204      	movs	r2, #4
 8002756:	409a      	lsls	r2, r3
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002760:	f043 0204 	orr.w	r2, r3, #4
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276c:	2210      	movs	r2, #16
 800276e:	409a      	lsls	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d043      	beq.n	8002800 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d03c      	beq.n	8002800 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278a:	2210      	movs	r2, #16
 800278c:	409a      	lsls	r2, r3
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d018      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d108      	bne.n	80027c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d024      	beq.n	8002800 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	4798      	blx	r3
 80027be:	e01f      	b.n	8002800 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d01b      	beq.n	8002800 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	4798      	blx	r3
 80027d0:	e016      	b.n	8002800 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d107      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0208 	bic.w	r2, r2, #8
 80027ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002804:	2220      	movs	r2, #32
 8002806:	409a      	lsls	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 808f 	beq.w	8002930 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 8087 	beq.w	8002930 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002826:	2220      	movs	r2, #32
 8002828:	409a      	lsls	r2, r3
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b05      	cmp	r3, #5
 8002838:	d136      	bne.n	80028a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0216 	bic.w	r2, r2, #22
 8002848:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002858:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	2b00      	cmp	r3, #0
 8002860:	d103      	bne.n	800286a <HAL_DMA_IRQHandler+0x1da>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0208 	bic.w	r2, r2, #8
 8002878:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287e:	223f      	movs	r2, #63	@ 0x3f
 8002880:	409a      	lsls	r2, r3
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800289a:	2b00      	cmp	r3, #0
 800289c:	d07e      	beq.n	800299c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	4798      	blx	r3
        }
        return;
 80028a6:	e079      	b.n	800299c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d01d      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10d      	bne.n	80028e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d031      	beq.n	8002930 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	4798      	blx	r3
 80028d4:	e02c      	b.n	8002930 <HAL_DMA_IRQHandler+0x2a0>
 80028d6:	bf00      	nop
 80028d8:	20000004 	.word	0x20000004
 80028dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d023      	beq.n	8002930 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	4798      	blx	r3
 80028f0:	e01e      	b.n	8002930 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10f      	bne.n	8002920 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0210 	bic.w	r2, r2, #16
 800290e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002934:	2b00      	cmp	r3, #0
 8002936:	d032      	beq.n	800299e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d022      	beq.n	800298a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2205      	movs	r2, #5
 8002948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0201 	bic.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	3301      	adds	r3, #1
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	429a      	cmp	r2, r3
 8002966:	d307      	bcc.n	8002978 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f2      	bne.n	800295c <HAL_DMA_IRQHandler+0x2cc>
 8002976:	e000      	b.n	800297a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002978:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	4798      	blx	r3
 800299a:	e000      	b.n	800299e <HAL_DMA_IRQHandler+0x30e>
        return;
 800299c:	bf00      	nop
    }
  }
}
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80029c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b40      	cmp	r3, #64	@ 0x40
 80029d0:	d108      	bne.n	80029e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029e2:	e007      	b.n	80029f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	60da      	str	r2, [r3, #12]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	3b10      	subs	r3, #16
 8002a10:	4a14      	ldr	r2, [pc, #80]	@ (8002a64 <DMA_CalcBaseAndBitshift+0x64>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a1a:	4a13      	ldr	r2, [pc, #76]	@ (8002a68 <DMA_CalcBaseAndBitshift+0x68>)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4413      	add	r3, r2
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d909      	bls.n	8002a42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a36:	f023 0303 	bic.w	r3, r3, #3
 8002a3a:	1d1a      	adds	r2, r3, #4
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a40:	e007      	b.n	8002a52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a4a:	f023 0303 	bic.w	r3, r3, #3
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	aaaaaaab 	.word	0xaaaaaaab
 8002a68:	0800ae88 	.word	0x0800ae88

08002a6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d11f      	bne.n	8002ac6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d856      	bhi.n	8002b3a <DMA_CheckFifoParam+0xce>
 8002a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a94 <DMA_CheckFifoParam+0x28>)
 8002a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a92:	bf00      	nop
 8002a94:	08002aa5 	.word	0x08002aa5
 8002a98:	08002ab7 	.word	0x08002ab7
 8002a9c:	08002aa5 	.word	0x08002aa5
 8002aa0:	08002b3b 	.word	0x08002b3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d046      	beq.n	8002b3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab4:	e043      	b.n	8002b3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002abe:	d140      	bne.n	8002b42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac4:	e03d      	b.n	8002b42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ace:	d121      	bne.n	8002b14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d837      	bhi.n	8002b46 <DMA_CheckFifoParam+0xda>
 8002ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8002adc <DMA_CheckFifoParam+0x70>)
 8002ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002adc:	08002aed 	.word	0x08002aed
 8002ae0:	08002af3 	.word	0x08002af3
 8002ae4:	08002aed 	.word	0x08002aed
 8002ae8:	08002b05 	.word	0x08002b05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
      break;
 8002af0:	e030      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d025      	beq.n	8002b4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b02:	e022      	b.n	8002b4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b0c:	d11f      	bne.n	8002b4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b12:	e01c      	b.n	8002b4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d903      	bls.n	8002b22 <DMA_CheckFifoParam+0xb6>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d003      	beq.n	8002b28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b20:	e018      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
      break;
 8002b26:	e015      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00e      	beq.n	8002b52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
      break;
 8002b38:	e00b      	b.n	8002b52 <DMA_CheckFifoParam+0xe6>
      break;
 8002b3a:	bf00      	nop
 8002b3c:	e00a      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e008      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      break;
 8002b42:	bf00      	nop
 8002b44:	e006      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      break;
 8002b46:	bf00      	nop
 8002b48:	e004      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      break;
 8002b4a:	bf00      	nop
 8002b4c:	e002      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b4e:	bf00      	nop
 8002b50:	e000      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      break;
 8002b52:	bf00      	nop
    }
  } 
  
  return status; 
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop

08002b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	@ 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
 8002b7e:	e159      	b.n	8002e34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b80:	2201      	movs	r2, #1
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	f040 8148 	bne.w	8002e2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d005      	beq.n	8002bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d130      	bne.n	8002c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bec:	2201      	movs	r2, #1
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 0201 	and.w	r2, r3, #1
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d017      	beq.n	8002c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	2203      	movs	r2, #3
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d123      	bne.n	8002ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	08da      	lsrs	r2, r3, #3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3208      	adds	r2, #8
 8002c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	220f      	movs	r2, #15
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	08da      	lsrs	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3208      	adds	r2, #8
 8002ca2:	69b9      	ldr	r1, [r7, #24]
 8002ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0203 	and.w	r2, r3, #3
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80a2 	beq.w	8002e2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	4b57      	ldr	r3, [pc, #348]	@ (8002e4c <HAL_GPIO_Init+0x2e8>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf2:	4a56      	ldr	r2, [pc, #344]	@ (8002e4c <HAL_GPIO_Init+0x2e8>)
 8002cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cfa:	4b54      	ldr	r3, [pc, #336]	@ (8002e4c <HAL_GPIO_Init+0x2e8>)
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d06:	4a52      	ldr	r2, [pc, #328]	@ (8002e50 <HAL_GPIO_Init+0x2ec>)
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	089b      	lsrs	r3, r3, #2
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	220f      	movs	r2, #15
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a49      	ldr	r2, [pc, #292]	@ (8002e54 <HAL_GPIO_Init+0x2f0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d019      	beq.n	8002d66 <HAL_GPIO_Init+0x202>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a48      	ldr	r2, [pc, #288]	@ (8002e58 <HAL_GPIO_Init+0x2f4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d013      	beq.n	8002d62 <HAL_GPIO_Init+0x1fe>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a47      	ldr	r2, [pc, #284]	@ (8002e5c <HAL_GPIO_Init+0x2f8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00d      	beq.n	8002d5e <HAL_GPIO_Init+0x1fa>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a46      	ldr	r2, [pc, #280]	@ (8002e60 <HAL_GPIO_Init+0x2fc>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d007      	beq.n	8002d5a <HAL_GPIO_Init+0x1f6>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a45      	ldr	r2, [pc, #276]	@ (8002e64 <HAL_GPIO_Init+0x300>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d101      	bne.n	8002d56 <HAL_GPIO_Init+0x1f2>
 8002d52:	2304      	movs	r3, #4
 8002d54:	e008      	b.n	8002d68 <HAL_GPIO_Init+0x204>
 8002d56:	2307      	movs	r3, #7
 8002d58:	e006      	b.n	8002d68 <HAL_GPIO_Init+0x204>
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e004      	b.n	8002d68 <HAL_GPIO_Init+0x204>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e002      	b.n	8002d68 <HAL_GPIO_Init+0x204>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <HAL_GPIO_Init+0x204>
 8002d66:	2300      	movs	r3, #0
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	f002 0203 	and.w	r2, r2, #3
 8002d6e:	0092      	lsls	r2, r2, #2
 8002d70:	4093      	lsls	r3, r2
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d78:	4935      	ldr	r1, [pc, #212]	@ (8002e50 <HAL_GPIO_Init+0x2ec>)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	089b      	lsrs	r3, r3, #2
 8002d7e:	3302      	adds	r3, #2
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d86:	4b38      	ldr	r3, [pc, #224]	@ (8002e68 <HAL_GPIO_Init+0x304>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4013      	ands	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002daa:	4a2f      	ldr	r2, [pc, #188]	@ (8002e68 <HAL_GPIO_Init+0x304>)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002db0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e68 <HAL_GPIO_Init+0x304>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dd4:	4a24      	ldr	r2, [pc, #144]	@ (8002e68 <HAL_GPIO_Init+0x304>)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dda:	4b23      	ldr	r3, [pc, #140]	@ (8002e68 <HAL_GPIO_Init+0x304>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8002e68 <HAL_GPIO_Init+0x304>)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e04:	4b18      	ldr	r3, [pc, #96]	@ (8002e68 <HAL_GPIO_Init+0x304>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e28:	4a0f      	ldr	r2, [pc, #60]	@ (8002e68 <HAL_GPIO_Init+0x304>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3301      	adds	r3, #1
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	2b0f      	cmp	r3, #15
 8002e38:	f67f aea2 	bls.w	8002b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	3724      	adds	r7, #36	@ 0x24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40013800 	.word	0x40013800
 8002e54:	40020000 	.word	0x40020000
 8002e58:	40020400 	.word	0x40020400
 8002e5c:	40020800 	.word	0x40020800
 8002e60:	40020c00 	.word	0x40020c00
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40013c00 	.word	0x40013c00

08002e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	807b      	strh	r3, [r7, #2]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e7c:	787b      	ldrb	r3, [r7, #1]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e82:	887a      	ldrh	r2, [r7, #2]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e88:	e003      	b.n	8002e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e8a:	887b      	ldrh	r3, [r7, #2]
 8002e8c:	041a      	lsls	r2, r3, #16
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	619a      	str	r2, [r3, #24]
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e12b      	b.n	800310a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fd fdde 	bl	8000a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	@ 0x24
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ef2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f04:	f001 f8da 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 8002f08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4a81      	ldr	r2, [pc, #516]	@ (8003114 <HAL_I2C_Init+0x274>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d807      	bhi.n	8002f24 <HAL_I2C_Init+0x84>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4a80      	ldr	r2, [pc, #512]	@ (8003118 <HAL_I2C_Init+0x278>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	bf94      	ite	ls
 8002f1c:	2301      	movls	r3, #1
 8002f1e:	2300      	movhi	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e006      	b.n	8002f32 <HAL_I2C_Init+0x92>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4a7d      	ldr	r2, [pc, #500]	@ (800311c <HAL_I2C_Init+0x27c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	bf94      	ite	ls
 8002f2c:	2301      	movls	r3, #1
 8002f2e:	2300      	movhi	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e0e7      	b.n	800310a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4a78      	ldr	r2, [pc, #480]	@ (8003120 <HAL_I2C_Init+0x280>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	0c9b      	lsrs	r3, r3, #18
 8002f44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4a6a      	ldr	r2, [pc, #424]	@ (8003114 <HAL_I2C_Init+0x274>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d802      	bhi.n	8002f74 <HAL_I2C_Init+0xd4>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	3301      	adds	r3, #1
 8002f72:	e009      	b.n	8002f88 <HAL_I2C_Init+0xe8>
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	4a69      	ldr	r2, [pc, #420]	@ (8003124 <HAL_I2C_Init+0x284>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	099b      	lsrs	r3, r3, #6
 8002f86:	3301      	adds	r3, #1
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	495c      	ldr	r1, [pc, #368]	@ (8003114 <HAL_I2C_Init+0x274>)
 8002fa4:	428b      	cmp	r3, r1
 8002fa6:	d819      	bhi.n	8002fdc <HAL_I2C_Init+0x13c>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e59      	subs	r1, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fb6:	1c59      	adds	r1, r3, #1
 8002fb8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fbc:	400b      	ands	r3, r1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_I2C_Init+0x138>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1e59      	subs	r1, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd6:	e051      	b.n	800307c <HAL_I2C_Init+0x1dc>
 8002fd8:	2304      	movs	r3, #4
 8002fda:	e04f      	b.n	800307c <HAL_I2C_Init+0x1dc>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d111      	bne.n	8003008 <HAL_I2C_Init+0x168>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1e58      	subs	r0, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	440b      	add	r3, r1
 8002ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	e012      	b.n	800302e <HAL_I2C_Init+0x18e>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1e58      	subs	r0, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	0099      	lsls	r1, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	fbb0 f3f3 	udiv	r3, r0, r3
 800301e:	3301      	adds	r3, #1
 8003020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf0c      	ite	eq
 8003028:	2301      	moveq	r3, #1
 800302a:	2300      	movne	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_I2C_Init+0x196>
 8003032:	2301      	movs	r3, #1
 8003034:	e022      	b.n	800307c <HAL_I2C_Init+0x1dc>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10e      	bne.n	800305c <HAL_I2C_Init+0x1bc>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1e58      	subs	r0, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6859      	ldr	r1, [r3, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	440b      	add	r3, r1
 800304c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003050:	3301      	adds	r3, #1
 8003052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800305a:	e00f      	b.n	800307c <HAL_I2C_Init+0x1dc>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1e58      	subs	r0, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	0099      	lsls	r1, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003072:	3301      	adds	r3, #1
 8003074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003078:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	6809      	ldr	r1, [r1, #0]
 8003080:	4313      	orrs	r3, r2
 8003082:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69da      	ldr	r2, [r3, #28]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6911      	ldr	r1, [r2, #16]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68d2      	ldr	r2, [r2, #12]
 80030b6:	4311      	orrs	r1, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	430b      	orrs	r3, r1
 80030be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	000186a0 	.word	0x000186a0
 8003118:	001e847f 	.word	0x001e847f
 800311c:	003d08ff 	.word	0x003d08ff
 8003120:	431bde83 	.word	0x431bde83
 8003124:	10624dd3 	.word	0x10624dd3

08003128 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	607a      	str	r2, [r7, #4]
 8003132:	461a      	mov	r2, r3
 8003134:	460b      	mov	r3, r1
 8003136:	817b      	strh	r3, [r7, #10]
 8003138:	4613      	mov	r3, r2
 800313a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800313c:	f7fe fffe 	bl	800213c <HAL_GetTick>
 8003140:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b20      	cmp	r3, #32
 800314c:	f040 80e0 	bne.w	8003310 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2319      	movs	r3, #25
 8003156:	2201      	movs	r2, #1
 8003158:	4970      	ldr	r1, [pc, #448]	@ (800331c <HAL_I2C_Master_Transmit+0x1f4>)
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f964 	bl	8003428 <I2C_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003166:	2302      	movs	r3, #2
 8003168:	e0d3      	b.n	8003312 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_I2C_Master_Transmit+0x50>
 8003174:	2302      	movs	r3, #2
 8003176:	e0cc      	b.n	8003312 <HAL_I2C_Master_Transmit+0x1ea>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b01      	cmp	r3, #1
 800318c:	d007      	beq.n	800319e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0201 	orr.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2221      	movs	r2, #33	@ 0x21
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2210      	movs	r2, #16
 80031ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	893a      	ldrh	r2, [r7, #8]
 80031ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4a50      	ldr	r2, [pc, #320]	@ (8003320 <HAL_I2C_Master_Transmit+0x1f8>)
 80031de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031e0:	8979      	ldrh	r1, [r7, #10]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	6a3a      	ldr	r2, [r7, #32]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f89c 	bl	8003324 <I2C_MasterRequestWrite>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e08d      	b.n	8003312 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800320c:	e066      	b.n	80032dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	6a39      	ldr	r1, [r7, #32]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 fa22 	bl	800365c <I2C_WaitOnTXEFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00d      	beq.n	800323a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	2b04      	cmp	r3, #4
 8003224:	d107      	bne.n	8003236 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003234:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e06b      	b.n	8003312 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323e:	781a      	ldrb	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b04      	cmp	r3, #4
 8003276:	d11b      	bne.n	80032b0 <HAL_I2C_Master_Transmit+0x188>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327c:	2b00      	cmp	r3, #0
 800327e:	d017      	beq.n	80032b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	6a39      	ldr	r1, [r7, #32]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 fa19 	bl	80036ec <I2C_WaitOnBTFFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00d      	beq.n	80032dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d107      	bne.n	80032d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e01a      	b.n	8003312 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d194      	bne.n	800320e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	e000      	b.n	8003312 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003310:	2302      	movs	r3, #2
  }
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	00100002 	.word	0x00100002
 8003320:	ffff0000 	.word	0xffff0000

08003324 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	607a      	str	r2, [r7, #4]
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	460b      	mov	r3, r1
 8003332:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003338:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b08      	cmp	r3, #8
 800333e:	d006      	beq.n	800334e <I2C_MasterRequestWrite+0x2a>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d003      	beq.n	800334e <I2C_MasterRequestWrite+0x2a>
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800334c:	d108      	bne.n	8003360 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e00b      	b.n	8003378 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003364:	2b12      	cmp	r3, #18
 8003366:	d107      	bne.n	8003378 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003376:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f84f 	bl	8003428 <I2C_WaitOnFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00d      	beq.n	80033ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800339e:	d103      	bne.n	80033a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e035      	b.n	8003418 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033b4:	d108      	bne.n	80033c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033b6:	897b      	ldrh	r3, [r7, #10]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033c4:	611a      	str	r2, [r3, #16]
 80033c6:	e01b      	b.n	8003400 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033c8:	897b      	ldrh	r3, [r7, #10]
 80033ca:	11db      	asrs	r3, r3, #7
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	f003 0306 	and.w	r3, r3, #6
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	f063 030f 	orn	r3, r3, #15
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	490e      	ldr	r1, [pc, #56]	@ (8003420 <I2C_MasterRequestWrite+0xfc>)
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f898 	bl	800351c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e010      	b.n	8003418 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033f6:	897b      	ldrh	r3, [r7, #10]
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4907      	ldr	r1, [pc, #28]	@ (8003424 <I2C_MasterRequestWrite+0x100>)
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f888 	bl	800351c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	00010008 	.word	0x00010008
 8003424:	00010002 	.word	0x00010002

08003428 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	4613      	mov	r3, r2
 8003436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003438:	e048      	b.n	80034cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003440:	d044      	beq.n	80034cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003442:	f7fe fe7b 	bl	800213c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d302      	bcc.n	8003458 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d139      	bne.n	80034cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	0c1b      	lsrs	r3, r3, #16
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d10d      	bne.n	800347e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	43da      	mvns	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	4013      	ands	r3, r2
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf0c      	ite	eq
 8003474:	2301      	moveq	r3, #1
 8003476:	2300      	movne	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	e00c      	b.n	8003498 <I2C_WaitOnFlagUntilTimeout+0x70>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	43da      	mvns	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	4013      	ands	r3, r2
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	429a      	cmp	r2, r3
 800349c:	d116      	bne.n	80034cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	f043 0220 	orr.w	r2, r3, #32
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e023      	b.n	8003514 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	0c1b      	lsrs	r3, r3, #16
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d10d      	bne.n	80034f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	43da      	mvns	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4013      	ands	r3, r2
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf0c      	ite	eq
 80034e8:	2301      	moveq	r3, #1
 80034ea:	2300      	movne	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	e00c      	b.n	800350c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	43da      	mvns	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	4013      	ands	r3, r2
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	429a      	cmp	r2, r3
 8003510:	d093      	beq.n	800343a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800352a:	e071      	b.n	8003610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800353a:	d123      	bne.n	8003584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800354a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003554:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	f043 0204 	orr.w	r2, r3, #4
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e067      	b.n	8003654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358a:	d041      	beq.n	8003610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358c:	f7fe fdd6 	bl	800213c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	429a      	cmp	r2, r3
 800359a:	d302      	bcc.n	80035a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d136      	bne.n	8003610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d10c      	bne.n	80035c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	43da      	mvns	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4013      	ands	r3, r2
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	bf14      	ite	ne
 80035be:	2301      	movne	r3, #1
 80035c0:	2300      	moveq	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	e00b      	b.n	80035de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	43da      	mvns	r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	4013      	ands	r3, r2
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf14      	ite	ne
 80035d8:	2301      	movne	r3, #1
 80035da:	2300      	moveq	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d016      	beq.n	8003610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e021      	b.n	8003654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	0c1b      	lsrs	r3, r3, #16
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d10c      	bne.n	8003634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	43da      	mvns	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4013      	ands	r3, r2
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	bf14      	ite	ne
 800362c:	2301      	movne	r3, #1
 800362e:	2300      	moveq	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	e00b      	b.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	43da      	mvns	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4013      	ands	r3, r2
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	bf14      	ite	ne
 8003646:	2301      	movne	r3, #1
 8003648:	2300      	moveq	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	f47f af6d 	bne.w	800352c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003668:	e034      	b.n	80036d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f886 	bl	800377c <I2C_IsAcknowledgeFailed>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e034      	b.n	80036e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003680:	d028      	beq.n	80036d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003682:	f7fe fd5b 	bl	800213c <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	429a      	cmp	r2, r3
 8003690:	d302      	bcc.n	8003698 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d11d      	bne.n	80036d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a2:	2b80      	cmp	r3, #128	@ 0x80
 80036a4:	d016      	beq.n	80036d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c0:	f043 0220 	orr.w	r2, r3, #32
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e007      	b.n	80036e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036de:	2b80      	cmp	r3, #128	@ 0x80
 80036e0:	d1c3      	bne.n	800366a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036f8:	e034      	b.n	8003764 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f83e 	bl	800377c <I2C_IsAcknowledgeFailed>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e034      	b.n	8003774 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003710:	d028      	beq.n	8003764 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003712:	f7fe fd13 	bl	800213c <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	429a      	cmp	r2, r3
 8003720:	d302      	bcc.n	8003728 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d11d      	bne.n	8003764 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b04      	cmp	r3, #4
 8003734:	d016      	beq.n	8003764 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	f043 0220 	orr.w	r2, r3, #32
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e007      	b.n	8003774 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b04      	cmp	r3, #4
 8003770:	d1c3      	bne.n	80036fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800378e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003792:	d11b      	bne.n	80037cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800379c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	f043 0204 	orr.w	r2, r3, #4
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e267      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d075      	beq.n	80038e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037fa:	4b88      	ldr	r3, [pc, #544]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b04      	cmp	r3, #4
 8003804:	d00c      	beq.n	8003820 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003806:	4b85      	ldr	r3, [pc, #532]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800380e:	2b08      	cmp	r3, #8
 8003810:	d112      	bne.n	8003838 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003812:	4b82      	ldr	r3, [pc, #520]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800381a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800381e:	d10b      	bne.n	8003838 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003820:	4b7e      	ldr	r3, [pc, #504]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d05b      	beq.n	80038e4 <HAL_RCC_OscConfig+0x108>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d157      	bne.n	80038e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e242      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003840:	d106      	bne.n	8003850 <HAL_RCC_OscConfig+0x74>
 8003842:	4b76      	ldr	r3, [pc, #472]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a75      	ldr	r2, [pc, #468]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e01d      	b.n	800388c <HAL_RCC_OscConfig+0xb0>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003858:	d10c      	bne.n	8003874 <HAL_RCC_OscConfig+0x98>
 800385a:	4b70      	ldr	r3, [pc, #448]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a6f      	ldr	r2, [pc, #444]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003860:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	4b6d      	ldr	r3, [pc, #436]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a6c      	ldr	r2, [pc, #432]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 800386c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	e00b      	b.n	800388c <HAL_RCC_OscConfig+0xb0>
 8003874:	4b69      	ldr	r3, [pc, #420]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a68      	ldr	r2, [pc, #416]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 800387a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800387e:	6013      	str	r3, [r2, #0]
 8003880:	4b66      	ldr	r3, [pc, #408]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a65      	ldr	r2, [pc, #404]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003886:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800388a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d013      	beq.n	80038bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7fe fc52 	bl	800213c <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800389c:	f7fe fc4e 	bl	800213c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b64      	cmp	r3, #100	@ 0x64
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e207      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ae:	4b5b      	ldr	r3, [pc, #364]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0xc0>
 80038ba:	e014      	b.n	80038e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038bc:	f7fe fc3e 	bl	800213c <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c4:	f7fe fc3a 	bl	800213c <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b64      	cmp	r3, #100	@ 0x64
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e1f3      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d6:	4b51      	ldr	r3, [pc, #324]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0xe8>
 80038e2:	e000      	b.n	80038e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d063      	beq.n	80039ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038f2:	4b4a      	ldr	r3, [pc, #296]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00b      	beq.n	8003916 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038fe:	4b47      	ldr	r3, [pc, #284]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003906:	2b08      	cmp	r3, #8
 8003908:	d11c      	bne.n	8003944 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800390a:	4b44      	ldr	r3, [pc, #272]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d116      	bne.n	8003944 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003916:	4b41      	ldr	r3, [pc, #260]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_RCC_OscConfig+0x152>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d001      	beq.n	800392e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e1c7      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4937      	ldr	r1, [pc, #220]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 800393e:	4313      	orrs	r3, r2
 8003940:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003942:	e03a      	b.n	80039ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d020      	beq.n	800398e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800394c:	4b34      	ldr	r3, [pc, #208]	@ (8003a20 <HAL_RCC_OscConfig+0x244>)
 800394e:	2201      	movs	r2, #1
 8003950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003952:	f7fe fbf3 	bl	800213c <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800395a:	f7fe fbef 	bl	800213c <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e1a8      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396c:	4b2b      	ldr	r3, [pc, #172]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003978:	4b28      	ldr	r3, [pc, #160]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4925      	ldr	r1, [pc, #148]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003988:	4313      	orrs	r3, r2
 800398a:	600b      	str	r3, [r1, #0]
 800398c:	e015      	b.n	80039ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800398e:	4b24      	ldr	r3, [pc, #144]	@ (8003a20 <HAL_RCC_OscConfig+0x244>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003994:	f7fe fbd2 	bl	800213c <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800399c:	f7fe fbce 	bl	800213c <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e187      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ae:	4b1b      	ldr	r3, [pc, #108]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d036      	beq.n	8003a34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d016      	beq.n	80039fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ce:	4b15      	ldr	r3, [pc, #84]	@ (8003a24 <HAL_RCC_OscConfig+0x248>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d4:	f7fe fbb2 	bl	800213c <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039dc:	f7fe fbae 	bl	800213c <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e167      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ee:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <HAL_RCC_OscConfig+0x240>)
 80039f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0x200>
 80039fa:	e01b      	b.n	8003a34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039fc:	4b09      	ldr	r3, [pc, #36]	@ (8003a24 <HAL_RCC_OscConfig+0x248>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a02:	f7fe fb9b 	bl	800213c <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a08:	e00e      	b.n	8003a28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0a:	f7fe fb97 	bl	800213c <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d907      	bls.n	8003a28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e150      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	42470000 	.word	0x42470000
 8003a24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a28:	4b88      	ldr	r3, [pc, #544]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1ea      	bne.n	8003a0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 8097 	beq.w	8003b70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a42:	2300      	movs	r3, #0
 8003a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a46:	4b81      	ldr	r3, [pc, #516]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10f      	bne.n	8003a72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	4b7d      	ldr	r3, [pc, #500]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	4a7c      	ldr	r2, [pc, #496]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a62:	4b7a      	ldr	r3, [pc, #488]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a72:	4b77      	ldr	r3, [pc, #476]	@ (8003c50 <HAL_RCC_OscConfig+0x474>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d118      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a7e:	4b74      	ldr	r3, [pc, #464]	@ (8003c50 <HAL_RCC_OscConfig+0x474>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a73      	ldr	r2, [pc, #460]	@ (8003c50 <HAL_RCC_OscConfig+0x474>)
 8003a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a8a:	f7fe fb57 	bl	800213c <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a92:	f7fe fb53 	bl	800213c <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e10c      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa4:	4b6a      	ldr	r3, [pc, #424]	@ (8003c50 <HAL_RCC_OscConfig+0x474>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x2ea>
 8003ab8:	4b64      	ldr	r3, [pc, #400]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abc:	4a63      	ldr	r2, [pc, #396]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac4:	e01c      	b.n	8003b00 <HAL_RCC_OscConfig+0x324>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b05      	cmp	r3, #5
 8003acc:	d10c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x30c>
 8003ace:	4b5f      	ldr	r3, [pc, #380]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad2:	4a5e      	ldr	r2, [pc, #376]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003ad4:	f043 0304 	orr.w	r3, r3, #4
 8003ad8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ada:	4b5c      	ldr	r3, [pc, #368]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ade:	4a5b      	ldr	r2, [pc, #364]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ae6:	e00b      	b.n	8003b00 <HAL_RCC_OscConfig+0x324>
 8003ae8:	4b58      	ldr	r3, [pc, #352]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aec:	4a57      	ldr	r2, [pc, #348]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af4:	4b55      	ldr	r3, [pc, #340]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af8:	4a54      	ldr	r2, [pc, #336]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003afa:	f023 0304 	bic.w	r3, r3, #4
 8003afe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d015      	beq.n	8003b34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7fe fb18 	bl	800213c <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b10:	f7fe fb14 	bl	800213c <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e0cb      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b26:	4b49      	ldr	r3, [pc, #292]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0ee      	beq.n	8003b10 <HAL_RCC_OscConfig+0x334>
 8003b32:	e014      	b.n	8003b5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b34:	f7fe fb02 	bl	800213c <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3c:	f7fe fafe 	bl	800213c <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e0b5      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b52:	4b3e      	ldr	r3, [pc, #248]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1ee      	bne.n	8003b3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b5e:	7dfb      	ldrb	r3, [r7, #23]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d105      	bne.n	8003b70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b64:	4b39      	ldr	r3, [pc, #228]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b68:	4a38      	ldr	r2, [pc, #224]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003b6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80a1 	beq.w	8003cbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b7a:	4b34      	ldr	r3, [pc, #208]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d05c      	beq.n	8003c40 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d141      	bne.n	8003c12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8e:	4b31      	ldr	r3, [pc, #196]	@ (8003c54 <HAL_RCC_OscConfig+0x478>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fe fad2 	bl	800213c <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fe face 	bl	800213c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e087      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bae:	4b27      	ldr	r3, [pc, #156]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69da      	ldr	r2, [r3, #28]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	019b      	lsls	r3, r3, #6
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	041b      	lsls	r3, r3, #16
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bdc:	061b      	lsls	r3, r3, #24
 8003bde:	491b      	ldr	r1, [pc, #108]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c54 <HAL_RCC_OscConfig+0x478>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bea:	f7fe faa7 	bl	800213c <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf2:	f7fe faa3 	bl	800213c <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e05c      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c04:	4b11      	ldr	r3, [pc, #68]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x416>
 8003c10:	e054      	b.n	8003cbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c12:	4b10      	ldr	r3, [pc, #64]	@ (8003c54 <HAL_RCC_OscConfig+0x478>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c18:	f7fe fa90 	bl	800213c <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c20:	f7fe fa8c 	bl	800213c <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e045      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c32:	4b06      	ldr	r3, [pc, #24]	@ (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x444>
 8003c3e:	e03d      	b.n	8003cbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d107      	bne.n	8003c58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e038      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40007000 	.word	0x40007000
 8003c54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c58:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc8 <HAL_RCC_OscConfig+0x4ec>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d028      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d121      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d11a      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c88:	4013      	ands	r3, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d111      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9e:	085b      	lsrs	r3, r3, #1
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d107      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40023800 	.word	0x40023800

08003ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e0cc      	b.n	8003e7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ce0:	4b68      	ldr	r3, [pc, #416]	@ (8003e84 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d90c      	bls.n	8003d08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cee:	4b65      	ldr	r3, [pc, #404]	@ (8003e84 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf6:	4b63      	ldr	r3, [pc, #396]	@ (8003e84 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d001      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e0b8      	b.n	8003e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d020      	beq.n	8003d56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d20:	4b59      	ldr	r3, [pc, #356]	@ (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	4a58      	ldr	r2, [pc, #352]	@ (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d005      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d38:	4b53      	ldr	r3, [pc, #332]	@ (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	4a52      	ldr	r2, [pc, #328]	@ (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d44:	4b50      	ldr	r3, [pc, #320]	@ (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	494d      	ldr	r1, [pc, #308]	@ (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d044      	beq.n	8003dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d107      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6a:	4b47      	ldr	r3, [pc, #284]	@ (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d119      	bne.n	8003daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e07f      	b.n	8003e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d003      	beq.n	8003d8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d107      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d109      	bne.n	8003daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e06f      	b.n	8003e7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e067      	b.n	8003e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003daa:	4b37      	ldr	r3, [pc, #220]	@ (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f023 0203 	bic.w	r2, r3, #3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	4934      	ldr	r1, [pc, #208]	@ (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dbc:	f7fe f9be 	bl	800213c <HAL_GetTick>
 8003dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc4:	f7fe f9ba 	bl	800213c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e04f      	b.n	8003e7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dda:	4b2b      	ldr	r3, [pc, #172]	@ (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 020c 	and.w	r2, r3, #12
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d1eb      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dec:	4b25      	ldr	r3, [pc, #148]	@ (8003e84 <HAL_RCC_ClockConfig+0x1b8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d20c      	bcs.n	8003e14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfa:	4b22      	ldr	r3, [pc, #136]	@ (8003e84 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e02:	4b20      	ldr	r3, [pc, #128]	@ (8003e84 <HAL_RCC_ClockConfig+0x1b8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e032      	b.n	8003e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e20:	4b19      	ldr	r3, [pc, #100]	@ (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	4916      	ldr	r1, [pc, #88]	@ (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d009      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e3e:	4b12      	ldr	r3, [pc, #72]	@ (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	490e      	ldr	r1, [pc, #56]	@ (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e52:	f000 f821 	bl	8003e98 <HAL_RCC_GetSysClockFreq>
 8003e56:	4602      	mov	r2, r0
 8003e58:	4b0b      	ldr	r3, [pc, #44]	@ (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	091b      	lsrs	r3, r3, #4
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	490a      	ldr	r1, [pc, #40]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c0>)
 8003e64:	5ccb      	ldrb	r3, [r1, r3]
 8003e66:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6a:	4a09      	ldr	r2, [pc, #36]	@ (8003e90 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e6e:	4b09      	ldr	r3, [pc, #36]	@ (8003e94 <HAL_RCC_ClockConfig+0x1c8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fd f996 	bl	80011a4 <HAL_InitTick>

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40023c00 	.word	0x40023c00
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	0800ae70 	.word	0x0800ae70
 8003e90:	20000004 	.word	0x20000004
 8003e94:	2000005c 	.word	0x2000005c

08003e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e9c:	b094      	sub	sp, #80	@ 0x50
 8003e9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eb0:	4b79      	ldr	r3, [pc, #484]	@ (8004098 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 030c 	and.w	r3, r3, #12
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d00d      	beq.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x40>
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	f200 80e1 	bhi.w	8004084 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0x34>
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003eca:	e0db      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ecc:	4b73      	ldr	r3, [pc, #460]	@ (800409c <HAL_RCC_GetSysClockFreq+0x204>)
 8003ece:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ed0:	e0db      	b.n	800408a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ed2:	4b73      	ldr	r3, [pc, #460]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ed6:	e0d8      	b.n	800408a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ed8:	4b6f      	ldr	r3, [pc, #444]	@ (8004098 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ee0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ee2:	4b6d      	ldr	r3, [pc, #436]	@ (8004098 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d063      	beq.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eee:	4b6a      	ldr	r3, [pc, #424]	@ (8004098 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	099b      	lsrs	r3, r3, #6
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ef8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f00:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f02:	2300      	movs	r3, #0
 8003f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	462b      	mov	r3, r5
 8003f0e:	f04f 0000 	mov.w	r0, #0
 8003f12:	f04f 0100 	mov.w	r1, #0
 8003f16:	0159      	lsls	r1, r3, #5
 8003f18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f1c:	0150      	lsls	r0, r2, #5
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4621      	mov	r1, r4
 8003f24:	1a51      	subs	r1, r2, r1
 8003f26:	6139      	str	r1, [r7, #16]
 8003f28:	4629      	mov	r1, r5
 8003f2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f3c:	4659      	mov	r1, fp
 8003f3e:	018b      	lsls	r3, r1, #6
 8003f40:	4651      	mov	r1, sl
 8003f42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f46:	4651      	mov	r1, sl
 8003f48:	018a      	lsls	r2, r1, #6
 8003f4a:	4651      	mov	r1, sl
 8003f4c:	ebb2 0801 	subs.w	r8, r2, r1
 8003f50:	4659      	mov	r1, fp
 8003f52:	eb63 0901 	sbc.w	r9, r3, r1
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f6a:	4690      	mov	r8, r2
 8003f6c:	4699      	mov	r9, r3
 8003f6e:	4623      	mov	r3, r4
 8003f70:	eb18 0303 	adds.w	r3, r8, r3
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	462b      	mov	r3, r5
 8003f78:	eb49 0303 	adc.w	r3, r9, r3
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	024b      	lsls	r3, r1, #9
 8003f8e:	4621      	mov	r1, r4
 8003f90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f94:	4621      	mov	r1, r4
 8003f96:	024a      	lsls	r2, r1, #9
 8003f98:	4610      	mov	r0, r2
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fa4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fa8:	f7fc f96a 	bl	8000280 <__aeabi_uldivmod>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fb4:	e058      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb6:	4b38      	ldr	r3, [pc, #224]	@ (8004098 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	099b      	lsrs	r3, r3, #6
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fc6:	623b      	str	r3, [r7, #32]
 8003fc8:	2300      	movs	r3, #0
 8003fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	464b      	mov	r3, r9
 8003fd4:	f04f 0000 	mov.w	r0, #0
 8003fd8:	f04f 0100 	mov.w	r1, #0
 8003fdc:	0159      	lsls	r1, r3, #5
 8003fde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe2:	0150      	lsls	r0, r2, #5
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4641      	mov	r1, r8
 8003fea:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fee:	4649      	mov	r1, r9
 8003ff0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004000:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004004:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004008:	ebb2 040a 	subs.w	r4, r2, sl
 800400c:	eb63 050b 	sbc.w	r5, r3, fp
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	00eb      	lsls	r3, r5, #3
 800401a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800401e:	00e2      	lsls	r2, r4, #3
 8004020:	4614      	mov	r4, r2
 8004022:	461d      	mov	r5, r3
 8004024:	4643      	mov	r3, r8
 8004026:	18e3      	adds	r3, r4, r3
 8004028:	603b      	str	r3, [r7, #0]
 800402a:	464b      	mov	r3, r9
 800402c:	eb45 0303 	adc.w	r3, r5, r3
 8004030:	607b      	str	r3, [r7, #4]
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800403e:	4629      	mov	r1, r5
 8004040:	028b      	lsls	r3, r1, #10
 8004042:	4621      	mov	r1, r4
 8004044:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004048:	4621      	mov	r1, r4
 800404a:	028a      	lsls	r2, r1, #10
 800404c:	4610      	mov	r0, r2
 800404e:	4619      	mov	r1, r3
 8004050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004052:	2200      	movs	r2, #0
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	61fa      	str	r2, [r7, #28]
 8004058:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800405c:	f7fc f910 	bl	8000280 <__aeabi_uldivmod>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4613      	mov	r3, r2
 8004066:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004068:	4b0b      	ldr	r3, [pc, #44]	@ (8004098 <HAL_RCC_GetSysClockFreq+0x200>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	0c1b      	lsrs	r3, r3, #16
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	3301      	adds	r3, #1
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004078:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800407a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800407c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004080:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004082:	e002      	b.n	800408a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004084:	4b05      	ldr	r3, [pc, #20]	@ (800409c <HAL_RCC_GetSysClockFreq+0x204>)
 8004086:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800408a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800408c:	4618      	mov	r0, r3
 800408e:	3750      	adds	r7, #80	@ 0x50
 8004090:	46bd      	mov	sp, r7
 8004092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004096:	bf00      	nop
 8004098:	40023800 	.word	0x40023800
 800409c:	00f42400 	.word	0x00f42400
 80040a0:	007a1200 	.word	0x007a1200

080040a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a8:	4b03      	ldr	r3, [pc, #12]	@ (80040b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040aa:	681b      	ldr	r3, [r3, #0]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	20000004 	.word	0x20000004

080040bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040c0:	f7ff fff0 	bl	80040a4 <HAL_RCC_GetHCLKFreq>
 80040c4:	4602      	mov	r2, r0
 80040c6:	4b05      	ldr	r3, [pc, #20]	@ (80040dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	0a9b      	lsrs	r3, r3, #10
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	4903      	ldr	r1, [pc, #12]	@ (80040e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040d2:	5ccb      	ldrb	r3, [r1, r3]
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d8:	4618      	mov	r0, r3
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40023800 	.word	0x40023800
 80040e0:	0800ae80 	.word	0x0800ae80

080040e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040e8:	f7ff ffdc 	bl	80040a4 <HAL_RCC_GetHCLKFreq>
 80040ec:	4602      	mov	r2, r0
 80040ee:	4b05      	ldr	r3, [pc, #20]	@ (8004104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	0b5b      	lsrs	r3, r3, #13
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	4903      	ldr	r1, [pc, #12]	@ (8004108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040fa:	5ccb      	ldrb	r3, [r1, r3]
 80040fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004100:	4618      	mov	r0, r3
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40023800 	.word	0x40023800
 8004108:	0800ae80 	.word	0x0800ae80

0800410c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	220f      	movs	r2, #15
 800411a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800411c:	4b12      	ldr	r3, [pc, #72]	@ (8004168 <HAL_RCC_GetClockConfig+0x5c>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 0203 	and.w	r2, r3, #3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004128:	4b0f      	ldr	r3, [pc, #60]	@ (8004168 <HAL_RCC_GetClockConfig+0x5c>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004134:	4b0c      	ldr	r3, [pc, #48]	@ (8004168 <HAL_RCC_GetClockConfig+0x5c>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004140:	4b09      	ldr	r3, [pc, #36]	@ (8004168 <HAL_RCC_GetClockConfig+0x5c>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	08db      	lsrs	r3, r3, #3
 8004146:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800414e:	4b07      	ldr	r3, [pc, #28]	@ (800416c <HAL_RCC_GetClockConfig+0x60>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0207 	and.w	r2, r3, #7
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	601a      	str	r2, [r3, #0]
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40023800 	.word	0x40023800
 800416c:	40023c00 	.word	0x40023c00

08004170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e041      	b.n	8004206 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fd fb8c 	bl	80018b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	4619      	mov	r1, r3
 80041ae:	4610      	mov	r0, r2
 80041b0:	f000 ff8e 	bl	80050d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	d001      	beq.n	8004228 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e03c      	b.n	80042a2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1e      	ldr	r2, [pc, #120]	@ (80042b0 <HAL_TIM_Base_Start+0xa0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d018      	beq.n	800426c <HAL_TIM_Base_Start+0x5c>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004242:	d013      	beq.n	800426c <HAL_TIM_Base_Start+0x5c>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a1a      	ldr	r2, [pc, #104]	@ (80042b4 <HAL_TIM_Base_Start+0xa4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00e      	beq.n	800426c <HAL_TIM_Base_Start+0x5c>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a19      	ldr	r2, [pc, #100]	@ (80042b8 <HAL_TIM_Base_Start+0xa8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d009      	beq.n	800426c <HAL_TIM_Base_Start+0x5c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a17      	ldr	r2, [pc, #92]	@ (80042bc <HAL_TIM_Base_Start+0xac>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <HAL_TIM_Base_Start+0x5c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a16      	ldr	r2, [pc, #88]	@ (80042c0 <HAL_TIM_Base_Start+0xb0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d111      	bne.n	8004290 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b06      	cmp	r3, #6
 800427c:	d010      	beq.n	80042a0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0201 	orr.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428e:	e007      	b.n	80042a0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40010000 	.word	0x40010000
 80042b4:	40000400 	.word	0x40000400
 80042b8:	40000800 	.word	0x40000800
 80042bc:	40000c00 	.word	0x40000c00
 80042c0:	40014000 	.word	0x40014000

080042c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d001      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e044      	b.n	8004366 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0201 	orr.w	r2, r2, #1
 80042f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004374 <HAL_TIM_Base_Start_IT+0xb0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d018      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x6c>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004306:	d013      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x6c>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a1a      	ldr	r2, [pc, #104]	@ (8004378 <HAL_TIM_Base_Start_IT+0xb4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00e      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x6c>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a19      	ldr	r2, [pc, #100]	@ (800437c <HAL_TIM_Base_Start_IT+0xb8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d009      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x6c>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a17      	ldr	r2, [pc, #92]	@ (8004380 <HAL_TIM_Base_Start_IT+0xbc>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d004      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x6c>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a16      	ldr	r2, [pc, #88]	@ (8004384 <HAL_TIM_Base_Start_IT+0xc0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d111      	bne.n	8004354 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b06      	cmp	r3, #6
 8004340:	d010      	beq.n	8004364 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f042 0201 	orr.w	r2, r2, #1
 8004350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004352:	e007      	b.n	8004364 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40010000 	.word	0x40010000
 8004378:	40000400 	.word	0x40000400
 800437c:	40000800 	.word	0x40000800
 8004380:	40000c00 	.word	0x40000c00
 8004384:	40014000 	.word	0x40014000

08004388 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e041      	b.n	800441e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f839 	bl	8004426 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	4610      	mov	r0, r2
 80043c8:	f000 fe82 	bl	80050d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
	...

0800443c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d109      	bne.n	8004460 <HAL_TIM_PWM_Start+0x24>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b01      	cmp	r3, #1
 8004456:	bf14      	ite	ne
 8004458:	2301      	movne	r3, #1
 800445a:	2300      	moveq	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	e022      	b.n	80044a6 <HAL_TIM_PWM_Start+0x6a>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b04      	cmp	r3, #4
 8004464:	d109      	bne.n	800447a <HAL_TIM_PWM_Start+0x3e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b01      	cmp	r3, #1
 8004470:	bf14      	ite	ne
 8004472:	2301      	movne	r3, #1
 8004474:	2300      	moveq	r3, #0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	e015      	b.n	80044a6 <HAL_TIM_PWM_Start+0x6a>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d109      	bne.n	8004494 <HAL_TIM_PWM_Start+0x58>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b01      	cmp	r3, #1
 800448a:	bf14      	ite	ne
 800448c:	2301      	movne	r3, #1
 800448e:	2300      	moveq	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	e008      	b.n	80044a6 <HAL_TIM_PWM_Start+0x6a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e068      	b.n	8004580 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d104      	bne.n	80044be <HAL_TIM_PWM_Start+0x82>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044bc:	e013      	b.n	80044e6 <HAL_TIM_PWM_Start+0xaa>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d104      	bne.n	80044ce <HAL_TIM_PWM_Start+0x92>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044cc:	e00b      	b.n	80044e6 <HAL_TIM_PWM_Start+0xaa>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d104      	bne.n	80044de <HAL_TIM_PWM_Start+0xa2>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044dc:	e003      	b.n	80044e6 <HAL_TIM_PWM_Start+0xaa>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2202      	movs	r2, #2
 80044e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2201      	movs	r2, #1
 80044ec:	6839      	ldr	r1, [r7, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 f9b8 	bl	8005864 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a23      	ldr	r2, [pc, #140]	@ (8004588 <HAL_TIM_PWM_Start+0x14c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d107      	bne.n	800450e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800450c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a1d      	ldr	r2, [pc, #116]	@ (8004588 <HAL_TIM_PWM_Start+0x14c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d018      	beq.n	800454a <HAL_TIM_PWM_Start+0x10e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004520:	d013      	beq.n	800454a <HAL_TIM_PWM_Start+0x10e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a19      	ldr	r2, [pc, #100]	@ (800458c <HAL_TIM_PWM_Start+0x150>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00e      	beq.n	800454a <HAL_TIM_PWM_Start+0x10e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a17      	ldr	r2, [pc, #92]	@ (8004590 <HAL_TIM_PWM_Start+0x154>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d009      	beq.n	800454a <HAL_TIM_PWM_Start+0x10e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a16      	ldr	r2, [pc, #88]	@ (8004594 <HAL_TIM_PWM_Start+0x158>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d004      	beq.n	800454a <HAL_TIM_PWM_Start+0x10e>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a14      	ldr	r2, [pc, #80]	@ (8004598 <HAL_TIM_PWM_Start+0x15c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d111      	bne.n	800456e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b06      	cmp	r3, #6
 800455a:	d010      	beq.n	800457e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456c:	e007      	b.n	800457e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0201 	orr.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40010000 	.word	0x40010000
 800458c:	40000400 	.word	0x40000400
 8004590:	40000800 	.word	0x40000800
 8004594:	40000c00 	.word	0x40000c00
 8004598:	40014000 	.word	0x40014000

0800459c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e041      	b.n	8004632 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f839 	bl	800463a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4619      	mov	r1, r3
 80045da:	4610      	mov	r0, r2
 80045dc:	f000 fd78 	bl	80050d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d104      	bne.n	800466e <HAL_TIM_IC_Start_IT+0x1e>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800466a:	b2db      	uxtb	r3, r3
 800466c:	e013      	b.n	8004696 <HAL_TIM_IC_Start_IT+0x46>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b04      	cmp	r3, #4
 8004672:	d104      	bne.n	800467e <HAL_TIM_IC_Start_IT+0x2e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800467a:	b2db      	uxtb	r3, r3
 800467c:	e00b      	b.n	8004696 <HAL_TIM_IC_Start_IT+0x46>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b08      	cmp	r3, #8
 8004682:	d104      	bne.n	800468e <HAL_TIM_IC_Start_IT+0x3e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800468a:	b2db      	uxtb	r3, r3
 800468c:	e003      	b.n	8004696 <HAL_TIM_IC_Start_IT+0x46>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004694:	b2db      	uxtb	r3, r3
 8004696:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d104      	bne.n	80046a8 <HAL_TIM_IC_Start_IT+0x58>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	e013      	b.n	80046d0 <HAL_TIM_IC_Start_IT+0x80>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d104      	bne.n	80046b8 <HAL_TIM_IC_Start_IT+0x68>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	e00b      	b.n	80046d0 <HAL_TIM_IC_Start_IT+0x80>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d104      	bne.n	80046c8 <HAL_TIM_IC_Start_IT+0x78>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	e003      	b.n	80046d0 <HAL_TIM_IC_Start_IT+0x80>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80046d2:	7bbb      	ldrb	r3, [r7, #14]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d102      	bne.n	80046de <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80046d8:	7b7b      	ldrb	r3, [r7, #13]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d001      	beq.n	80046e2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e0c2      	b.n	8004868 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d104      	bne.n	80046f2 <HAL_TIM_IC_Start_IT+0xa2>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046f0:	e013      	b.n	800471a <HAL_TIM_IC_Start_IT+0xca>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d104      	bne.n	8004702 <HAL_TIM_IC_Start_IT+0xb2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004700:	e00b      	b.n	800471a <HAL_TIM_IC_Start_IT+0xca>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b08      	cmp	r3, #8
 8004706:	d104      	bne.n	8004712 <HAL_TIM_IC_Start_IT+0xc2>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004710:	e003      	b.n	800471a <HAL_TIM_IC_Start_IT+0xca>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d104      	bne.n	800472a <HAL_TIM_IC_Start_IT+0xda>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004728:	e013      	b.n	8004752 <HAL_TIM_IC_Start_IT+0x102>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b04      	cmp	r3, #4
 800472e:	d104      	bne.n	800473a <HAL_TIM_IC_Start_IT+0xea>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004738:	e00b      	b.n	8004752 <HAL_TIM_IC_Start_IT+0x102>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b08      	cmp	r3, #8
 800473e:	d104      	bne.n	800474a <HAL_TIM_IC_Start_IT+0xfa>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004748:	e003      	b.n	8004752 <HAL_TIM_IC_Start_IT+0x102>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2202      	movs	r2, #2
 800474e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b0c      	cmp	r3, #12
 8004756:	d841      	bhi.n	80047dc <HAL_TIM_IC_Start_IT+0x18c>
 8004758:	a201      	add	r2, pc, #4	@ (adr r2, 8004760 <HAL_TIM_IC_Start_IT+0x110>)
 800475a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475e:	bf00      	nop
 8004760:	08004795 	.word	0x08004795
 8004764:	080047dd 	.word	0x080047dd
 8004768:	080047dd 	.word	0x080047dd
 800476c:	080047dd 	.word	0x080047dd
 8004770:	080047a7 	.word	0x080047a7
 8004774:	080047dd 	.word	0x080047dd
 8004778:	080047dd 	.word	0x080047dd
 800477c:	080047dd 	.word	0x080047dd
 8004780:	080047b9 	.word	0x080047b9
 8004784:	080047dd 	.word	0x080047dd
 8004788:	080047dd 	.word	0x080047dd
 800478c:	080047dd 	.word	0x080047dd
 8004790:	080047cb 	.word	0x080047cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0202 	orr.w	r2, r2, #2
 80047a2:	60da      	str	r2, [r3, #12]
      break;
 80047a4:	e01d      	b.n	80047e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0204 	orr.w	r2, r2, #4
 80047b4:	60da      	str	r2, [r3, #12]
      break;
 80047b6:	e014      	b.n	80047e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0208 	orr.w	r2, r2, #8
 80047c6:	60da      	str	r2, [r3, #12]
      break;
 80047c8:	e00b      	b.n	80047e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 0210 	orr.w	r2, r2, #16
 80047d8:	60da      	str	r2, [r3, #12]
      break;
 80047da:	e002      	b.n	80047e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	73fb      	strb	r3, [r7, #15]
      break;
 80047e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d13e      	bne.n	8004866 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2201      	movs	r2, #1
 80047ee:	6839      	ldr	r1, [r7, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f001 f837 	bl	8005864 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004870 <HAL_TIM_IC_Start_IT+0x220>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d018      	beq.n	8004832 <HAL_TIM_IC_Start_IT+0x1e2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004808:	d013      	beq.n	8004832 <HAL_TIM_IC_Start_IT+0x1e2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a19      	ldr	r2, [pc, #100]	@ (8004874 <HAL_TIM_IC_Start_IT+0x224>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00e      	beq.n	8004832 <HAL_TIM_IC_Start_IT+0x1e2>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a17      	ldr	r2, [pc, #92]	@ (8004878 <HAL_TIM_IC_Start_IT+0x228>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d009      	beq.n	8004832 <HAL_TIM_IC_Start_IT+0x1e2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a16      	ldr	r2, [pc, #88]	@ (800487c <HAL_TIM_IC_Start_IT+0x22c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d004      	beq.n	8004832 <HAL_TIM_IC_Start_IT+0x1e2>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a14      	ldr	r2, [pc, #80]	@ (8004880 <HAL_TIM_IC_Start_IT+0x230>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d111      	bne.n	8004856 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b06      	cmp	r3, #6
 8004842:	d010      	beq.n	8004866 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0201 	orr.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004854:	e007      	b.n	8004866 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0201 	orr.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004866:	7bfb      	ldrb	r3, [r7, #15]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40010000 	.word	0x40010000
 8004874:	40000400 	.word	0x40000400
 8004878:	40000800 	.word	0x40000800
 800487c:	40000c00 	.word	0x40000c00
 8004880:	40014000 	.word	0x40014000

08004884 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b0c      	cmp	r3, #12
 8004896:	d841      	bhi.n	800491c <HAL_TIM_IC_Stop_IT+0x98>
 8004898:	a201      	add	r2, pc, #4	@ (adr r2, 80048a0 <HAL_TIM_IC_Stop_IT+0x1c>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	080048d5 	.word	0x080048d5
 80048a4:	0800491d 	.word	0x0800491d
 80048a8:	0800491d 	.word	0x0800491d
 80048ac:	0800491d 	.word	0x0800491d
 80048b0:	080048e7 	.word	0x080048e7
 80048b4:	0800491d 	.word	0x0800491d
 80048b8:	0800491d 	.word	0x0800491d
 80048bc:	0800491d 	.word	0x0800491d
 80048c0:	080048f9 	.word	0x080048f9
 80048c4:	0800491d 	.word	0x0800491d
 80048c8:	0800491d 	.word	0x0800491d
 80048cc:	0800491d 	.word	0x0800491d
 80048d0:	0800490b 	.word	0x0800490b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0202 	bic.w	r2, r2, #2
 80048e2:	60da      	str	r2, [r3, #12]
      break;
 80048e4:	e01d      	b.n	8004922 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0204 	bic.w	r2, r2, #4
 80048f4:	60da      	str	r2, [r3, #12]
      break;
 80048f6:	e014      	b.n	8004922 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0208 	bic.w	r2, r2, #8
 8004906:	60da      	str	r2, [r3, #12]
      break;
 8004908:	e00b      	b.n	8004922 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0210 	bic.w	r2, r2, #16
 8004918:	60da      	str	r2, [r3, #12]
      break;
 800491a:	e002      	b.n	8004922 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	73fb      	strb	r3, [r7, #15]
      break;
 8004920:	bf00      	nop
  }

  if (status == HAL_OK)
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d156      	bne.n	80049d6 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2200      	movs	r2, #0
 800492e:	6839      	ldr	r1, [r7, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f000 ff97 	bl	8005864 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6a1a      	ldr	r2, [r3, #32]
 800493c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004940:	4013      	ands	r3, r2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10f      	bne.n	8004966 <HAL_TIM_IC_Stop_IT+0xe2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6a1a      	ldr	r2, [r3, #32]
 800494c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004950:	4013      	ands	r3, r2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d107      	bne.n	8004966 <HAL_TIM_IC_Stop_IT+0xe2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0201 	bic.w	r2, r2, #1
 8004964:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d104      	bne.n	8004976 <HAL_TIM_IC_Stop_IT+0xf2>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004974:	e013      	b.n	800499e <HAL_TIM_IC_Stop_IT+0x11a>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b04      	cmp	r3, #4
 800497a:	d104      	bne.n	8004986 <HAL_TIM_IC_Stop_IT+0x102>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004984:	e00b      	b.n	800499e <HAL_TIM_IC_Stop_IT+0x11a>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b08      	cmp	r3, #8
 800498a:	d104      	bne.n	8004996 <HAL_TIM_IC_Stop_IT+0x112>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004994:	e003      	b.n	800499e <HAL_TIM_IC_Stop_IT+0x11a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d104      	bne.n	80049ae <HAL_TIM_IC_Stop_IT+0x12a>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049ac:	e013      	b.n	80049d6 <HAL_TIM_IC_Stop_IT+0x152>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d104      	bne.n	80049be <HAL_TIM_IC_Stop_IT+0x13a>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049bc:	e00b      	b.n	80049d6 <HAL_TIM_IC_Stop_IT+0x152>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d104      	bne.n	80049ce <HAL_TIM_IC_Stop_IT+0x14a>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049cc:	e003      	b.n	80049d6 <HAL_TIM_IC_Stop_IT+0x152>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d020      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d01b      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0202 	mvn.w	r2, #2
 8004a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fd f92c 	bl	8001c88 <HAL_TIM_IC_CaptureCallback>
 8004a30:	e005      	b.n	8004a3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fb2e 	bl	8005094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 fb35 	bl	80050a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d020      	beq.n	8004a90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01b      	beq.n	8004a90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0204 	mvn.w	r2, #4
 8004a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2202      	movs	r2, #2
 8004a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fd f906 	bl	8001c88 <HAL_TIM_IC_CaptureCallback>
 8004a7c:	e005      	b.n	8004a8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fb08 	bl	8005094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fb0f 	bl	80050a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d020      	beq.n	8004adc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01b      	beq.n	8004adc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0208 	mvn.w	r2, #8
 8004aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fd f8e0 	bl	8001c88 <HAL_TIM_IC_CaptureCallback>
 8004ac8:	e005      	b.n	8004ad6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fae2 	bl	8005094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fae9 	bl	80050a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d020      	beq.n	8004b28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d01b      	beq.n	8004b28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0210 	mvn.w	r2, #16
 8004af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2208      	movs	r2, #8
 8004afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fd f8ba 	bl	8001c88 <HAL_TIM_IC_CaptureCallback>
 8004b14:	e005      	b.n	8004b22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fabc 	bl	8005094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fac3 	bl	80050a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00c      	beq.n	8004b4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d007      	beq.n	8004b4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0201 	mvn.w	r2, #1
 8004b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fc f9cc 	bl	8000ee4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00c      	beq.n	8004b70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d007      	beq.n	8004b70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 ff18 	bl	80059a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00c      	beq.n	8004b94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d007      	beq.n	8004b94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fa94 	bl	80050bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00c      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0220 	mvn.w	r2, #32
 8004bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 feea 	bl	800598c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bb8:	bf00      	nop
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_TIM_IC_ConfigChannel+0x1e>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e088      	b.n	8004cf0 <HAL_TIM_IC_ConfigChannel+0x130>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d11b      	bne.n	8004c24 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004bfc:	f000 fc7a 	bl	80054f4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 020c 	bic.w	r2, r2, #12
 8004c0e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6999      	ldr	r1, [r3, #24]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	619a      	str	r2, [r3, #24]
 8004c22:	e060      	b.n	8004ce6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d11c      	bne.n	8004c64 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004c3a:	f000 fcf2 	bl	8005622 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699a      	ldr	r2, [r3, #24]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004c4c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6999      	ldr	r1, [r3, #24]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	021a      	lsls	r2, r3, #8
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	619a      	str	r2, [r3, #24]
 8004c62:	e040      	b.n	8004ce6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d11b      	bne.n	8004ca2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004c7a:	f000 fd3f 	bl	80056fc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69da      	ldr	r2, [r3, #28]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 020c 	bic.w	r2, r2, #12
 8004c8c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69d9      	ldr	r1, [r3, #28]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	61da      	str	r2, [r3, #28]
 8004ca0:	e021      	b.n	8004ce6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b0c      	cmp	r3, #12
 8004ca6:	d11c      	bne.n	8004ce2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004cb8:	f000 fd5c 	bl	8005774 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69da      	ldr	r2, [r3, #28]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004cca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69d9      	ldr	r1, [r3, #28]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	021a      	lsls	r2, r3, #8
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	61da      	str	r2, [r3, #28]
 8004ce0:	e001      	b.n	8004ce6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e0ae      	b.n	8004e74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b0c      	cmp	r3, #12
 8004d22:	f200 809f 	bhi.w	8004e64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d26:	a201      	add	r2, pc, #4	@ (adr r2, 8004d2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2c:	08004d61 	.word	0x08004d61
 8004d30:	08004e65 	.word	0x08004e65
 8004d34:	08004e65 	.word	0x08004e65
 8004d38:	08004e65 	.word	0x08004e65
 8004d3c:	08004da1 	.word	0x08004da1
 8004d40:	08004e65 	.word	0x08004e65
 8004d44:	08004e65 	.word	0x08004e65
 8004d48:	08004e65 	.word	0x08004e65
 8004d4c:	08004de3 	.word	0x08004de3
 8004d50:	08004e65 	.word	0x08004e65
 8004d54:	08004e65 	.word	0x08004e65
 8004d58:	08004e65 	.word	0x08004e65
 8004d5c:	08004e23 	.word	0x08004e23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fa38 	bl	80051dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0208 	orr.w	r2, r2, #8
 8004d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0204 	bic.w	r2, r2, #4
 8004d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6999      	ldr	r1, [r3, #24]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	619a      	str	r2, [r3, #24]
      break;
 8004d9e:	e064      	b.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fa7e 	bl	80052a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6999      	ldr	r1, [r3, #24]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	021a      	lsls	r2, r3, #8
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	619a      	str	r2, [r3, #24]
      break;
 8004de0:	e043      	b.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fac9 	bl	8005380 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0208 	orr.w	r2, r2, #8
 8004dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0204 	bic.w	r2, r2, #4
 8004e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69d9      	ldr	r1, [r3, #28]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	61da      	str	r2, [r3, #28]
      break;
 8004e20:	e023      	b.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fb13 	bl	8005454 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69d9      	ldr	r1, [r3, #28]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	021a      	lsls	r2, r3, #8
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	61da      	str	r2, [r3, #28]
      break;
 8004e62:	e002      	b.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	75fb      	strb	r3, [r7, #23]
      break;
 8004e68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_TIM_ConfigClockSource+0x1c>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e0b4      	b.n	8005002 <HAL_TIM_ConfigClockSource+0x186>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ebe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed0:	d03e      	beq.n	8004f50 <HAL_TIM_ConfigClockSource+0xd4>
 8004ed2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed6:	f200 8087 	bhi.w	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ede:	f000 8086 	beq.w	8004fee <HAL_TIM_ConfigClockSource+0x172>
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ee6:	d87f      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee8:	2b70      	cmp	r3, #112	@ 0x70
 8004eea:	d01a      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0xa6>
 8004eec:	2b70      	cmp	r3, #112	@ 0x70
 8004eee:	d87b      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef0:	2b60      	cmp	r3, #96	@ 0x60
 8004ef2:	d050      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0x11a>
 8004ef4:	2b60      	cmp	r3, #96	@ 0x60
 8004ef6:	d877      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef8:	2b50      	cmp	r3, #80	@ 0x50
 8004efa:	d03c      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0xfa>
 8004efc:	2b50      	cmp	r3, #80	@ 0x50
 8004efe:	d873      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f00:	2b40      	cmp	r3, #64	@ 0x40
 8004f02:	d058      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x13a>
 8004f04:	2b40      	cmp	r3, #64	@ 0x40
 8004f06:	d86f      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f08:	2b30      	cmp	r3, #48	@ 0x30
 8004f0a:	d064      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f0c:	2b30      	cmp	r3, #48	@ 0x30
 8004f0e:	d86b      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d060      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d867      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d05c      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d05a      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f20:	e062      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f32:	f000 fc77 	bl	8005824 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	609a      	str	r2, [r3, #8]
      break;
 8004f4e:	e04f      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f60:	f000 fc60 	bl	8005824 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f72:	609a      	str	r2, [r3, #8]
      break;
 8004f74:	e03c      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f82:	461a      	mov	r2, r3
 8004f84:	f000 fb1e 	bl	80055c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2150      	movs	r1, #80	@ 0x50
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fc2d 	bl	80057ee <TIM_ITRx_SetConfig>
      break;
 8004f94:	e02c      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f000 fb7a 	bl	800569c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2160      	movs	r1, #96	@ 0x60
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fc1d 	bl	80057ee <TIM_ITRx_SetConfig>
      break;
 8004fb4:	e01c      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f000 fafe 	bl	80055c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2140      	movs	r1, #64	@ 0x40
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fc0d 	bl	80057ee <TIM_ITRx_SetConfig>
      break;
 8004fd4:	e00c      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f000 fc04 	bl	80057ee <TIM_ITRx_SetConfig>
      break;
 8004fe6:	e003      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	73fb      	strb	r3, [r7, #15]
      break;
 8004fec:	e000      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b0c      	cmp	r3, #12
 800501e:	d831      	bhi.n	8005084 <HAL_TIM_ReadCapturedValue+0x78>
 8005020:	a201      	add	r2, pc, #4	@ (adr r2, 8005028 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005026:	bf00      	nop
 8005028:	0800505d 	.word	0x0800505d
 800502c:	08005085 	.word	0x08005085
 8005030:	08005085 	.word	0x08005085
 8005034:	08005085 	.word	0x08005085
 8005038:	08005067 	.word	0x08005067
 800503c:	08005085 	.word	0x08005085
 8005040:	08005085 	.word	0x08005085
 8005044:	08005085 	.word	0x08005085
 8005048:	08005071 	.word	0x08005071
 800504c:	08005085 	.word	0x08005085
 8005050:	08005085 	.word	0x08005085
 8005054:	08005085 	.word	0x08005085
 8005058:	0800507b 	.word	0x0800507b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005062:	60fb      	str	r3, [r7, #12]

      break;
 8005064:	e00f      	b.n	8005086 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506c:	60fb      	str	r3, [r7, #12]

      break;
 800506e:	e00a      	b.n	8005086 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005076:	60fb      	str	r3, [r7, #12]

      break;
 8005078:	e005      	b.n	8005086 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005080:	60fb      	str	r3, [r7, #12]

      break;
 8005082:	e000      	b.n	8005086 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005084:	bf00      	nop
  }

  return tmpreg;
 8005086:	68fb      	ldr	r3, [r7, #12]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a37      	ldr	r2, [pc, #220]	@ (80051c0 <TIM_Base_SetConfig+0xf0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00f      	beq.n	8005108 <TIM_Base_SetConfig+0x38>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ee:	d00b      	beq.n	8005108 <TIM_Base_SetConfig+0x38>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a34      	ldr	r2, [pc, #208]	@ (80051c4 <TIM_Base_SetConfig+0xf4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d007      	beq.n	8005108 <TIM_Base_SetConfig+0x38>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a33      	ldr	r2, [pc, #204]	@ (80051c8 <TIM_Base_SetConfig+0xf8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_Base_SetConfig+0x38>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a32      	ldr	r2, [pc, #200]	@ (80051cc <TIM_Base_SetConfig+0xfc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d108      	bne.n	800511a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800510e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a28      	ldr	r2, [pc, #160]	@ (80051c0 <TIM_Base_SetConfig+0xf0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01b      	beq.n	800515a <TIM_Base_SetConfig+0x8a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005128:	d017      	beq.n	800515a <TIM_Base_SetConfig+0x8a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a25      	ldr	r2, [pc, #148]	@ (80051c4 <TIM_Base_SetConfig+0xf4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d013      	beq.n	800515a <TIM_Base_SetConfig+0x8a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a24      	ldr	r2, [pc, #144]	@ (80051c8 <TIM_Base_SetConfig+0xf8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00f      	beq.n	800515a <TIM_Base_SetConfig+0x8a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a23      	ldr	r2, [pc, #140]	@ (80051cc <TIM_Base_SetConfig+0xfc>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00b      	beq.n	800515a <TIM_Base_SetConfig+0x8a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a22      	ldr	r2, [pc, #136]	@ (80051d0 <TIM_Base_SetConfig+0x100>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d007      	beq.n	800515a <TIM_Base_SetConfig+0x8a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a21      	ldr	r2, [pc, #132]	@ (80051d4 <TIM_Base_SetConfig+0x104>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d003      	beq.n	800515a <TIM_Base_SetConfig+0x8a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a20      	ldr	r2, [pc, #128]	@ (80051d8 <TIM_Base_SetConfig+0x108>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d108      	bne.n	800516c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a0c      	ldr	r2, [pc, #48]	@ (80051c0 <TIM_Base_SetConfig+0xf0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d103      	bne.n	800519a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f043 0204 	orr.w	r2, r3, #4
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	601a      	str	r2, [r3, #0]
}
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40010000 	.word	0x40010000
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000800 	.word	0x40000800
 80051cc:	40000c00 	.word	0x40000c00
 80051d0:	40014000 	.word	0x40014000
 80051d4:	40014400 	.word	0x40014400
 80051d8:	40014800 	.word	0x40014800

080051dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f023 0201 	bic.w	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0303 	bic.w	r3, r3, #3
 8005212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f023 0302 	bic.w	r3, r3, #2
 8005224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a1c      	ldr	r2, [pc, #112]	@ (80052a4 <TIM_OC1_SetConfig+0xc8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d10c      	bne.n	8005252 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f023 0308 	bic.w	r3, r3, #8
 800523e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f023 0304 	bic.w	r3, r3, #4
 8005250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a13      	ldr	r2, [pc, #76]	@ (80052a4 <TIM_OC1_SetConfig+0xc8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d111      	bne.n	800527e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	621a      	str	r2, [r3, #32]
}
 8005298:	bf00      	nop
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	40010000 	.word	0x40010000

080052a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	f023 0210 	bic.w	r2, r3, #16
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f023 0320 	bic.w	r3, r3, #32
 80052f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a1e      	ldr	r2, [pc, #120]	@ (800537c <TIM_OC2_SetConfig+0xd4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d10d      	bne.n	8005324 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800530e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005322:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a15      	ldr	r2, [pc, #84]	@ (800537c <TIM_OC2_SetConfig+0xd4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d113      	bne.n	8005354 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800533a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40010000 	.word	0x40010000

08005380 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0303 	bic.w	r3, r3, #3
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005450 <TIM_OC3_SetConfig+0xd0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d10d      	bne.n	80053fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a14      	ldr	r2, [pc, #80]	@ (8005450 <TIM_OC3_SetConfig+0xd0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d113      	bne.n	800542a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	621a      	str	r2, [r3, #32]
}
 8005444:	bf00      	nop
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	40010000 	.word	0x40010000

08005454 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800548a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	021b      	lsls	r3, r3, #8
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800549e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	031b      	lsls	r3, r3, #12
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a10      	ldr	r2, [pc, #64]	@ (80054f0 <TIM_OC4_SetConfig+0x9c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d109      	bne.n	80054c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	019b      	lsls	r3, r3, #6
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	621a      	str	r2, [r3, #32]
}
 80054e2:	bf00      	nop
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40010000 	.word	0x40010000

080054f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
 8005500:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	f023 0201 	bic.w	r2, r3, #1
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4a24      	ldr	r2, [pc, #144]	@ (80055b0 <TIM_TI1_SetConfig+0xbc>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d013      	beq.n	800554a <TIM_TI1_SetConfig+0x56>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005528:	d00f      	beq.n	800554a <TIM_TI1_SetConfig+0x56>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4a21      	ldr	r2, [pc, #132]	@ (80055b4 <TIM_TI1_SetConfig+0xc0>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00b      	beq.n	800554a <TIM_TI1_SetConfig+0x56>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4a20      	ldr	r2, [pc, #128]	@ (80055b8 <TIM_TI1_SetConfig+0xc4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d007      	beq.n	800554a <TIM_TI1_SetConfig+0x56>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4a1f      	ldr	r2, [pc, #124]	@ (80055bc <TIM_TI1_SetConfig+0xc8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d003      	beq.n	800554a <TIM_TI1_SetConfig+0x56>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4a1e      	ldr	r2, [pc, #120]	@ (80055c0 <TIM_TI1_SetConfig+0xcc>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d101      	bne.n	800554e <TIM_TI1_SetConfig+0x5a>
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <TIM_TI1_SetConfig+0x5c>
 800554e:	2300      	movs	r3, #0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d008      	beq.n	8005566 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f023 0303 	bic.w	r3, r3, #3
 800555a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	e003      	b.n	800556e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005574:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	b2db      	uxtb	r3, r3
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f023 030a 	bic.w	r3, r3, #10
 8005588:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f003 030a 	and.w	r3, r3, #10
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	621a      	str	r2, [r3, #32]
}
 80055a2:	bf00      	nop
 80055a4:	371c      	adds	r7, #28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40000400 	.word	0x40000400
 80055b8:	40000800 	.word	0x40000800
 80055bc:	40000c00 	.word	0x40000c00
 80055c0:	40014000 	.word	0x40014000

080055c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	f023 0201 	bic.w	r2, r3, #1
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f023 030a 	bic.w	r3, r3, #10
 8005600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	621a      	str	r2, [r3, #32]
}
 8005616:	bf00      	nop
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005622:	b480      	push	{r7}
 8005624:	b087      	sub	sp, #28
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
 800562e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f023 0210 	bic.w	r2, r3, #16
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800564e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	021b      	lsls	r3, r3, #8
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005660:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	031b      	lsls	r3, r3, #12
 8005666:	b29b      	uxth	r3, r3
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4313      	orrs	r3, r2
 800566c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005674:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	011b      	lsls	r3, r3, #4
 800567a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	621a      	str	r2, [r3, #32]
}
 8005690:	bf00      	nop
 8005692:	371c      	adds	r7, #28
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	f023 0210 	bic.w	r2, r3, #16
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	031b      	lsls	r3, r3, #12
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	621a      	str	r2, [r3, #32]
}
 80056f0:	bf00      	nop
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	f023 0303 	bic.w	r3, r3, #3
 8005728:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005738:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	b2db      	uxtb	r3, r3
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800574c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	021b      	lsls	r3, r3, #8
 8005752:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	621a      	str	r2, [r3, #32]
}
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057a0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	021b      	lsls	r3, r3, #8
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	031b      	lsls	r3, r3, #12
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80057c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	031b      	lsls	r3, r3, #12
 80057cc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	621a      	str	r2, [r3, #32]
}
 80057e2:	bf00      	nop
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b085      	sub	sp, #20
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005804:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	f043 0307 	orr.w	r3, r3, #7
 8005810:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	609a      	str	r2, [r3, #8]
}
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800583e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	021a      	lsls	r2, r3, #8
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	431a      	orrs	r2, r3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	4313      	orrs	r3, r2
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	609a      	str	r2, [r3, #8]
}
 8005858:	bf00      	nop
 800585a:	371c      	adds	r7, #28
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	2201      	movs	r2, #1
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a1a      	ldr	r2, [r3, #32]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	43db      	mvns	r3, r3
 8005886:	401a      	ands	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6a1a      	ldr	r2, [r3, #32]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	fa01 f303 	lsl.w	r3, r1, r3
 800589c:	431a      	orrs	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	621a      	str	r2, [r3, #32]
}
 80058a2:	bf00      	nop
 80058a4:	371c      	adds	r7, #28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e050      	b.n	800596a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a1c      	ldr	r2, [pc, #112]	@ (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d018      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005914:	d013      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a18      	ldr	r2, [pc, #96]	@ (800597c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00e      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a16      	ldr	r2, [pc, #88]	@ (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d009      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a15      	ldr	r2, [pc, #84]	@ (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d004      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a13      	ldr	r2, [pc, #76]	@ (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d10c      	bne.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005944:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	4313      	orrs	r3, r2
 800594e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40010000 	.word	0x40010000
 800597c:	40000400 	.word	0x40000400
 8005980:	40000800 	.word	0x40000800
 8005984:	40000c00 	.word	0x40000c00
 8005988:	40014000 	.word	0x40014000

0800598c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e042      	b.n	8005a4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d106      	bne.n	80059e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fc fa90 	bl	8001f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2224      	movs	r2, #36	@ 0x24
 80059e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 ffa1 	bl	8006940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695a      	ldr	r2, [r3, #20]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68da      	ldr	r2, [r3, #12]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08a      	sub	sp, #40	@ 0x28
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	4613      	mov	r3, r2
 8005a62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d175      	bne.n	8005b60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <HAL_UART_Transmit+0x2c>
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e06e      	b.n	8005b62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2221      	movs	r2, #33	@ 0x21
 8005a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a92:	f7fc fb53 	bl	800213c <HAL_GetTick>
 8005a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	88fa      	ldrh	r2, [r7, #6]
 8005a9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	88fa      	ldrh	r2, [r7, #6]
 8005aa2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aac:	d108      	bne.n	8005ac0 <HAL_UART_Transmit+0x6c>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d104      	bne.n	8005ac0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	e003      	b.n	8005ac8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ac8:	e02e      	b.n	8005b28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2180      	movs	r1, #128	@ 0x80
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 fc71 	bl	80063bc <UART_WaitOnFlagUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d005      	beq.n	8005aec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e03a      	b.n	8005b62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10b      	bne.n	8005b0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	461a      	mov	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	3302      	adds	r3, #2
 8005b06:	61bb      	str	r3, [r7, #24]
 8005b08:	e007      	b.n	8005b1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	781a      	ldrb	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	3301      	adds	r3, #1
 8005b18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1cb      	bne.n	8005aca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2140      	movs	r1, #64	@ 0x40
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 fc3d 	bl	80063bc <UART_WaitOnFlagUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d005      	beq.n	8005b54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e006      	b.n	8005b62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	e000      	b.n	8005b62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b60:	2302      	movs	r3, #2
  }
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3720      	adds	r7, #32
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b08c      	sub	sp, #48	@ 0x30
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	4613      	mov	r3, r2
 8005b76:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d146      	bne.n	8005c12 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e03f      	b.n	8005c14 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2201      	movs	r2, #1
 8005b98:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005ba0:	88fb      	ldrh	r3, [r7, #6]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	68b9      	ldr	r1, [r7, #8]
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 fc62 	bl	8006470 <UART_Start_Receive_DMA>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d125      	bne.n	8005c06 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bba:	2300      	movs	r3, #0
 8005bbc:	613b      	str	r3, [r7, #16]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	613b      	str	r3, [r7, #16]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	330c      	adds	r3, #12
 8005bd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	e853 3f00 	ldrex	r3, [r3]
 8005bde:	617b      	str	r3, [r7, #20]
   return(result);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f043 0310 	orr.w	r3, r3, #16
 8005be6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	330c      	adds	r3, #12
 8005bee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bf0:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf4:	6a39      	ldr	r1, [r7, #32]
 8005bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bf8:	e841 2300 	strex	r3, r2, [r1]
 8005bfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1e5      	bne.n	8005bd0 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8005c04:	e002      	b.n	8005c0c <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8005c0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c10:	e000      	b.n	8005c14 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8005c12:	2302      	movs	r3, #2
  }
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3730      	adds	r7, #48	@ 0x30
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b0ba      	sub	sp, #232	@ 0xe8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c52:	f003 030f 	and.w	r3, r3, #15
 8005c56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005c5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10f      	bne.n	8005c82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d009      	beq.n	8005c82 <HAL_UART_IRQHandler+0x66>
 8005c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fda2 	bl	80067c4 <UART_Receive_IT>
      return;
 8005c80:	e273      	b.n	800616a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 80de 	beq.w	8005e48 <HAL_UART_IRQHandler+0x22c>
 8005c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d106      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c9c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 80d1 	beq.w	8005e48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00b      	beq.n	8005cca <HAL_UART_IRQHandler+0xae>
 8005cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc2:	f043 0201 	orr.w	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cce:	f003 0304 	and.w	r3, r3, #4
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00b      	beq.n	8005cee <HAL_UART_IRQHandler+0xd2>
 8005cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d005      	beq.n	8005cee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce6:	f043 0202 	orr.w	r2, r3, #2
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00b      	beq.n	8005d12 <HAL_UART_IRQHandler+0xf6>
 8005cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0a:	f043 0204 	orr.w	r2, r3, #4
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d16:	f003 0308 	and.w	r3, r3, #8
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d011      	beq.n	8005d42 <HAL_UART_IRQHandler+0x126>
 8005d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d22:	f003 0320 	and.w	r3, r3, #32
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d105      	bne.n	8005d36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d3a:	f043 0208 	orr.w	r2, r3, #8
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 820a 	beq.w	8006160 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d50:	f003 0320 	and.w	r3, r3, #32
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d008      	beq.n	8005d6a <HAL_UART_IRQHandler+0x14e>
 8005d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fd2d 	bl	80067c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d74:	2b40      	cmp	r3, #64	@ 0x40
 8005d76:	bf0c      	ite	eq
 8005d78:	2301      	moveq	r3, #1
 8005d7a:	2300      	movne	r3, #0
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d86:	f003 0308 	and.w	r3, r3, #8
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d103      	bne.n	8005d96 <HAL_UART_IRQHandler+0x17a>
 8005d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d04f      	beq.n	8005e36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fc38 	bl	800660c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da6:	2b40      	cmp	r3, #64	@ 0x40
 8005da8:	d141      	bne.n	8005e2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3314      	adds	r3, #20
 8005db0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3314      	adds	r3, #20
 8005dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005dd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005dda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005de2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1d9      	bne.n	8005daa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d013      	beq.n	8005e26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e02:	4a8a      	ldr	r2, [pc, #552]	@ (800602c <HAL_UART_IRQHandler+0x410>)
 8005e04:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fc fc1e 	bl	800264c <HAL_DMA_Abort_IT>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d016      	beq.n	8005e44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005e20:	4610      	mov	r0, r2
 8005e22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e24:	e00e      	b.n	8005e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f9c0 	bl	80061ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e2c:	e00a      	b.n	8005e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f9bc 	bl	80061ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e34:	e006      	b.n	8005e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f9b8 	bl	80061ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005e42:	e18d      	b.n	8006160 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e44:	bf00      	nop
    return;
 8005e46:	e18b      	b.n	8006160 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	f040 8167 	bne.w	8006120 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e56:	f003 0310 	and.w	r3, r3, #16
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 8160 	beq.w	8006120 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e64:	f003 0310 	and.w	r3, r3, #16
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 8159 	beq.w	8006120 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60bb      	str	r3, [r7, #8]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	60bb      	str	r3, [r7, #8]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	60bb      	str	r3, [r7, #8]
 8005e82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8e:	2b40      	cmp	r3, #64	@ 0x40
 8005e90:	f040 80ce 	bne.w	8006030 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ea0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 80a9 	beq.w	8005ffc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	f080 80a2 	bcs.w	8005ffc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ebe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eca:	f000 8088 	beq.w	8005fde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	330c      	adds	r3, #12
 8005ed4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005edc:	e853 3f00 	ldrex	r3, [r3]
 8005ee0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005eec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	330c      	adds	r3, #12
 8005ef6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005efa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005efe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1d9      	bne.n	8005ece <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3314      	adds	r3, #20
 8005f20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f2c:	f023 0301 	bic.w	r3, r3, #1
 8005f30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3314      	adds	r3, #20
 8005f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e1      	bne.n	8005f1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3314      	adds	r3, #20
 8005f5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3314      	adds	r3, #20
 8005f76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e3      	bne.n	8005f56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	330c      	adds	r3, #12
 8005fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005fac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fae:	f023 0310 	bic.w	r3, r3, #16
 8005fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	330c      	adds	r3, #12
 8005fbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005fc0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005fc2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005fc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fc8:	e841 2300 	strex	r3, r2, [r1]
 8005fcc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005fce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e3      	bne.n	8005f9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fc fac7 	bl	800256c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7fa ff2d 	bl	8000e54 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005ffa:	e0b3      	b.n	8006164 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006000:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006004:	429a      	cmp	r2, r3
 8006006:	f040 80ad 	bne.w	8006164 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006014:	f040 80a6 	bne.w	8006164 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7fa ff15 	bl	8000e54 <HAL_UARTEx_RxEventCallback>
      return;
 800602a:	e09b      	b.n	8006164 <HAL_UART_IRQHandler+0x548>
 800602c:	080066d3 	.word	0x080066d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006038:	b29b      	uxth	r3, r3
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006044:	b29b      	uxth	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 808e 	beq.w	8006168 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800604c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 8089 	beq.w	8006168 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	330c      	adds	r3, #12
 800605c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006068:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800606c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	330c      	adds	r3, #12
 8006076:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800607a:	647a      	str	r2, [r7, #68]	@ 0x44
 800607c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006080:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e3      	bne.n	8006056 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3314      	adds	r3, #20
 8006094:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	623b      	str	r3, [r7, #32]
   return(result);
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	f023 0301 	bic.w	r3, r3, #1
 80060a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3314      	adds	r3, #20
 80060ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80060b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80060b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e3      	bne.n	800608e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	330c      	adds	r3, #12
 80060da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 0310 	bic.w	r3, r3, #16
 80060ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	330c      	adds	r3, #12
 80060f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80060f8:	61fa      	str	r2, [r7, #28]
 80060fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	69b9      	ldr	r1, [r7, #24]
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	e841 2300 	strex	r3, r2, [r1]
 8006104:	617b      	str	r3, [r7, #20]
   return(result);
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e3      	bne.n	80060d4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006112:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7fa fe9b 	bl	8000e54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800611e:	e023      	b.n	8006168 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006128:	2b00      	cmp	r3, #0
 800612a:	d009      	beq.n	8006140 <HAL_UART_IRQHandler+0x524>
 800612c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fadb 	bl	80066f4 <UART_Transmit_IT>
    return;
 800613e:	e014      	b.n	800616a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00e      	beq.n	800616a <HAL_UART_IRQHandler+0x54e>
 800614c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	d008      	beq.n	800616a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fb1b 	bl	8006794 <UART_EndTransmit_IT>
    return;
 800615e:	e004      	b.n	800616a <HAL_UART_IRQHandler+0x54e>
    return;
 8006160:	bf00      	nop
 8006162:	e002      	b.n	800616a <HAL_UART_IRQHandler+0x54e>
      return;
 8006164:	bf00      	nop
 8006166:	e000      	b.n	800616a <HAL_UART_IRQHandler+0x54e>
      return;
 8006168:	bf00      	nop
  }
}
 800616a:	37e8      	adds	r7, #232	@ 0xe8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b09c      	sub	sp, #112	@ 0x70
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061cc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d172      	bne.n	80062c2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80061dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061de:	2200      	movs	r2, #0
 80061e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	330c      	adds	r3, #12
 80061e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80061f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	330c      	adds	r3, #12
 8006200:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006202:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006204:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006208:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e5      	bne.n	80061e2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3314      	adds	r3, #20
 800621c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006228:	f023 0301 	bic.w	r3, r3, #1
 800622c:	667b      	str	r3, [r7, #100]	@ 0x64
 800622e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3314      	adds	r3, #20
 8006234:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006236:	647a      	str	r2, [r7, #68]	@ 0x44
 8006238:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800623c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e5      	bne.n	8006216 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800624a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3314      	adds	r3, #20
 8006250:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	623b      	str	r3, [r7, #32]
   return(result);
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006260:	663b      	str	r3, [r7, #96]	@ 0x60
 8006262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3314      	adds	r3, #20
 8006268:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800626a:	633a      	str	r2, [r7, #48]	@ 0x30
 800626c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1e5      	bne.n	800624a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800627e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006280:	2220      	movs	r2, #32
 8006282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006286:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800628a:	2b01      	cmp	r3, #1
 800628c:	d119      	bne.n	80062c2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800628e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	330c      	adds	r3, #12
 8006294:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	e853 3f00 	ldrex	r3, [r3]
 800629c:	60fb      	str	r3, [r7, #12]
   return(result);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f023 0310 	bic.w	r3, r3, #16
 80062a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	330c      	adds	r3, #12
 80062ac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80062ae:	61fa      	str	r2, [r7, #28]
 80062b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	69b9      	ldr	r1, [r7, #24]
 80062b4:	69fa      	ldr	r2, [r7, #28]
 80062b6:	e841 2300 	strex	r3, r2, [r1]
 80062ba:	617b      	str	r3, [r7, #20]
   return(result);
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1e5      	bne.n	800628e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062c4:	2200      	movs	r2, #0
 80062c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d106      	bne.n	80062de <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062d4:	4619      	mov	r1, r3
 80062d6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80062d8:	f7fa fdbc 	bl	8000e54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062dc:	e002      	b.n	80062e4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80062de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80062e0:	f7ff ff50 	bl	8006184 <HAL_UART_RxCpltCallback>
}
 80062e4:	bf00      	nop
 80062e6:	3770      	adds	r7, #112	@ 0x70
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006304:	2b01      	cmp	r3, #1
 8006306:	d108      	bne.n	800631a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800630c:	085b      	lsrs	r3, r3, #1
 800630e:	b29b      	uxth	r3, r3
 8006310:	4619      	mov	r1, r3
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7fa fd9e 	bl	8000e54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006318:	e002      	b.n	8006320 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f7ff ff3c 	bl	8006198 <HAL_UART_RxHalfCpltCallback>
}
 8006320:	bf00      	nop
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006338:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006344:	2b80      	cmp	r3, #128	@ 0x80
 8006346:	bf0c      	ite	eq
 8006348:	2301      	moveq	r3, #1
 800634a:	2300      	movne	r3, #0
 800634c:	b2db      	uxtb	r3, r3
 800634e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b21      	cmp	r3, #33	@ 0x21
 800635a:	d108      	bne.n	800636e <UART_DMAError+0x46>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2200      	movs	r2, #0
 8006366:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006368:	68b8      	ldr	r0, [r7, #8]
 800636a:	f000 f927 	bl	80065bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006378:	2b40      	cmp	r3, #64	@ 0x40
 800637a:	bf0c      	ite	eq
 800637c:	2301      	moveq	r3, #1
 800637e:	2300      	movne	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b22      	cmp	r3, #34	@ 0x22
 800638e:	d108      	bne.n	80063a2 <UART_DMAError+0x7a>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2200      	movs	r2, #0
 800639a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800639c:	68b8      	ldr	r0, [r7, #8]
 800639e:	f000 f935 	bl	800660c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063a6:	f043 0210 	orr.w	r2, r3, #16
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063ae:	68b8      	ldr	r0, [r7, #8]
 80063b0:	f7ff fefc 	bl	80061ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063b4:	bf00      	nop
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	603b      	str	r3, [r7, #0]
 80063c8:	4613      	mov	r3, r2
 80063ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063cc:	e03b      	b.n	8006446 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d4:	d037      	beq.n	8006446 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063d6:	f7fb feb1 	bl	800213c <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	6a3a      	ldr	r2, [r7, #32]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d302      	bcc.n	80063ec <UART_WaitOnFlagUntilTimeout+0x30>
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e03a      	b.n	8006466 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f003 0304 	and.w	r3, r3, #4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d023      	beq.n	8006446 <UART_WaitOnFlagUntilTimeout+0x8a>
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2b80      	cmp	r3, #128	@ 0x80
 8006402:	d020      	beq.n	8006446 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b40      	cmp	r3, #64	@ 0x40
 8006408:	d01d      	beq.n	8006446 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b08      	cmp	r3, #8
 8006416:	d116      	bne.n	8006446 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006418:	2300      	movs	r3, #0
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f8ec 	bl	800660c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2208      	movs	r2, #8
 8006438:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e00f      	b.n	8006466 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4013      	ands	r3, r2
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	429a      	cmp	r2, r3
 8006454:	bf0c      	ite	eq
 8006456:	2301      	moveq	r3, #1
 8006458:	2300      	movne	r3, #0
 800645a:	b2db      	uxtb	r3, r3
 800645c:	461a      	mov	r2, r3
 800645e:	79fb      	ldrb	r3, [r7, #7]
 8006460:	429a      	cmp	r2, r3
 8006462:	d0b4      	beq.n	80063ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b098      	sub	sp, #96	@ 0x60
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	88fa      	ldrh	r2, [r7, #6]
 8006488:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2222      	movs	r2, #34	@ 0x22
 8006494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800649c:	4a44      	ldr	r2, [pc, #272]	@ (80065b0 <UART_Start_Receive_DMA+0x140>)
 800649e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a4:	4a43      	ldr	r2, [pc, #268]	@ (80065b4 <UART_Start_Receive_DMA+0x144>)
 80064a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ac:	4a42      	ldr	r2, [pc, #264]	@ (80065b8 <UART_Start_Receive_DMA+0x148>)
 80064ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b4:	2200      	movs	r2, #0
 80064b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80064b8:	f107 0308 	add.w	r3, r7, #8
 80064bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3304      	adds	r3, #4
 80064c8:	4619      	mov	r1, r3
 80064ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	88fb      	ldrh	r3, [r7, #6]
 80064d0:	f7fb fff4 	bl	80024bc <HAL_DMA_Start_IT>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d008      	beq.n	80064ec <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2210      	movs	r2, #16
 80064de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e05d      	b.n	80065a8 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80064ec:	2300      	movs	r3, #0
 80064ee:	613b      	str	r3, [r7, #16]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	613b      	str	r3, [r7, #16]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	613b      	str	r3, [r7, #16]
 8006500:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d019      	beq.n	800653e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	330c      	adds	r3, #12
 8006510:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800651a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800651c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006520:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	330c      	adds	r3, #12
 8006528:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800652a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800652c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006530:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e5      	bne.n	800650a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3314      	adds	r3, #20
 8006544:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800654e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006550:	f043 0301 	orr.w	r3, r3, #1
 8006554:	657b      	str	r3, [r7, #84]	@ 0x54
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3314      	adds	r3, #20
 800655c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800655e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006560:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006564:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800656c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e5      	bne.n	800653e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3314      	adds	r3, #20
 8006578:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	617b      	str	r3, [r7, #20]
   return(result);
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006588:	653b      	str	r3, [r7, #80]	@ 0x50
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3314      	adds	r3, #20
 8006590:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006592:	627a      	str	r2, [r7, #36]	@ 0x24
 8006594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6a39      	ldr	r1, [r7, #32]
 8006598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	61fb      	str	r3, [r7, #28]
   return(result);
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e5      	bne.n	8006572 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3760      	adds	r7, #96	@ 0x60
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	080061c1 	.word	0x080061c1
 80065b4:	080062ed 	.word	0x080062ed
 80065b8:	08006329 	.word	0x08006329

080065bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80065bc:	b480      	push	{r7}
 80065be:	b089      	sub	sp, #36	@ 0x24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	330c      	adds	r3, #12
 80065ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	e853 3f00 	ldrex	r3, [r3]
 80065d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80065da:	61fb      	str	r3, [r7, #28]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	330c      	adds	r3, #12
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	61ba      	str	r2, [r7, #24]
 80065e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e8:	6979      	ldr	r1, [r7, #20]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	e841 2300 	strex	r3, r2, [r1]
 80065f0:	613b      	str	r3, [r7, #16]
   return(result);
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e5      	bne.n	80065c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006600:	bf00      	nop
 8006602:	3724      	adds	r7, #36	@ 0x24
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800660c:	b480      	push	{r7}
 800660e:	b095      	sub	sp, #84	@ 0x54
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	330c      	adds	r3, #12
 800661a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800661e:	e853 3f00 	ldrex	r3, [r3]
 8006622:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006626:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800662a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	330c      	adds	r3, #12
 8006632:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006634:	643a      	str	r2, [r7, #64]	@ 0x40
 8006636:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800663a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e5      	bne.n	8006614 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3314      	adds	r3, #20
 800664e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	61fb      	str	r3, [r7, #28]
   return(result);
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	f023 0301 	bic.w	r3, r3, #1
 800665e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3314      	adds	r3, #20
 8006666:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006668:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800666a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800666e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006670:	e841 2300 	strex	r3, r2, [r1]
 8006674:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e5      	bne.n	8006648 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006680:	2b01      	cmp	r3, #1
 8006682:	d119      	bne.n	80066b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	330c      	adds	r3, #12
 800668a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	e853 3f00 	ldrex	r3, [r3]
 8006692:	60bb      	str	r3, [r7, #8]
   return(result);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f023 0310 	bic.w	r3, r3, #16
 800669a:	647b      	str	r3, [r7, #68]	@ 0x44
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	330c      	adds	r3, #12
 80066a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066a4:	61ba      	str	r2, [r7, #24]
 80066a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a8:	6979      	ldr	r1, [r7, #20]
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	e841 2300 	strex	r3, r2, [r1]
 80066b0:	613b      	str	r3, [r7, #16]
   return(result);
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1e5      	bne.n	8006684 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80066c6:	bf00      	nop
 80066c8:	3754      	adds	r7, #84	@ 0x54
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7ff fd60 	bl	80061ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066ec:	bf00      	nop
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b21      	cmp	r3, #33	@ 0x21
 8006706:	d13e      	bne.n	8006786 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006710:	d114      	bne.n	800673c <UART_Transmit_IT+0x48>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d110      	bne.n	800673c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800672e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	1c9a      	adds	r2, r3, #2
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	621a      	str	r2, [r3, #32]
 800673a:	e008      	b.n	800674e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	1c59      	adds	r1, r3, #1
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	6211      	str	r1, [r2, #32]
 8006746:	781a      	ldrb	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29b      	uxth	r3, r3
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	4619      	mov	r1, r3
 800675c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10f      	bne.n	8006782 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68da      	ldr	r2, [r3, #12]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006770:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68da      	ldr	r2, [r3, #12]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006780:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	e000      	b.n	8006788 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006786:	2302      	movs	r3, #2
  }
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff fcdb 	bl	8006170 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08c      	sub	sp, #48	@ 0x30
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80067cc:	2300      	movs	r3, #0
 80067ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80067d0:	2300      	movs	r3, #0
 80067d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b22      	cmp	r3, #34	@ 0x22
 80067de:	f040 80aa 	bne.w	8006936 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ea:	d115      	bne.n	8006818 <UART_Receive_IT+0x54>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d111      	bne.n	8006818 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	b29b      	uxth	r3, r3
 8006802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006806:	b29a      	uxth	r2, r3
 8006808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006810:	1c9a      	adds	r2, r3, #2
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	629a      	str	r2, [r3, #40]	@ 0x28
 8006816:	e024      	b.n	8006862 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800681c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006826:	d007      	beq.n	8006838 <UART_Receive_IT+0x74>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10a      	bne.n	8006846 <UART_Receive_IT+0x82>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d106      	bne.n	8006846 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	b2da      	uxtb	r2, r3
 8006840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	e008      	b.n	8006858 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006852:	b2da      	uxtb	r2, r3
 8006854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006856:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29b      	uxth	r3, r3
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	4619      	mov	r1, r3
 8006870:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006872:	2b00      	cmp	r3, #0
 8006874:	d15d      	bne.n	8006932 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68da      	ldr	r2, [r3, #12]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0220 	bic.w	r2, r2, #32
 8006884:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68da      	ldr	r2, [r3, #12]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006894:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	695a      	ldr	r2, [r3, #20]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 0201 	bic.w	r2, r2, #1
 80068a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2220      	movs	r2, #32
 80068aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d135      	bne.n	8006928 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	330c      	adds	r3, #12
 80068c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	613b      	str	r3, [r7, #16]
   return(result);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f023 0310 	bic.w	r3, r3, #16
 80068d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	330c      	adds	r3, #12
 80068e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068e2:	623a      	str	r2, [r7, #32]
 80068e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e6:	69f9      	ldr	r1, [r7, #28]
 80068e8:	6a3a      	ldr	r2, [r7, #32]
 80068ea:	e841 2300 	strex	r3, r2, [r1]
 80068ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1e5      	bne.n	80068c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0310 	and.w	r3, r3, #16
 8006900:	2b10      	cmp	r3, #16
 8006902:	d10a      	bne.n	800691a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006904:	2300      	movs	r3, #0
 8006906:	60fb      	str	r3, [r7, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7fa fa97 	bl	8000e54 <HAL_UARTEx_RxEventCallback>
 8006926:	e002      	b.n	800692e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff fc2b 	bl	8006184 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	e002      	b.n	8006938 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	e000      	b.n	8006938 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006936:	2302      	movs	r3, #2
  }
}
 8006938:	4618      	mov	r0, r3
 800693a:	3730      	adds	r7, #48	@ 0x30
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006944:	b0c0      	sub	sp, #256	@ 0x100
 8006946:	af00      	add	r7, sp, #0
 8006948:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800694c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800695c:	68d9      	ldr	r1, [r3, #12]
 800695e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	ea40 0301 	orr.w	r3, r0, r1
 8006968:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800696a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	431a      	orrs	r2, r3
 8006978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	431a      	orrs	r2, r3
 8006980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	4313      	orrs	r3, r2
 8006988:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800698c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006998:	f021 010c 	bic.w	r1, r1, #12
 800699c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80069a6:	430b      	orrs	r3, r1
 80069a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80069b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ba:	6999      	ldr	r1, [r3, #24]
 80069bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	ea40 0301 	orr.w	r3, r0, r1
 80069c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	4b8f      	ldr	r3, [pc, #572]	@ (8006c0c <UART_SetConfig+0x2cc>)
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d005      	beq.n	80069e0 <UART_SetConfig+0xa0>
 80069d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	4b8d      	ldr	r3, [pc, #564]	@ (8006c10 <UART_SetConfig+0x2d0>)
 80069dc:	429a      	cmp	r2, r3
 80069de:	d104      	bne.n	80069ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069e0:	f7fd fb80 	bl	80040e4 <HAL_RCC_GetPCLK2Freq>
 80069e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80069e8:	e003      	b.n	80069f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069ea:	f7fd fb67 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 80069ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069fc:	f040 810c 	bne.w	8006c18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a04:	2200      	movs	r2, #0
 8006a06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a12:	4622      	mov	r2, r4
 8006a14:	462b      	mov	r3, r5
 8006a16:	1891      	adds	r1, r2, r2
 8006a18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a1a:	415b      	adcs	r3, r3
 8006a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a22:	4621      	mov	r1, r4
 8006a24:	eb12 0801 	adds.w	r8, r2, r1
 8006a28:	4629      	mov	r1, r5
 8006a2a:	eb43 0901 	adc.w	r9, r3, r1
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	f04f 0300 	mov.w	r3, #0
 8006a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a42:	4690      	mov	r8, r2
 8006a44:	4699      	mov	r9, r3
 8006a46:	4623      	mov	r3, r4
 8006a48:	eb18 0303 	adds.w	r3, r8, r3
 8006a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a50:	462b      	mov	r3, r5
 8006a52:	eb49 0303 	adc.w	r3, r9, r3
 8006a56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006a6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006a6e:	460b      	mov	r3, r1
 8006a70:	18db      	adds	r3, r3, r3
 8006a72:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a74:	4613      	mov	r3, r2
 8006a76:	eb42 0303 	adc.w	r3, r2, r3
 8006a7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006a80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006a84:	f7f9 fbfc 	bl	8000280 <__aeabi_uldivmod>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4b61      	ldr	r3, [pc, #388]	@ (8006c14 <UART_SetConfig+0x2d4>)
 8006a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a92:	095b      	lsrs	r3, r3, #5
 8006a94:	011c      	lsls	r4, r3, #4
 8006a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006aa0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006aa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	464b      	mov	r3, r9
 8006aac:	1891      	adds	r1, r2, r2
 8006aae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ab0:	415b      	adcs	r3, r3
 8006ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ab4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006ab8:	4641      	mov	r1, r8
 8006aba:	eb12 0a01 	adds.w	sl, r2, r1
 8006abe:	4649      	mov	r1, r9
 8006ac0:	eb43 0b01 	adc.w	fp, r3, r1
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	f04f 0300 	mov.w	r3, #0
 8006acc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ad0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ad8:	4692      	mov	sl, r2
 8006ada:	469b      	mov	fp, r3
 8006adc:	4643      	mov	r3, r8
 8006ade:	eb1a 0303 	adds.w	r3, sl, r3
 8006ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ae6:	464b      	mov	r3, r9
 8006ae8:	eb4b 0303 	adc.w	r3, fp, r3
 8006aec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006afc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b04:	460b      	mov	r3, r1
 8006b06:	18db      	adds	r3, r3, r3
 8006b08:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	eb42 0303 	adc.w	r3, r2, r3
 8006b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b1a:	f7f9 fbb1 	bl	8000280 <__aeabi_uldivmod>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
 8006b22:	4611      	mov	r1, r2
 8006b24:	4b3b      	ldr	r3, [pc, #236]	@ (8006c14 <UART_SetConfig+0x2d4>)
 8006b26:	fba3 2301 	umull	r2, r3, r3, r1
 8006b2a:	095b      	lsrs	r3, r3, #5
 8006b2c:	2264      	movs	r2, #100	@ 0x64
 8006b2e:	fb02 f303 	mul.w	r3, r2, r3
 8006b32:	1acb      	subs	r3, r1, r3
 8006b34:	00db      	lsls	r3, r3, #3
 8006b36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006b3a:	4b36      	ldr	r3, [pc, #216]	@ (8006c14 <UART_SetConfig+0x2d4>)
 8006b3c:	fba3 2302 	umull	r2, r3, r3, r2
 8006b40:	095b      	lsrs	r3, r3, #5
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006b48:	441c      	add	r4, r3
 8006b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006b58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006b5c:	4642      	mov	r2, r8
 8006b5e:	464b      	mov	r3, r9
 8006b60:	1891      	adds	r1, r2, r2
 8006b62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006b64:	415b      	adcs	r3, r3
 8006b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006b6c:	4641      	mov	r1, r8
 8006b6e:	1851      	adds	r1, r2, r1
 8006b70:	6339      	str	r1, [r7, #48]	@ 0x30
 8006b72:	4649      	mov	r1, r9
 8006b74:	414b      	adcs	r3, r1
 8006b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	f04f 0300 	mov.w	r3, #0
 8006b80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006b84:	4659      	mov	r1, fp
 8006b86:	00cb      	lsls	r3, r1, #3
 8006b88:	4651      	mov	r1, sl
 8006b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b8e:	4651      	mov	r1, sl
 8006b90:	00ca      	lsls	r2, r1, #3
 8006b92:	4610      	mov	r0, r2
 8006b94:	4619      	mov	r1, r3
 8006b96:	4603      	mov	r3, r0
 8006b98:	4642      	mov	r2, r8
 8006b9a:	189b      	adds	r3, r3, r2
 8006b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	460a      	mov	r2, r1
 8006ba4:	eb42 0303 	adc.w	r3, r2, r3
 8006ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006bb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006bbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	18db      	adds	r3, r3, r3
 8006bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	eb42 0303 	adc.w	r3, r2, r3
 8006bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006bd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006bd6:	f7f9 fb53 	bl	8000280 <__aeabi_uldivmod>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4b0d      	ldr	r3, [pc, #52]	@ (8006c14 <UART_SetConfig+0x2d4>)
 8006be0:	fba3 1302 	umull	r1, r3, r3, r2
 8006be4:	095b      	lsrs	r3, r3, #5
 8006be6:	2164      	movs	r1, #100	@ 0x64
 8006be8:	fb01 f303 	mul.w	r3, r1, r3
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	00db      	lsls	r3, r3, #3
 8006bf0:	3332      	adds	r3, #50	@ 0x32
 8006bf2:	4a08      	ldr	r2, [pc, #32]	@ (8006c14 <UART_SetConfig+0x2d4>)
 8006bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf8:	095b      	lsrs	r3, r3, #5
 8006bfa:	f003 0207 	and.w	r2, r3, #7
 8006bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4422      	add	r2, r4
 8006c06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c08:	e106      	b.n	8006e18 <UART_SetConfig+0x4d8>
 8006c0a:	bf00      	nop
 8006c0c:	40011000 	.word	0x40011000
 8006c10:	40011400 	.word	0x40011400
 8006c14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006c2a:	4642      	mov	r2, r8
 8006c2c:	464b      	mov	r3, r9
 8006c2e:	1891      	adds	r1, r2, r2
 8006c30:	6239      	str	r1, [r7, #32]
 8006c32:	415b      	adcs	r3, r3
 8006c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c3a:	4641      	mov	r1, r8
 8006c3c:	1854      	adds	r4, r2, r1
 8006c3e:	4649      	mov	r1, r9
 8006c40:	eb43 0501 	adc.w	r5, r3, r1
 8006c44:	f04f 0200 	mov.w	r2, #0
 8006c48:	f04f 0300 	mov.w	r3, #0
 8006c4c:	00eb      	lsls	r3, r5, #3
 8006c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c52:	00e2      	lsls	r2, r4, #3
 8006c54:	4614      	mov	r4, r2
 8006c56:	461d      	mov	r5, r3
 8006c58:	4643      	mov	r3, r8
 8006c5a:	18e3      	adds	r3, r4, r3
 8006c5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c60:	464b      	mov	r3, r9
 8006c62:	eb45 0303 	adc.w	r3, r5, r3
 8006c66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c7a:	f04f 0200 	mov.w	r2, #0
 8006c7e:	f04f 0300 	mov.w	r3, #0
 8006c82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006c86:	4629      	mov	r1, r5
 8006c88:	008b      	lsls	r3, r1, #2
 8006c8a:	4621      	mov	r1, r4
 8006c8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c90:	4621      	mov	r1, r4
 8006c92:	008a      	lsls	r2, r1, #2
 8006c94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006c98:	f7f9 faf2 	bl	8000280 <__aeabi_uldivmod>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4b60      	ldr	r3, [pc, #384]	@ (8006e24 <UART_SetConfig+0x4e4>)
 8006ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ca6:	095b      	lsrs	r3, r3, #5
 8006ca8:	011c      	lsls	r4, r3, #4
 8006caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006cb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006cb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006cbc:	4642      	mov	r2, r8
 8006cbe:	464b      	mov	r3, r9
 8006cc0:	1891      	adds	r1, r2, r2
 8006cc2:	61b9      	str	r1, [r7, #24]
 8006cc4:	415b      	adcs	r3, r3
 8006cc6:	61fb      	str	r3, [r7, #28]
 8006cc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ccc:	4641      	mov	r1, r8
 8006cce:	1851      	adds	r1, r2, r1
 8006cd0:	6139      	str	r1, [r7, #16]
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	414b      	adcs	r3, r1
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	f04f 0200 	mov.w	r2, #0
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ce4:	4659      	mov	r1, fp
 8006ce6:	00cb      	lsls	r3, r1, #3
 8006ce8:	4651      	mov	r1, sl
 8006cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cee:	4651      	mov	r1, sl
 8006cf0:	00ca      	lsls	r2, r1, #3
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	189b      	adds	r3, r3, r2
 8006cfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d00:	464b      	mov	r3, r9
 8006d02:	460a      	mov	r2, r1
 8006d04:	eb42 0303 	adc.w	r3, r2, r3
 8006d08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d18:	f04f 0200 	mov.w	r2, #0
 8006d1c:	f04f 0300 	mov.w	r3, #0
 8006d20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d24:	4649      	mov	r1, r9
 8006d26:	008b      	lsls	r3, r1, #2
 8006d28:	4641      	mov	r1, r8
 8006d2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d2e:	4641      	mov	r1, r8
 8006d30:	008a      	lsls	r2, r1, #2
 8006d32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006d36:	f7f9 faa3 	bl	8000280 <__aeabi_uldivmod>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4611      	mov	r1, r2
 8006d40:	4b38      	ldr	r3, [pc, #224]	@ (8006e24 <UART_SetConfig+0x4e4>)
 8006d42:	fba3 2301 	umull	r2, r3, r3, r1
 8006d46:	095b      	lsrs	r3, r3, #5
 8006d48:	2264      	movs	r2, #100	@ 0x64
 8006d4a:	fb02 f303 	mul.w	r3, r2, r3
 8006d4e:	1acb      	subs	r3, r1, r3
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	3332      	adds	r3, #50	@ 0x32
 8006d54:	4a33      	ldr	r2, [pc, #204]	@ (8006e24 <UART_SetConfig+0x4e4>)
 8006d56:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5a:	095b      	lsrs	r3, r3, #5
 8006d5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d60:	441c      	add	r4, r3
 8006d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d66:	2200      	movs	r2, #0
 8006d68:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006d6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006d70:	4642      	mov	r2, r8
 8006d72:	464b      	mov	r3, r9
 8006d74:	1891      	adds	r1, r2, r2
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	415b      	adcs	r3, r3
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d80:	4641      	mov	r1, r8
 8006d82:	1851      	adds	r1, r2, r1
 8006d84:	6039      	str	r1, [r7, #0]
 8006d86:	4649      	mov	r1, r9
 8006d88:	414b      	adcs	r3, r1
 8006d8a:	607b      	str	r3, [r7, #4]
 8006d8c:	f04f 0200 	mov.w	r2, #0
 8006d90:	f04f 0300 	mov.w	r3, #0
 8006d94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d98:	4659      	mov	r1, fp
 8006d9a:	00cb      	lsls	r3, r1, #3
 8006d9c:	4651      	mov	r1, sl
 8006d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006da2:	4651      	mov	r1, sl
 8006da4:	00ca      	lsls	r2, r1, #3
 8006da6:	4610      	mov	r0, r2
 8006da8:	4619      	mov	r1, r3
 8006daa:	4603      	mov	r3, r0
 8006dac:	4642      	mov	r2, r8
 8006dae:	189b      	adds	r3, r3, r2
 8006db0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006db2:	464b      	mov	r3, r9
 8006db4:	460a      	mov	r2, r1
 8006db6:	eb42 0303 	adc.w	r3, r2, r3
 8006dba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dc6:	667a      	str	r2, [r7, #100]	@ 0x64
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	008b      	lsls	r3, r1, #2
 8006dd8:	4641      	mov	r1, r8
 8006dda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dde:	4641      	mov	r1, r8
 8006de0:	008a      	lsls	r2, r1, #2
 8006de2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006de6:	f7f9 fa4b 	bl	8000280 <__aeabi_uldivmod>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	4b0d      	ldr	r3, [pc, #52]	@ (8006e24 <UART_SetConfig+0x4e4>)
 8006df0:	fba3 1302 	umull	r1, r3, r3, r2
 8006df4:	095b      	lsrs	r3, r3, #5
 8006df6:	2164      	movs	r1, #100	@ 0x64
 8006df8:	fb01 f303 	mul.w	r3, r1, r3
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	011b      	lsls	r3, r3, #4
 8006e00:	3332      	adds	r3, #50	@ 0x32
 8006e02:	4a08      	ldr	r2, [pc, #32]	@ (8006e24 <UART_SetConfig+0x4e4>)
 8006e04:	fba2 2303 	umull	r2, r3, r2, r3
 8006e08:	095b      	lsrs	r3, r3, #5
 8006e0a:	f003 020f 	and.w	r2, r3, #15
 8006e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4422      	add	r2, r4
 8006e16:	609a      	str	r2, [r3, #8]
}
 8006e18:	bf00      	nop
 8006e1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e24:	51eb851f 	.word	0x51eb851f

08006e28 <__NVIC_SetPriority>:
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	4603      	mov	r3, r0
 8006e30:	6039      	str	r1, [r7, #0]
 8006e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	db0a      	blt.n	8006e52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	490c      	ldr	r1, [pc, #48]	@ (8006e74 <__NVIC_SetPriority+0x4c>)
 8006e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e46:	0112      	lsls	r2, r2, #4
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	440b      	add	r3, r1
 8006e4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006e50:	e00a      	b.n	8006e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	4908      	ldr	r1, [pc, #32]	@ (8006e78 <__NVIC_SetPriority+0x50>)
 8006e58:	79fb      	ldrb	r3, [r7, #7]
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	3b04      	subs	r3, #4
 8006e60:	0112      	lsls	r2, r2, #4
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	440b      	add	r3, r1
 8006e66:	761a      	strb	r2, [r3, #24]
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr
 8006e74:	e000e100 	.word	0xe000e100
 8006e78:	e000ed00 	.word	0xe000ed00

08006e7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006e80:	4b05      	ldr	r3, [pc, #20]	@ (8006e98 <SysTick_Handler+0x1c>)
 8006e82:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006e84:	f001 fd46 	bl	8008914 <xTaskGetSchedulerState>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d001      	beq.n	8006e92 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006e8e:	f002 fb3b 	bl	8009508 <xPortSysTickHandler>
  }
}
 8006e92:	bf00      	nop
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	e000e010 	.word	0xe000e010

08006e9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	f06f 0004 	mvn.w	r0, #4
 8006ea6:	f7ff ffbf 	bl	8006e28 <__NVIC_SetPriority>
#endif
}
 8006eaa:	bf00      	nop
 8006eac:	bd80      	pop	{r7, pc}
	...

08006eb0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006eb6:	f3ef 8305 	mrs	r3, IPSR
 8006eba:	603b      	str	r3, [r7, #0]
  return(result);
 8006ebc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006ec2:	f06f 0305 	mvn.w	r3, #5
 8006ec6:	607b      	str	r3, [r7, #4]
 8006ec8:	e00c      	b.n	8006ee4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006eca:	4b0a      	ldr	r3, [pc, #40]	@ (8006ef4 <osKernelInitialize+0x44>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d105      	bne.n	8006ede <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006ed2:	4b08      	ldr	r3, [pc, #32]	@ (8006ef4 <osKernelInitialize+0x44>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	607b      	str	r3, [r7, #4]
 8006edc:	e002      	b.n	8006ee4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006ede:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ee4:	687b      	ldr	r3, [r7, #4]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	200003f4 	.word	0x200003f4

08006ef8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006efe:	f3ef 8305 	mrs	r3, IPSR
 8006f02:	603b      	str	r3, [r7, #0]
  return(result);
 8006f04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006f0a:	f06f 0305 	mvn.w	r3, #5
 8006f0e:	607b      	str	r3, [r7, #4]
 8006f10:	e010      	b.n	8006f34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006f12:	4b0b      	ldr	r3, [pc, #44]	@ (8006f40 <osKernelStart+0x48>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d109      	bne.n	8006f2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006f1a:	f7ff ffbf 	bl	8006e9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006f1e:	4b08      	ldr	r3, [pc, #32]	@ (8006f40 <osKernelStart+0x48>)
 8006f20:	2202      	movs	r2, #2
 8006f22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006f24:	f001 f892 	bl	800804c <vTaskStartScheduler>
      stat = osOK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	607b      	str	r3, [r7, #4]
 8006f2c:	e002      	b.n	8006f34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006f34:	687b      	ldr	r3, [r7, #4]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	200003f4 	.word	0x200003f4

08006f44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08e      	sub	sp, #56	@ 0x38
 8006f48:	af04      	add	r7, sp, #16
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f50:	2300      	movs	r3, #0
 8006f52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f54:	f3ef 8305 	mrs	r3, IPSR
 8006f58:	617b      	str	r3, [r7, #20]
  return(result);
 8006f5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d17e      	bne.n	800705e <osThreadNew+0x11a>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d07b      	beq.n	800705e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006f66:	2380      	movs	r3, #128	@ 0x80
 8006f68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006f6a:	2318      	movs	r3, #24
 8006f6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006f72:	f04f 33ff 	mov.w	r3, #4294967295
 8006f76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d045      	beq.n	800700a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <osThreadNew+0x48>
        name = attr->name;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d008      	beq.n	8006fb2 <osThreadNew+0x6e>
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	2b38      	cmp	r3, #56	@ 0x38
 8006fa4:	d805      	bhi.n	8006fb2 <osThreadNew+0x6e>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <osThreadNew+0x72>
        return (NULL);
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e054      	b.n	8007060 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	089b      	lsrs	r3, r3, #2
 8006fc4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00e      	beq.n	8006fec <osThreadNew+0xa8>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	2ba7      	cmp	r3, #167	@ 0xa7
 8006fd4:	d90a      	bls.n	8006fec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d006      	beq.n	8006fec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <osThreadNew+0xa8>
        mem = 1;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	61bb      	str	r3, [r7, #24]
 8006fea:	e010      	b.n	800700e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10c      	bne.n	800700e <osThreadNew+0xca>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d108      	bne.n	800700e <osThreadNew+0xca>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d104      	bne.n	800700e <osThreadNew+0xca>
          mem = 0;
 8007004:	2300      	movs	r3, #0
 8007006:	61bb      	str	r3, [r7, #24]
 8007008:	e001      	b.n	800700e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800700a:	2300      	movs	r3, #0
 800700c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d110      	bne.n	8007036 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800701c:	9202      	str	r2, [sp, #8]
 800701e:	9301      	str	r3, [sp, #4]
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	6a3a      	ldr	r2, [r7, #32]
 8007028:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 fe1a 	bl	8007c64 <xTaskCreateStatic>
 8007030:	4603      	mov	r3, r0
 8007032:	613b      	str	r3, [r7, #16]
 8007034:	e013      	b.n	800705e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d110      	bne.n	800705e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	b29a      	uxth	r2, r3
 8007040:	f107 0310 	add.w	r3, r7, #16
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 fe68 	bl	8007d24 <xTaskCreate>
 8007054:	4603      	mov	r3, r0
 8007056:	2b01      	cmp	r3, #1
 8007058:	d001      	beq.n	800705e <osThreadNew+0x11a>
            hTask = NULL;
 800705a:	2300      	movs	r3, #0
 800705c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800705e:	693b      	ldr	r3, [r7, #16]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3728      	adds	r7, #40	@ 0x28
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007070:	f3ef 8305 	mrs	r3, IPSR
 8007074:	60bb      	str	r3, [r7, #8]
  return(result);
 8007076:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <osDelay+0x1c>
    stat = osErrorISR;
 800707c:	f06f 0305 	mvn.w	r3, #5
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	e007      	b.n	8007094 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007084:	2300      	movs	r3, #0
 8007086:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <osDelay+0x2c>
      vTaskDelay(ticks);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 ffa6 	bl	8007fe0 <vTaskDelay>
    }
  }

  return (stat);
 8007094:	68fb      	ldr	r3, [r7, #12]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
	...

080070a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4a07      	ldr	r2, [pc, #28]	@ (80070cc <vApplicationGetIdleTaskMemory+0x2c>)
 80070b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	4a06      	ldr	r2, [pc, #24]	@ (80070d0 <vApplicationGetIdleTaskMemory+0x30>)
 80070b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2280      	movs	r2, #128	@ 0x80
 80070bc:	601a      	str	r2, [r3, #0]
}
 80070be:	bf00      	nop
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	200003f8 	.word	0x200003f8
 80070d0:	200004a0 	.word	0x200004a0

080070d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4a07      	ldr	r2, [pc, #28]	@ (8007100 <vApplicationGetTimerTaskMemory+0x2c>)
 80070e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	4a06      	ldr	r2, [pc, #24]	@ (8007104 <vApplicationGetTimerTaskMemory+0x30>)
 80070ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80070f2:	601a      	str	r2, [r3, #0]
}
 80070f4:	bf00      	nop
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	200006a0 	.word	0x200006a0
 8007104:	20000748 	.word	0x20000748

08007108 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f103 0208 	add.w	r2, r3, #8
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f04f 32ff 	mov.w	r2, #4294967295
 8007120:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f103 0208 	add.w	r2, r3, #8
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f103 0208 	add.w	r2, r3, #8
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007162:	b480      	push	{r7}
 8007164:	b085      	sub	sp, #20
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	689a      	ldr	r2, [r3, #8]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	601a      	str	r2, [r3, #0]
}
 800719e:	bf00      	nop
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071aa:	b480      	push	{r7}
 80071ac:	b085      	sub	sp, #20
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c0:	d103      	bne.n	80071ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	e00c      	b.n	80071e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3308      	adds	r3, #8
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	e002      	b.n	80071d8 <vListInsert+0x2e>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d2f6      	bcs.n	80071d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	601a      	str	r2, [r3, #0]
}
 8007210:	bf00      	nop
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	6892      	ldr	r2, [r2, #8]
 8007232:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	6852      	ldr	r2, [r2, #4]
 800723c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	429a      	cmp	r2, r3
 8007246:	d103      	bne.n	8007250 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	1e5a      	subs	r2, r3, #1
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10b      	bne.n	800729c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007296:	bf00      	nop
 8007298:	bf00      	nop
 800729a:	e7fd      	b.n	8007298 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800729c:	f002 f8a4 	bl	80093e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072a8:	68f9      	ldr	r1, [r7, #12]
 80072aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80072ac:	fb01 f303 	mul.w	r3, r1, r3
 80072b0:	441a      	add	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072cc:	3b01      	subs	r3, #1
 80072ce:	68f9      	ldr	r1, [r7, #12]
 80072d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80072d2:	fb01 f303 	mul.w	r3, r1, r3
 80072d6:	441a      	add	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	22ff      	movs	r2, #255	@ 0xff
 80072e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	22ff      	movs	r2, #255	@ 0xff
 80072e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d114      	bne.n	800731c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d01a      	beq.n	8007330 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	3310      	adds	r3, #16
 80072fe:	4618      	mov	r0, r3
 8007300:	f001 f942 	bl	8008588 <xTaskRemoveFromEventList>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d012      	beq.n	8007330 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800730a:	4b0d      	ldr	r3, [pc, #52]	@ (8007340 <xQueueGenericReset+0xd0>)
 800730c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	e009      	b.n	8007330 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	3310      	adds	r3, #16
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff fef1 	bl	8007108 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3324      	adds	r3, #36	@ 0x24
 800732a:	4618      	mov	r0, r3
 800732c:	f7ff feec 	bl	8007108 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007330:	f002 f88c 	bl	800944c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007334:	2301      	movs	r3, #1
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	e000ed04 	.word	0xe000ed04

08007344 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007344:	b580      	push	{r7, lr}
 8007346:	b08e      	sub	sp, #56	@ 0x38
 8007348:	af02      	add	r7, sp, #8
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
 8007350:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10b      	bne.n	8007370 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800736a:	bf00      	nop
 800736c:	bf00      	nop
 800736e:	e7fd      	b.n	800736c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10b      	bne.n	800738e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007388:	bf00      	nop
 800738a:	bf00      	nop
 800738c:	e7fd      	b.n	800738a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <xQueueGenericCreateStatic+0x56>
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <xQueueGenericCreateStatic+0x5a>
 800739a:	2301      	movs	r3, #1
 800739c:	e000      	b.n	80073a0 <xQueueGenericCreateStatic+0x5c>
 800739e:	2300      	movs	r3, #0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10b      	bne.n	80073bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	623b      	str	r3, [r7, #32]
}
 80073b6:	bf00      	nop
 80073b8:	bf00      	nop
 80073ba:	e7fd      	b.n	80073b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <xQueueGenericCreateStatic+0x84>
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <xQueueGenericCreateStatic+0x88>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <xQueueGenericCreateStatic+0x8a>
 80073cc:	2300      	movs	r3, #0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10b      	bne.n	80073ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	61fb      	str	r3, [r7, #28]
}
 80073e4:	bf00      	nop
 80073e6:	bf00      	nop
 80073e8:	e7fd      	b.n	80073e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073ea:	2350      	movs	r3, #80	@ 0x50
 80073ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2b50      	cmp	r3, #80	@ 0x50
 80073f2:	d00b      	beq.n	800740c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	61bb      	str	r3, [r7, #24]
}
 8007406:	bf00      	nop
 8007408:	bf00      	nop
 800740a:	e7fd      	b.n	8007408 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800740c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00d      	beq.n	8007434 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007420:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	4613      	mov	r3, r2
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	68b9      	ldr	r1, [r7, #8]
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 f805 	bl	800743e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007436:	4618      	mov	r0, r3
 8007438:	3730      	adds	r7, #48	@ 0x30
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	607a      	str	r2, [r7, #4]
 800744a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d103      	bne.n	800745a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	e002      	b.n	8007460 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800746c:	2101      	movs	r1, #1
 800746e:	69b8      	ldr	r0, [r7, #24]
 8007470:	f7ff fefe 	bl	8007270 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	78fa      	ldrb	r2, [r7, #3]
 8007478:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800747c:	bf00      	nop
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b08e      	sub	sp, #56	@ 0x38
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007492:	2300      	movs	r3, #0
 8007494:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10b      	bne.n	80074b8 <xQueueGenericSend+0x34>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80074b2:	bf00      	nop
 80074b4:	bf00      	nop
 80074b6:	e7fd      	b.n	80074b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d103      	bne.n	80074c6 <xQueueGenericSend+0x42>
 80074be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <xQueueGenericSend+0x46>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e000      	b.n	80074cc <xQueueGenericSend+0x48>
 80074ca:	2300      	movs	r3, #0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10b      	bne.n	80074e8 <xQueueGenericSend+0x64>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80074e2:	bf00      	nop
 80074e4:	bf00      	nop
 80074e6:	e7fd      	b.n	80074e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d103      	bne.n	80074f6 <xQueueGenericSend+0x72>
 80074ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d101      	bne.n	80074fa <xQueueGenericSend+0x76>
 80074f6:	2301      	movs	r3, #1
 80074f8:	e000      	b.n	80074fc <xQueueGenericSend+0x78>
 80074fa:	2300      	movs	r3, #0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10b      	bne.n	8007518 <xQueueGenericSend+0x94>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	623b      	str	r3, [r7, #32]
}
 8007512:	bf00      	nop
 8007514:	bf00      	nop
 8007516:	e7fd      	b.n	8007514 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007518:	f001 f9fc 	bl	8008914 <xTaskGetSchedulerState>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d102      	bne.n	8007528 <xQueueGenericSend+0xa4>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <xQueueGenericSend+0xa8>
 8007528:	2301      	movs	r3, #1
 800752a:	e000      	b.n	800752e <xQueueGenericSend+0xaa>
 800752c:	2300      	movs	r3, #0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10b      	bne.n	800754a <xQueueGenericSend+0xc6>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	61fb      	str	r3, [r7, #28]
}
 8007544:	bf00      	nop
 8007546:	bf00      	nop
 8007548:	e7fd      	b.n	8007546 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800754a:	f001 ff4d 	bl	80093e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800754e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007550:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007556:	429a      	cmp	r2, r3
 8007558:	d302      	bcc.n	8007560 <xQueueGenericSend+0xdc>
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b02      	cmp	r3, #2
 800755e:	d129      	bne.n	80075b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	68b9      	ldr	r1, [r7, #8]
 8007564:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007566:	f000 fa0f 	bl	8007988 <prvCopyDataToQueue>
 800756a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800756c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007570:	2b00      	cmp	r3, #0
 8007572:	d010      	beq.n	8007596 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007576:	3324      	adds	r3, #36	@ 0x24
 8007578:	4618      	mov	r0, r3
 800757a:	f001 f805 	bl	8008588 <xTaskRemoveFromEventList>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d013      	beq.n	80075ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007584:	4b3f      	ldr	r3, [pc, #252]	@ (8007684 <xQueueGenericSend+0x200>)
 8007586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	e00a      	b.n	80075ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007598:	2b00      	cmp	r3, #0
 800759a:	d007      	beq.n	80075ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800759c:	4b39      	ldr	r3, [pc, #228]	@ (8007684 <xQueueGenericSend+0x200>)
 800759e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075ac:	f001 ff4e 	bl	800944c <vPortExitCritical>
				return pdPASS;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e063      	b.n	800767c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d103      	bne.n	80075c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075ba:	f001 ff47 	bl	800944c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075be:	2300      	movs	r3, #0
 80075c0:	e05c      	b.n	800767c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d106      	bne.n	80075d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075c8:	f107 0314 	add.w	r3, r7, #20
 80075cc:	4618      	mov	r0, r3
 80075ce:	f001 f83f 	bl	8008650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075d2:	2301      	movs	r3, #1
 80075d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075d6:	f001 ff39 	bl	800944c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075da:	f000 fda7 	bl	800812c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075de:	f001 ff03 	bl	80093e8 <vPortEnterCritical>
 80075e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075e8:	b25b      	sxtb	r3, r3
 80075ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ee:	d103      	bne.n	80075f8 <xQueueGenericSend+0x174>
 80075f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075fe:	b25b      	sxtb	r3, r3
 8007600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007604:	d103      	bne.n	800760e <xQueueGenericSend+0x18a>
 8007606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800760e:	f001 ff1d 	bl	800944c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007612:	1d3a      	adds	r2, r7, #4
 8007614:	f107 0314 	add.w	r3, r7, #20
 8007618:	4611      	mov	r1, r2
 800761a:	4618      	mov	r0, r3
 800761c:	f001 f82e 	bl	800867c <xTaskCheckForTimeOut>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d124      	bne.n	8007670 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007626:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007628:	f000 faa6 	bl	8007b78 <prvIsQueueFull>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d018      	beq.n	8007664 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007634:	3310      	adds	r3, #16
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	4611      	mov	r1, r2
 800763a:	4618      	mov	r0, r3
 800763c:	f000 ff52 	bl	80084e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007640:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007642:	f000 fa31 	bl	8007aa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007646:	f000 fd7f 	bl	8008148 <xTaskResumeAll>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	f47f af7c 	bne.w	800754a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007652:	4b0c      	ldr	r3, [pc, #48]	@ (8007684 <xQueueGenericSend+0x200>)
 8007654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	e772      	b.n	800754a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007664:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007666:	f000 fa1f 	bl	8007aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800766a:	f000 fd6d 	bl	8008148 <xTaskResumeAll>
 800766e:	e76c      	b.n	800754a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007670:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007672:	f000 fa19 	bl	8007aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007676:	f000 fd67 	bl	8008148 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800767a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800767c:	4618      	mov	r0, r3
 800767e:	3738      	adds	r7, #56	@ 0x38
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	e000ed04 	.word	0xe000ed04

08007688 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b090      	sub	sp, #64	@ 0x40
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
 8007694:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800769a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10b      	bne.n	80076b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80076a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80076b2:	bf00      	nop
 80076b4:	bf00      	nop
 80076b6:	e7fd      	b.n	80076b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d103      	bne.n	80076c6 <xQueueGenericSendFromISR+0x3e>
 80076be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <xQueueGenericSendFromISR+0x42>
 80076c6:	2301      	movs	r3, #1
 80076c8:	e000      	b.n	80076cc <xQueueGenericSendFromISR+0x44>
 80076ca:	2300      	movs	r3, #0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10b      	bne.n	80076e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80076e2:	bf00      	nop
 80076e4:	bf00      	nop
 80076e6:	e7fd      	b.n	80076e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d103      	bne.n	80076f6 <xQueueGenericSendFromISR+0x6e>
 80076ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d101      	bne.n	80076fa <xQueueGenericSendFromISR+0x72>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e000      	b.n	80076fc <xQueueGenericSendFromISR+0x74>
 80076fa:	2300      	movs	r3, #0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10b      	bne.n	8007718 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	623b      	str	r3, [r7, #32]
}
 8007712:	bf00      	nop
 8007714:	bf00      	nop
 8007716:	e7fd      	b.n	8007714 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007718:	f001 ff46 	bl	80095a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800771c:	f3ef 8211 	mrs	r2, BASEPRI
 8007720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	61fa      	str	r2, [r7, #28]
 8007732:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007734:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007736:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800773c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007740:	429a      	cmp	r2, r3
 8007742:	d302      	bcc.n	800774a <xQueueGenericSendFromISR+0xc2>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b02      	cmp	r3, #2
 8007748:	d12f      	bne.n	80077aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800774a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007750:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007758:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	68b9      	ldr	r1, [r7, #8]
 800775e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007760:	f000 f912 	bl	8007988 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007764:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776c:	d112      	bne.n	8007794 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800776e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007772:	2b00      	cmp	r3, #0
 8007774:	d016      	beq.n	80077a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007778:	3324      	adds	r3, #36	@ 0x24
 800777a:	4618      	mov	r0, r3
 800777c:	f000 ff04 	bl	8008588 <xTaskRemoveFromEventList>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00e      	beq.n	80077a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00b      	beq.n	80077a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	e007      	b.n	80077a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007794:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007798:	3301      	adds	r3, #1
 800779a:	b2db      	uxtb	r3, r3
 800779c:	b25a      	sxtb	r2, r3
 800779e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80077a4:	2301      	movs	r3, #1
 80077a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80077a8:	e001      	b.n	80077ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077aa:	2300      	movs	r3, #0
 80077ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077b0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3740      	adds	r7, #64	@ 0x40
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08c      	sub	sp, #48	@ 0x30
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077d0:	2300      	movs	r3, #0
 80077d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10b      	bne.n	80077f6 <xQueueReceive+0x32>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	623b      	str	r3, [r7, #32]
}
 80077f0:	bf00      	nop
 80077f2:	bf00      	nop
 80077f4:	e7fd      	b.n	80077f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d103      	bne.n	8007804 <xQueueReceive+0x40>
 80077fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <xQueueReceive+0x44>
 8007804:	2301      	movs	r3, #1
 8007806:	e000      	b.n	800780a <xQueueReceive+0x46>
 8007808:	2300      	movs	r3, #0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10b      	bne.n	8007826 <xQueueReceive+0x62>
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	61fb      	str	r3, [r7, #28]
}
 8007820:	bf00      	nop
 8007822:	bf00      	nop
 8007824:	e7fd      	b.n	8007822 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007826:	f001 f875 	bl	8008914 <xTaskGetSchedulerState>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d102      	bne.n	8007836 <xQueueReceive+0x72>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <xQueueReceive+0x76>
 8007836:	2301      	movs	r3, #1
 8007838:	e000      	b.n	800783c <xQueueReceive+0x78>
 800783a:	2300      	movs	r3, #0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10b      	bne.n	8007858 <xQueueReceive+0x94>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	61bb      	str	r3, [r7, #24]
}
 8007852:	bf00      	nop
 8007854:	bf00      	nop
 8007856:	e7fd      	b.n	8007854 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007858:	f001 fdc6 	bl	80093e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800785c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007860:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007864:	2b00      	cmp	r3, #0
 8007866:	d01f      	beq.n	80078a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007868:	68b9      	ldr	r1, [r7, #8]
 800786a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800786c:	f000 f8f6 	bl	8007a5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007872:	1e5a      	subs	r2, r3, #1
 8007874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007876:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00f      	beq.n	80078a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007882:	3310      	adds	r3, #16
 8007884:	4618      	mov	r0, r3
 8007886:	f000 fe7f 	bl	8008588 <xTaskRemoveFromEventList>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d007      	beq.n	80078a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007890:	4b3c      	ldr	r3, [pc, #240]	@ (8007984 <xQueueReceive+0x1c0>)
 8007892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078a0:	f001 fdd4 	bl	800944c <vPortExitCritical>
				return pdPASS;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e069      	b.n	800797c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d103      	bne.n	80078b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078ae:	f001 fdcd 	bl	800944c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078b2:	2300      	movs	r3, #0
 80078b4:	e062      	b.n	800797c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d106      	bne.n	80078ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078bc:	f107 0310 	add.w	r3, r7, #16
 80078c0:	4618      	mov	r0, r3
 80078c2:	f000 fec5 	bl	8008650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078c6:	2301      	movs	r3, #1
 80078c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078ca:	f001 fdbf 	bl	800944c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078ce:	f000 fc2d 	bl	800812c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078d2:	f001 fd89 	bl	80093e8 <vPortEnterCritical>
 80078d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078dc:	b25b      	sxtb	r3, r3
 80078de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e2:	d103      	bne.n	80078ec <xQueueReceive+0x128>
 80078e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078f2:	b25b      	sxtb	r3, r3
 80078f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f8:	d103      	bne.n	8007902 <xQueueReceive+0x13e>
 80078fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007902:	f001 fda3 	bl	800944c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007906:	1d3a      	adds	r2, r7, #4
 8007908:	f107 0310 	add.w	r3, r7, #16
 800790c:	4611      	mov	r1, r2
 800790e:	4618      	mov	r0, r3
 8007910:	f000 feb4 	bl	800867c <xTaskCheckForTimeOut>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d123      	bne.n	8007962 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800791a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800791c:	f000 f916 	bl	8007b4c <prvIsQueueEmpty>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d017      	beq.n	8007956 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007928:	3324      	adds	r3, #36	@ 0x24
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	4611      	mov	r1, r2
 800792e:	4618      	mov	r0, r3
 8007930:	f000 fdd8 	bl	80084e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007934:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007936:	f000 f8b7 	bl	8007aa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800793a:	f000 fc05 	bl	8008148 <xTaskResumeAll>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d189      	bne.n	8007858 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007944:	4b0f      	ldr	r3, [pc, #60]	@ (8007984 <xQueueReceive+0x1c0>)
 8007946:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	e780      	b.n	8007858 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007956:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007958:	f000 f8a6 	bl	8007aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800795c:	f000 fbf4 	bl	8008148 <xTaskResumeAll>
 8007960:	e77a      	b.n	8007858 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007962:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007964:	f000 f8a0 	bl	8007aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007968:	f000 fbee 	bl	8008148 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800796c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800796e:	f000 f8ed 	bl	8007b4c <prvIsQueueEmpty>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	f43f af6f 	beq.w	8007858 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800797a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800797c:	4618      	mov	r0, r3
 800797e:	3730      	adds	r7, #48	@ 0x30
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	e000ed04 	.word	0xe000ed04

08007988 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007994:	2300      	movs	r3, #0
 8007996:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10d      	bne.n	80079c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d14d      	bne.n	8007a4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 ffcc 	bl	8008950 <xTaskPriorityDisinherit>
 80079b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	609a      	str	r2, [r3, #8]
 80079c0:	e043      	b.n	8007a4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d119      	bne.n	80079fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6858      	ldr	r0, [r3, #4]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d0:	461a      	mov	r2, r3
 80079d2:	68b9      	ldr	r1, [r7, #8]
 80079d4:	f002 fa2b 	bl	8009e2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e0:	441a      	add	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d32b      	bcc.n	8007a4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	605a      	str	r2, [r3, #4]
 80079fa:	e026      	b.n	8007a4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	68d8      	ldr	r0, [r3, #12]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a04:	461a      	mov	r2, r3
 8007a06:	68b9      	ldr	r1, [r7, #8]
 8007a08:	f002 fa11 	bl	8009e2e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a14:	425b      	negs	r3, r3
 8007a16:	441a      	add	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	68da      	ldr	r2, [r3, #12]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d207      	bcs.n	8007a38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a30:	425b      	negs	r3, r3
 8007a32:	441a      	add	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d105      	bne.n	8007a4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	3b01      	subs	r3, #1
 8007a48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007a52:	697b      	ldr	r3, [r7, #20]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3718      	adds	r7, #24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d018      	beq.n	8007aa0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68da      	ldr	r2, [r3, #12]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a76:	441a      	add	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	68da      	ldr	r2, [r3, #12]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d303      	bcc.n	8007a90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68d9      	ldr	r1, [r3, #12]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6838      	ldr	r0, [r7, #0]
 8007a9c:	f002 f9c7 	bl	8009e2e <memcpy>
	}
}
 8007aa0:	bf00      	nop
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ab0:	f001 fc9a 	bl	80093e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007aba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007abc:	e011      	b.n	8007ae2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d012      	beq.n	8007aec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	3324      	adds	r3, #36	@ 0x24
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 fd5c 	bl	8008588 <xTaskRemoveFromEventList>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ad6:	f000 fe35 	bl	8008744 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	3b01      	subs	r3, #1
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	dce9      	bgt.n	8007abe <prvUnlockQueue+0x16>
 8007aea:	e000      	b.n	8007aee <prvUnlockQueue+0x46>
					break;
 8007aec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	22ff      	movs	r2, #255	@ 0xff
 8007af2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007af6:	f001 fca9 	bl	800944c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007afa:	f001 fc75 	bl	80093e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b06:	e011      	b.n	8007b2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d012      	beq.n	8007b36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3310      	adds	r3, #16
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 fd37 	bl	8008588 <xTaskRemoveFromEventList>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b20:	f000 fe10 	bl	8008744 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	3b01      	subs	r3, #1
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	dce9      	bgt.n	8007b08 <prvUnlockQueue+0x60>
 8007b34:	e000      	b.n	8007b38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	22ff      	movs	r2, #255	@ 0xff
 8007b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007b40:	f001 fc84 	bl	800944c <vPortExitCritical>
}
 8007b44:	bf00      	nop
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b54:	f001 fc48 	bl	80093e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d102      	bne.n	8007b66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b60:	2301      	movs	r3, #1
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	e001      	b.n	8007b6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b66:	2300      	movs	r3, #0
 8007b68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b6a:	f001 fc6f 	bl	800944c <vPortExitCritical>

	return xReturn;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b80:	f001 fc32 	bl	80093e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d102      	bne.n	8007b96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b90:	2301      	movs	r3, #1
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	e001      	b.n	8007b9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b9a:	f001 fc57 	bl	800944c <vPortExitCritical>

	return xReturn;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60fb      	str	r3, [r7, #12]
 8007bb6:	e014      	b.n	8007be2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007bb8:	4a0f      	ldr	r2, [pc, #60]	@ (8007bf8 <vQueueAddToRegistry+0x50>)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10b      	bne.n	8007bdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007bc4:	490c      	ldr	r1, [pc, #48]	@ (8007bf8 <vQueueAddToRegistry+0x50>)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007bce:	4a0a      	ldr	r2, [pc, #40]	@ (8007bf8 <vQueueAddToRegistry+0x50>)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	00db      	lsls	r3, r3, #3
 8007bd4:	4413      	add	r3, r2
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007bda:	e006      	b.n	8007bea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3301      	adds	r3, #1
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2b07      	cmp	r3, #7
 8007be6:	d9e7      	bls.n	8007bb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007be8:	bf00      	nop
 8007bea:	bf00      	nop
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	20000b48 	.word	0x20000b48

08007bfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c0c:	f001 fbec 	bl	80093e8 <vPortEnterCritical>
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c16:	b25b      	sxtb	r3, r3
 8007c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1c:	d103      	bne.n	8007c26 <vQueueWaitForMessageRestricted+0x2a>
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c2c:	b25b      	sxtb	r3, r3
 8007c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c32:	d103      	bne.n	8007c3c <vQueueWaitForMessageRestricted+0x40>
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c3c:	f001 fc06 	bl	800944c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d106      	bne.n	8007c56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	3324      	adds	r3, #36	@ 0x24
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	68b9      	ldr	r1, [r7, #8]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 fc6d 	bl	8008530 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c56:	6978      	ldr	r0, [r7, #20]
 8007c58:	f7ff ff26 	bl	8007aa8 <prvUnlockQueue>
	}
 8007c5c:	bf00      	nop
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b08e      	sub	sp, #56	@ 0x38
 8007c68:	af04      	add	r7, sp, #16
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10b      	bne.n	8007c90 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	623b      	str	r3, [r7, #32]
}
 8007c8a:	bf00      	nop
 8007c8c:	bf00      	nop
 8007c8e:	e7fd      	b.n	8007c8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10b      	bne.n	8007cae <xTaskCreateStatic+0x4a>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	61fb      	str	r3, [r7, #28]
}
 8007ca8:	bf00      	nop
 8007caa:	bf00      	nop
 8007cac:	e7fd      	b.n	8007caa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cae:	23a8      	movs	r3, #168	@ 0xa8
 8007cb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2ba8      	cmp	r3, #168	@ 0xa8
 8007cb6:	d00b      	beq.n	8007cd0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	61bb      	str	r3, [r7, #24]
}
 8007cca:	bf00      	nop
 8007ccc:	bf00      	nop
 8007cce:	e7fd      	b.n	8007ccc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007cd0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d01e      	beq.n	8007d16 <xTaskCreateStatic+0xb2>
 8007cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d01b      	beq.n	8007d16 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ce6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cea:	2202      	movs	r2, #2
 8007cec:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	9303      	str	r3, [sp, #12]
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf6:	9302      	str	r3, [sp, #8]
 8007cf8:	f107 0314 	add.w	r3, r7, #20
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	68b9      	ldr	r1, [r7, #8]
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 f851 	bl	8007db0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007d10:	f000 f8f6 	bl	8007f00 <prvAddNewTaskToReadyList>
 8007d14:	e001      	b.n	8007d1a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d1a:	697b      	ldr	r3, [r7, #20]
	}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3728      	adds	r7, #40	@ 0x28
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08c      	sub	sp, #48	@ 0x30
 8007d28:	af04      	add	r7, sp, #16
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	603b      	str	r3, [r7, #0]
 8007d30:	4613      	mov	r3, r2
 8007d32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d34:	88fb      	ldrh	r3, [r7, #6]
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f001 fc77 	bl	800962c <pvPortMalloc>
 8007d3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00e      	beq.n	8007d64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d46:	20a8      	movs	r0, #168	@ 0xa8
 8007d48:	f001 fc70 	bl	800962c <pvPortMalloc>
 8007d4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d003      	beq.n	8007d5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d5a:	e005      	b.n	8007d68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d5c:	6978      	ldr	r0, [r7, #20]
 8007d5e:	f001 fd33 	bl	80097c8 <vPortFree>
 8007d62:	e001      	b.n	8007d68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d64:	2300      	movs	r3, #0
 8007d66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d017      	beq.n	8007d9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d76:	88fa      	ldrh	r2, [r7, #6]
 8007d78:	2300      	movs	r3, #0
 8007d7a:	9303      	str	r3, [sp, #12]
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	9302      	str	r3, [sp, #8]
 8007d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d82:	9301      	str	r3, [sp, #4]
 8007d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	68b9      	ldr	r1, [r7, #8]
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 f80f 	bl	8007db0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d92:	69f8      	ldr	r0, [r7, #28]
 8007d94:	f000 f8b4 	bl	8007f00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	61bb      	str	r3, [r7, #24]
 8007d9c:	e002      	b.n	8007da4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007da2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007da4:	69bb      	ldr	r3, [r7, #24]
	}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3720      	adds	r7, #32
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
 8007dbc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	21a5      	movs	r1, #165	@ 0xa5
 8007dca:	f001 ff56 	bl	8009c7a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	f023 0307 	bic.w	r3, r3, #7
 8007de6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	f003 0307 	and.w	r3, r3, #7
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00b      	beq.n	8007e0a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	617b      	str	r3, [r7, #20]
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop
 8007e08:	e7fd      	b.n	8007e06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d01f      	beq.n	8007e50 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e10:	2300      	movs	r3, #0
 8007e12:	61fb      	str	r3, [r7, #28]
 8007e14:	e012      	b.n	8007e3c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	7819      	ldrb	r1, [r3, #0]
 8007e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	4413      	add	r3, r2
 8007e24:	3334      	adds	r3, #52	@ 0x34
 8007e26:	460a      	mov	r2, r1
 8007e28:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	4413      	add	r3, r2
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d006      	beq.n	8007e44 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	61fb      	str	r3, [r7, #28]
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	2b0f      	cmp	r3, #15
 8007e40:	d9e9      	bls.n	8007e16 <prvInitialiseNewTask+0x66>
 8007e42:	e000      	b.n	8007e46 <prvInitialiseNewTask+0x96>
			{
				break;
 8007e44:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e4e:	e003      	b.n	8007e58 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e5a:	2b37      	cmp	r3, #55	@ 0x37
 8007e5c:	d901      	bls.n	8007e62 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e5e:	2337      	movs	r3, #55	@ 0x37
 8007e60:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e66:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e6c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e70:	2200      	movs	r2, #0
 8007e72:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e76:	3304      	adds	r3, #4
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7ff f965 	bl	8007148 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e80:	3318      	adds	r3, #24
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7ff f960 	bl	8007148 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e90:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e9c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb0:	3354      	adds	r3, #84	@ 0x54
 8007eb2:	224c      	movs	r2, #76	@ 0x4c
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f001 fedf 	bl	8009c7a <memset>
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8007ef4 <prvInitialiseNewTask+0x144>)
 8007ec0:	659a      	str	r2, [r3, #88]	@ 0x58
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec4:	4a0c      	ldr	r2, [pc, #48]	@ (8007ef8 <prvInitialiseNewTask+0x148>)
 8007ec6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eca:	4a0c      	ldr	r2, [pc, #48]	@ (8007efc <prvInitialiseNewTask+0x14c>)
 8007ecc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	68f9      	ldr	r1, [r7, #12]
 8007ed2:	69b8      	ldr	r0, [r7, #24]
 8007ed4:	f001 f95a 	bl	800918c <pxPortInitialiseStack>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007edc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ee8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007eea:	bf00      	nop
 8007eec:	3720      	adds	r7, #32
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20004ddc 	.word	0x20004ddc
 8007ef8:	20004e44 	.word	0x20004e44
 8007efc:	20004eac 	.word	0x20004eac

08007f00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f08:	f001 fa6e 	bl	80093e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8007fc4 <prvAddNewTaskToReadyList+0xc4>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3301      	adds	r3, #1
 8007f12:	4a2c      	ldr	r2, [pc, #176]	@ (8007fc4 <prvAddNewTaskToReadyList+0xc4>)
 8007f14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f16:	4b2c      	ldr	r3, [pc, #176]	@ (8007fc8 <prvAddNewTaskToReadyList+0xc8>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d109      	bne.n	8007f32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8007fc8 <prvAddNewTaskToReadyList+0xc8>)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f24:	4b27      	ldr	r3, [pc, #156]	@ (8007fc4 <prvAddNewTaskToReadyList+0xc4>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d110      	bne.n	8007f4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f2c:	f000 fc2e 	bl	800878c <prvInitialiseTaskLists>
 8007f30:	e00d      	b.n	8007f4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f32:	4b26      	ldr	r3, [pc, #152]	@ (8007fcc <prvAddNewTaskToReadyList+0xcc>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d109      	bne.n	8007f4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f3a:	4b23      	ldr	r3, [pc, #140]	@ (8007fc8 <prvAddNewTaskToReadyList+0xc8>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d802      	bhi.n	8007f4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f48:	4a1f      	ldr	r2, [pc, #124]	@ (8007fc8 <prvAddNewTaskToReadyList+0xc8>)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f4e:	4b20      	ldr	r3, [pc, #128]	@ (8007fd0 <prvAddNewTaskToReadyList+0xd0>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3301      	adds	r3, #1
 8007f54:	4a1e      	ldr	r2, [pc, #120]	@ (8007fd0 <prvAddNewTaskToReadyList+0xd0>)
 8007f56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f58:	4b1d      	ldr	r3, [pc, #116]	@ (8007fd0 <prvAddNewTaskToReadyList+0xd0>)
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f64:	4b1b      	ldr	r3, [pc, #108]	@ (8007fd4 <prvAddNewTaskToReadyList+0xd4>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d903      	bls.n	8007f74 <prvAddNewTaskToReadyList+0x74>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f70:	4a18      	ldr	r2, [pc, #96]	@ (8007fd4 <prvAddNewTaskToReadyList+0xd4>)
 8007f72:	6013      	str	r3, [r2, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f78:	4613      	mov	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4a15      	ldr	r2, [pc, #84]	@ (8007fd8 <prvAddNewTaskToReadyList+0xd8>)
 8007f82:	441a      	add	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	3304      	adds	r3, #4
 8007f88:	4619      	mov	r1, r3
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	f7ff f8e9 	bl	8007162 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f90:	f001 fa5c 	bl	800944c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f94:	4b0d      	ldr	r3, [pc, #52]	@ (8007fcc <prvAddNewTaskToReadyList+0xcc>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00e      	beq.n	8007fba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc8 <prvAddNewTaskToReadyList+0xc8>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d207      	bcs.n	8007fba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007faa:	4b0c      	ldr	r3, [pc, #48]	@ (8007fdc <prvAddNewTaskToReadyList+0xdc>)
 8007fac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fba:	bf00      	nop
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	2000105c 	.word	0x2000105c
 8007fc8:	20000b88 	.word	0x20000b88
 8007fcc:	20001068 	.word	0x20001068
 8007fd0:	20001078 	.word	0x20001078
 8007fd4:	20001064 	.word	0x20001064
 8007fd8:	20000b8c 	.word	0x20000b8c
 8007fdc:	e000ed04 	.word	0xe000ed04

08007fe0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d018      	beq.n	8008024 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ff2:	4b14      	ldr	r3, [pc, #80]	@ (8008044 <vTaskDelay+0x64>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00b      	beq.n	8008012 <vTaskDelay+0x32>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	60bb      	str	r3, [r7, #8]
}
 800800c:	bf00      	nop
 800800e:	bf00      	nop
 8008010:	e7fd      	b.n	800800e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008012:	f000 f88b 	bl	800812c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008016:	2100      	movs	r1, #0
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fd09 	bl	8008a30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800801e:	f000 f893 	bl	8008148 <xTaskResumeAll>
 8008022:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d107      	bne.n	800803a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800802a:	4b07      	ldr	r3, [pc, #28]	@ (8008048 <vTaskDelay+0x68>)
 800802c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800803a:	bf00      	nop
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20001084 	.word	0x20001084
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b08a      	sub	sp, #40	@ 0x28
 8008050:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008052:	2300      	movs	r3, #0
 8008054:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008056:	2300      	movs	r3, #0
 8008058:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800805a:	463a      	mov	r2, r7
 800805c:	1d39      	adds	r1, r7, #4
 800805e:	f107 0308 	add.w	r3, r7, #8
 8008062:	4618      	mov	r0, r3
 8008064:	f7ff f81c 	bl	80070a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	9202      	str	r2, [sp, #8]
 8008070:	9301      	str	r3, [sp, #4]
 8008072:	2300      	movs	r3, #0
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	2300      	movs	r3, #0
 8008078:	460a      	mov	r2, r1
 800807a:	4924      	ldr	r1, [pc, #144]	@ (800810c <vTaskStartScheduler+0xc0>)
 800807c:	4824      	ldr	r0, [pc, #144]	@ (8008110 <vTaskStartScheduler+0xc4>)
 800807e:	f7ff fdf1 	bl	8007c64 <xTaskCreateStatic>
 8008082:	4603      	mov	r3, r0
 8008084:	4a23      	ldr	r2, [pc, #140]	@ (8008114 <vTaskStartScheduler+0xc8>)
 8008086:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008088:	4b22      	ldr	r3, [pc, #136]	@ (8008114 <vTaskStartScheduler+0xc8>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008090:	2301      	movs	r3, #1
 8008092:	617b      	str	r3, [r7, #20]
 8008094:	e001      	b.n	800809a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008096:	2300      	movs	r3, #0
 8008098:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d102      	bne.n	80080a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80080a0:	f000 fd1a 	bl	8008ad8 <xTimerCreateTimerTask>
 80080a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d11b      	bne.n	80080e4 <vTaskStartScheduler+0x98>
	__asm volatile
 80080ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	613b      	str	r3, [r7, #16]
}
 80080be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080c0:	4b15      	ldr	r3, [pc, #84]	@ (8008118 <vTaskStartScheduler+0xcc>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3354      	adds	r3, #84	@ 0x54
 80080c6:	4a15      	ldr	r2, [pc, #84]	@ (800811c <vTaskStartScheduler+0xd0>)
 80080c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80080ca:	4b15      	ldr	r3, [pc, #84]	@ (8008120 <vTaskStartScheduler+0xd4>)
 80080cc:	f04f 32ff 	mov.w	r2, #4294967295
 80080d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080d2:	4b14      	ldr	r3, [pc, #80]	@ (8008124 <vTaskStartScheduler+0xd8>)
 80080d4:	2201      	movs	r2, #1
 80080d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080d8:	4b13      	ldr	r3, [pc, #76]	@ (8008128 <vTaskStartScheduler+0xdc>)
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080de:	f001 f8df 	bl	80092a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080e2:	e00f      	b.n	8008104 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ea:	d10b      	bne.n	8008104 <vTaskStartScheduler+0xb8>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	60fb      	str	r3, [r7, #12]
}
 80080fe:	bf00      	nop
 8008100:	bf00      	nop
 8008102:	e7fd      	b.n	8008100 <vTaskStartScheduler+0xb4>
}
 8008104:	bf00      	nop
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	0800adc8 	.word	0x0800adc8
 8008110:	0800875d 	.word	0x0800875d
 8008114:	20001080 	.word	0x20001080
 8008118:	20000b88 	.word	0x20000b88
 800811c:	20000074 	.word	0x20000074
 8008120:	2000107c 	.word	0x2000107c
 8008124:	20001068 	.word	0x20001068
 8008128:	20001060 	.word	0x20001060

0800812c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800812c:	b480      	push	{r7}
 800812e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008130:	4b04      	ldr	r3, [pc, #16]	@ (8008144 <vTaskSuspendAll+0x18>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3301      	adds	r3, #1
 8008136:	4a03      	ldr	r2, [pc, #12]	@ (8008144 <vTaskSuspendAll+0x18>)
 8008138:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800813a:	bf00      	nop
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	20001084 	.word	0x20001084

08008148 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008152:	2300      	movs	r3, #0
 8008154:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008156:	4b42      	ldr	r3, [pc, #264]	@ (8008260 <xTaskResumeAll+0x118>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10b      	bne.n	8008176 <xTaskResumeAll+0x2e>
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	603b      	str	r3, [r7, #0]
}
 8008170:	bf00      	nop
 8008172:	bf00      	nop
 8008174:	e7fd      	b.n	8008172 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008176:	f001 f937 	bl	80093e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800817a:	4b39      	ldr	r3, [pc, #228]	@ (8008260 <xTaskResumeAll+0x118>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3b01      	subs	r3, #1
 8008180:	4a37      	ldr	r2, [pc, #220]	@ (8008260 <xTaskResumeAll+0x118>)
 8008182:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008184:	4b36      	ldr	r3, [pc, #216]	@ (8008260 <xTaskResumeAll+0x118>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d162      	bne.n	8008252 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800818c:	4b35      	ldr	r3, [pc, #212]	@ (8008264 <xTaskResumeAll+0x11c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d05e      	beq.n	8008252 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008194:	e02f      	b.n	80081f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008196:	4b34      	ldr	r3, [pc, #208]	@ (8008268 <xTaskResumeAll+0x120>)
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	3318      	adds	r3, #24
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7ff f83a 	bl	800721c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3304      	adds	r3, #4
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7ff f835 	bl	800721c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081b6:	4b2d      	ldr	r3, [pc, #180]	@ (800826c <xTaskResumeAll+0x124>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d903      	bls.n	80081c6 <xTaskResumeAll+0x7e>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c2:	4a2a      	ldr	r2, [pc, #168]	@ (800826c <xTaskResumeAll+0x124>)
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ca:	4613      	mov	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4a27      	ldr	r2, [pc, #156]	@ (8008270 <xTaskResumeAll+0x128>)
 80081d4:	441a      	add	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3304      	adds	r3, #4
 80081da:	4619      	mov	r1, r3
 80081dc:	4610      	mov	r0, r2
 80081de:	f7fe ffc0 	bl	8007162 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081e6:	4b23      	ldr	r3, [pc, #140]	@ (8008274 <xTaskResumeAll+0x12c>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d302      	bcc.n	80081f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80081f0:	4b21      	ldr	r3, [pc, #132]	@ (8008278 <xTaskResumeAll+0x130>)
 80081f2:	2201      	movs	r2, #1
 80081f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081f6:	4b1c      	ldr	r3, [pc, #112]	@ (8008268 <xTaskResumeAll+0x120>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1cb      	bne.n	8008196 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008204:	f000 fb66 	bl	80088d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008208:	4b1c      	ldr	r3, [pc, #112]	@ (800827c <xTaskResumeAll+0x134>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d010      	beq.n	8008236 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008214:	f000 f846 	bl	80082a4 <xTaskIncrementTick>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d002      	beq.n	8008224 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800821e:	4b16      	ldr	r3, [pc, #88]	@ (8008278 <xTaskResumeAll+0x130>)
 8008220:	2201      	movs	r2, #1
 8008222:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	3b01      	subs	r3, #1
 8008228:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1f1      	bne.n	8008214 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008230:	4b12      	ldr	r3, [pc, #72]	@ (800827c <xTaskResumeAll+0x134>)
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008236:	4b10      	ldr	r3, [pc, #64]	@ (8008278 <xTaskResumeAll+0x130>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d009      	beq.n	8008252 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800823e:	2301      	movs	r3, #1
 8008240:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008242:	4b0f      	ldr	r3, [pc, #60]	@ (8008280 <xTaskResumeAll+0x138>)
 8008244:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008248:	601a      	str	r2, [r3, #0]
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008252:	f001 f8fb 	bl	800944c <vPortExitCritical>

	return xAlreadyYielded;
 8008256:	68bb      	ldr	r3, [r7, #8]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	20001084 	.word	0x20001084
 8008264:	2000105c 	.word	0x2000105c
 8008268:	2000101c 	.word	0x2000101c
 800826c:	20001064 	.word	0x20001064
 8008270:	20000b8c 	.word	0x20000b8c
 8008274:	20000b88 	.word	0x20000b88
 8008278:	20001070 	.word	0x20001070
 800827c:	2000106c 	.word	0x2000106c
 8008280:	e000ed04 	.word	0xe000ed04

08008284 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800828a:	4b05      	ldr	r3, [pc, #20]	@ (80082a0 <xTaskGetTickCount+0x1c>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008290:	687b      	ldr	r3, [r7, #4]
}
 8008292:	4618      	mov	r0, r3
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	20001060 	.word	0x20001060

080082a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082aa:	2300      	movs	r3, #0
 80082ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ae:	4b4f      	ldr	r3, [pc, #316]	@ (80083ec <xTaskIncrementTick+0x148>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f040 8090 	bne.w	80083d8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082b8:	4b4d      	ldr	r3, [pc, #308]	@ (80083f0 <xTaskIncrementTick+0x14c>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	3301      	adds	r3, #1
 80082be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082c0:	4a4b      	ldr	r2, [pc, #300]	@ (80083f0 <xTaskIncrementTick+0x14c>)
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d121      	bne.n	8008310 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80082cc:	4b49      	ldr	r3, [pc, #292]	@ (80083f4 <xTaskIncrementTick+0x150>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00b      	beq.n	80082ee <xTaskIncrementTick+0x4a>
	__asm volatile
 80082d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	603b      	str	r3, [r7, #0]
}
 80082e8:	bf00      	nop
 80082ea:	bf00      	nop
 80082ec:	e7fd      	b.n	80082ea <xTaskIncrementTick+0x46>
 80082ee:	4b41      	ldr	r3, [pc, #260]	@ (80083f4 <xTaskIncrementTick+0x150>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	4b40      	ldr	r3, [pc, #256]	@ (80083f8 <xTaskIncrementTick+0x154>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a3e      	ldr	r2, [pc, #248]	@ (80083f4 <xTaskIncrementTick+0x150>)
 80082fa:	6013      	str	r3, [r2, #0]
 80082fc:	4a3e      	ldr	r2, [pc, #248]	@ (80083f8 <xTaskIncrementTick+0x154>)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6013      	str	r3, [r2, #0]
 8008302:	4b3e      	ldr	r3, [pc, #248]	@ (80083fc <xTaskIncrementTick+0x158>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3301      	adds	r3, #1
 8008308:	4a3c      	ldr	r2, [pc, #240]	@ (80083fc <xTaskIncrementTick+0x158>)
 800830a:	6013      	str	r3, [r2, #0]
 800830c:	f000 fae2 	bl	80088d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008310:	4b3b      	ldr	r3, [pc, #236]	@ (8008400 <xTaskIncrementTick+0x15c>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	429a      	cmp	r2, r3
 8008318:	d349      	bcc.n	80083ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800831a:	4b36      	ldr	r3, [pc, #216]	@ (80083f4 <xTaskIncrementTick+0x150>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d104      	bne.n	800832e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008324:	4b36      	ldr	r3, [pc, #216]	@ (8008400 <xTaskIncrementTick+0x15c>)
 8008326:	f04f 32ff 	mov.w	r2, #4294967295
 800832a:	601a      	str	r2, [r3, #0]
					break;
 800832c:	e03f      	b.n	80083ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800832e:	4b31      	ldr	r3, [pc, #196]	@ (80083f4 <xTaskIncrementTick+0x150>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	429a      	cmp	r2, r3
 8008344:	d203      	bcs.n	800834e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008346:	4a2e      	ldr	r2, [pc, #184]	@ (8008400 <xTaskIncrementTick+0x15c>)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800834c:	e02f      	b.n	80083ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	3304      	adds	r3, #4
 8008352:	4618      	mov	r0, r3
 8008354:	f7fe ff62 	bl	800721c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835c:	2b00      	cmp	r3, #0
 800835e:	d004      	beq.n	800836a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	3318      	adds	r3, #24
 8008364:	4618      	mov	r0, r3
 8008366:	f7fe ff59 	bl	800721c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800836e:	4b25      	ldr	r3, [pc, #148]	@ (8008404 <xTaskIncrementTick+0x160>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	429a      	cmp	r2, r3
 8008374:	d903      	bls.n	800837e <xTaskIncrementTick+0xda>
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800837a:	4a22      	ldr	r2, [pc, #136]	@ (8008404 <xTaskIncrementTick+0x160>)
 800837c:	6013      	str	r3, [r2, #0]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008382:	4613      	mov	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4a1f      	ldr	r2, [pc, #124]	@ (8008408 <xTaskIncrementTick+0x164>)
 800838c:	441a      	add	r2, r3
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	3304      	adds	r3, #4
 8008392:	4619      	mov	r1, r3
 8008394:	4610      	mov	r0, r2
 8008396:	f7fe fee4 	bl	8007162 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800839e:	4b1b      	ldr	r3, [pc, #108]	@ (800840c <xTaskIncrementTick+0x168>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d3b8      	bcc.n	800831a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80083a8:	2301      	movs	r3, #1
 80083aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083ac:	e7b5      	b.n	800831a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083ae:	4b17      	ldr	r3, [pc, #92]	@ (800840c <xTaskIncrementTick+0x168>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083b4:	4914      	ldr	r1, [pc, #80]	@ (8008408 <xTaskIncrementTick+0x164>)
 80083b6:	4613      	mov	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4413      	add	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	440b      	add	r3, r1
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d901      	bls.n	80083ca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80083c6:	2301      	movs	r3, #1
 80083c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80083ca:	4b11      	ldr	r3, [pc, #68]	@ (8008410 <xTaskIncrementTick+0x16c>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d007      	beq.n	80083e2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80083d2:	2301      	movs	r3, #1
 80083d4:	617b      	str	r3, [r7, #20]
 80083d6:	e004      	b.n	80083e2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80083d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008414 <xTaskIncrementTick+0x170>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3301      	adds	r3, #1
 80083de:	4a0d      	ldr	r2, [pc, #52]	@ (8008414 <xTaskIncrementTick+0x170>)
 80083e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80083e2:	697b      	ldr	r3, [r7, #20]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3718      	adds	r7, #24
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	20001084 	.word	0x20001084
 80083f0:	20001060 	.word	0x20001060
 80083f4:	20001014 	.word	0x20001014
 80083f8:	20001018 	.word	0x20001018
 80083fc:	20001074 	.word	0x20001074
 8008400:	2000107c 	.word	0x2000107c
 8008404:	20001064 	.word	0x20001064
 8008408:	20000b8c 	.word	0x20000b8c
 800840c:	20000b88 	.word	0x20000b88
 8008410:	20001070 	.word	0x20001070
 8008414:	2000106c 	.word	0x2000106c

08008418 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800841e:	4b2b      	ldr	r3, [pc, #172]	@ (80084cc <vTaskSwitchContext+0xb4>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008426:	4b2a      	ldr	r3, [pc, #168]	@ (80084d0 <vTaskSwitchContext+0xb8>)
 8008428:	2201      	movs	r2, #1
 800842a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800842c:	e047      	b.n	80084be <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800842e:	4b28      	ldr	r3, [pc, #160]	@ (80084d0 <vTaskSwitchContext+0xb8>)
 8008430:	2200      	movs	r2, #0
 8008432:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008434:	4b27      	ldr	r3, [pc, #156]	@ (80084d4 <vTaskSwitchContext+0xbc>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60fb      	str	r3, [r7, #12]
 800843a:	e011      	b.n	8008460 <vTaskSwitchContext+0x48>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10b      	bne.n	800845a <vTaskSwitchContext+0x42>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	607b      	str	r3, [r7, #4]
}
 8008454:	bf00      	nop
 8008456:	bf00      	nop
 8008458:	e7fd      	b.n	8008456 <vTaskSwitchContext+0x3e>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3b01      	subs	r3, #1
 800845e:	60fb      	str	r3, [r7, #12]
 8008460:	491d      	ldr	r1, [pc, #116]	@ (80084d8 <vTaskSwitchContext+0xc0>)
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	4613      	mov	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	440b      	add	r3, r1
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d0e3      	beq.n	800843c <vTaskSwitchContext+0x24>
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	4613      	mov	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4a16      	ldr	r2, [pc, #88]	@ (80084d8 <vTaskSwitchContext+0xc0>)
 8008480:	4413      	add	r3, r2
 8008482:	60bb      	str	r3, [r7, #8]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	605a      	str	r2, [r3, #4]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	685a      	ldr	r2, [r3, #4]
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	3308      	adds	r3, #8
 8008496:	429a      	cmp	r2, r3
 8008498:	d104      	bne.n	80084a4 <vTaskSwitchContext+0x8c>
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	685a      	ldr	r2, [r3, #4]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	605a      	str	r2, [r3, #4]
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	4a0c      	ldr	r2, [pc, #48]	@ (80084dc <vTaskSwitchContext+0xc4>)
 80084ac:	6013      	str	r3, [r2, #0]
 80084ae:	4a09      	ldr	r2, [pc, #36]	@ (80084d4 <vTaskSwitchContext+0xbc>)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80084b4:	4b09      	ldr	r3, [pc, #36]	@ (80084dc <vTaskSwitchContext+0xc4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3354      	adds	r3, #84	@ 0x54
 80084ba:	4a09      	ldr	r2, [pc, #36]	@ (80084e0 <vTaskSwitchContext+0xc8>)
 80084bc:	6013      	str	r3, [r2, #0]
}
 80084be:	bf00      	nop
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	20001084 	.word	0x20001084
 80084d0:	20001070 	.word	0x20001070
 80084d4:	20001064 	.word	0x20001064
 80084d8:	20000b8c 	.word	0x20000b8c
 80084dc:	20000b88 	.word	0x20000b88
 80084e0:	20000074 	.word	0x20000074

080084e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10b      	bne.n	800850c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	60fb      	str	r3, [r7, #12]
}
 8008506:	bf00      	nop
 8008508:	bf00      	nop
 800850a:	e7fd      	b.n	8008508 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800850c:	4b07      	ldr	r3, [pc, #28]	@ (800852c <vTaskPlaceOnEventList+0x48>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3318      	adds	r3, #24
 8008512:	4619      	mov	r1, r3
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7fe fe48 	bl	80071aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800851a:	2101      	movs	r1, #1
 800851c:	6838      	ldr	r0, [r7, #0]
 800851e:	f000 fa87 	bl	8008a30 <prvAddCurrentTaskToDelayedList>
}
 8008522:	bf00      	nop
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20000b88 	.word	0x20000b88

08008530 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10b      	bne.n	800855a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008546:	f383 8811 	msr	BASEPRI, r3
 800854a:	f3bf 8f6f 	isb	sy
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	617b      	str	r3, [r7, #20]
}
 8008554:	bf00      	nop
 8008556:	bf00      	nop
 8008558:	e7fd      	b.n	8008556 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800855a:	4b0a      	ldr	r3, [pc, #40]	@ (8008584 <vTaskPlaceOnEventListRestricted+0x54>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3318      	adds	r3, #24
 8008560:	4619      	mov	r1, r3
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f7fe fdfd 	bl	8007162 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d002      	beq.n	8008574 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800856e:	f04f 33ff 	mov.w	r3, #4294967295
 8008572:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008574:	6879      	ldr	r1, [r7, #4]
 8008576:	68b8      	ldr	r0, [r7, #8]
 8008578:	f000 fa5a 	bl	8008a30 <prvAddCurrentTaskToDelayedList>
	}
 800857c:	bf00      	nop
 800857e:	3718      	adds	r7, #24
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	20000b88 	.word	0x20000b88

08008588 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10b      	bne.n	80085b6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	60fb      	str	r3, [r7, #12]
}
 80085b0:	bf00      	nop
 80085b2:	bf00      	nop
 80085b4:	e7fd      	b.n	80085b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	3318      	adds	r3, #24
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fe fe2e 	bl	800721c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008638 <xTaskRemoveFromEventList+0xb0>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d11d      	bne.n	8008604 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	3304      	adds	r3, #4
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7fe fe25 	bl	800721c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085d6:	4b19      	ldr	r3, [pc, #100]	@ (800863c <xTaskRemoveFromEventList+0xb4>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d903      	bls.n	80085e6 <xTaskRemoveFromEventList+0x5e>
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e2:	4a16      	ldr	r2, [pc, #88]	@ (800863c <xTaskRemoveFromEventList+0xb4>)
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ea:	4613      	mov	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4a13      	ldr	r2, [pc, #76]	@ (8008640 <xTaskRemoveFromEventList+0xb8>)
 80085f4:	441a      	add	r2, r3
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	3304      	adds	r3, #4
 80085fa:	4619      	mov	r1, r3
 80085fc:	4610      	mov	r0, r2
 80085fe:	f7fe fdb0 	bl	8007162 <vListInsertEnd>
 8008602:	e005      	b.n	8008610 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	3318      	adds	r3, #24
 8008608:	4619      	mov	r1, r3
 800860a:	480e      	ldr	r0, [pc, #56]	@ (8008644 <xTaskRemoveFromEventList+0xbc>)
 800860c:	f7fe fda9 	bl	8007162 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008614:	4b0c      	ldr	r3, [pc, #48]	@ (8008648 <xTaskRemoveFromEventList+0xc0>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861a:	429a      	cmp	r2, r3
 800861c:	d905      	bls.n	800862a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800861e:	2301      	movs	r3, #1
 8008620:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008622:	4b0a      	ldr	r3, [pc, #40]	@ (800864c <xTaskRemoveFromEventList+0xc4>)
 8008624:	2201      	movs	r2, #1
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	e001      	b.n	800862e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800862a:	2300      	movs	r3, #0
 800862c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800862e:	697b      	ldr	r3, [r7, #20]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	20001084 	.word	0x20001084
 800863c:	20001064 	.word	0x20001064
 8008640:	20000b8c 	.word	0x20000b8c
 8008644:	2000101c 	.word	0x2000101c
 8008648:	20000b88 	.word	0x20000b88
 800864c:	20001070 	.word	0x20001070

08008650 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008658:	4b06      	ldr	r3, [pc, #24]	@ (8008674 <vTaskInternalSetTimeOutState+0x24>)
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008660:	4b05      	ldr	r3, [pc, #20]	@ (8008678 <vTaskInternalSetTimeOutState+0x28>)
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	605a      	str	r2, [r3, #4]
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr
 8008674:	20001074 	.word	0x20001074
 8008678:	20001060 	.word	0x20001060

0800867c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b088      	sub	sp, #32
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10b      	bne.n	80086a4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	613b      	str	r3, [r7, #16]
}
 800869e:	bf00      	nop
 80086a0:	bf00      	nop
 80086a2:	e7fd      	b.n	80086a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10b      	bne.n	80086c2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	60fb      	str	r3, [r7, #12]
}
 80086bc:	bf00      	nop
 80086be:	bf00      	nop
 80086c0:	e7fd      	b.n	80086be <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80086c2:	f000 fe91 	bl	80093e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80086c6:	4b1d      	ldr	r3, [pc, #116]	@ (800873c <xTaskCheckForTimeOut+0xc0>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086de:	d102      	bne.n	80086e6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086e0:	2300      	movs	r3, #0
 80086e2:	61fb      	str	r3, [r7, #28]
 80086e4:	e023      	b.n	800872e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	4b15      	ldr	r3, [pc, #84]	@ (8008740 <xTaskCheckForTimeOut+0xc4>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d007      	beq.n	8008702 <xTaskCheckForTimeOut+0x86>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d302      	bcc.n	8008702 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80086fc:	2301      	movs	r3, #1
 80086fe:	61fb      	str	r3, [r7, #28]
 8008700:	e015      	b.n	800872e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	429a      	cmp	r2, r3
 800870a:	d20b      	bcs.n	8008724 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	1ad2      	subs	r2, r2, r3
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff ff99 	bl	8008650 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800871e:	2300      	movs	r3, #0
 8008720:	61fb      	str	r3, [r7, #28]
 8008722:	e004      	b.n	800872e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2200      	movs	r2, #0
 8008728:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800872a:	2301      	movs	r3, #1
 800872c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800872e:	f000 fe8d 	bl	800944c <vPortExitCritical>

	return xReturn;
 8008732:	69fb      	ldr	r3, [r7, #28]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3720      	adds	r7, #32
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	20001060 	.word	0x20001060
 8008740:	20001074 	.word	0x20001074

08008744 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008744:	b480      	push	{r7}
 8008746:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008748:	4b03      	ldr	r3, [pc, #12]	@ (8008758 <vTaskMissedYield+0x14>)
 800874a:	2201      	movs	r2, #1
 800874c:	601a      	str	r2, [r3, #0]
}
 800874e:	bf00      	nop
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	20001070 	.word	0x20001070

0800875c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008764:	f000 f852 	bl	800880c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008768:	4b06      	ldr	r3, [pc, #24]	@ (8008784 <prvIdleTask+0x28>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d9f9      	bls.n	8008764 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008770:	4b05      	ldr	r3, [pc, #20]	@ (8008788 <prvIdleTask+0x2c>)
 8008772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008780:	e7f0      	b.n	8008764 <prvIdleTask+0x8>
 8008782:	bf00      	nop
 8008784:	20000b8c 	.word	0x20000b8c
 8008788:	e000ed04 	.word	0xe000ed04

0800878c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008792:	2300      	movs	r3, #0
 8008794:	607b      	str	r3, [r7, #4]
 8008796:	e00c      	b.n	80087b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	4613      	mov	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4a12      	ldr	r2, [pc, #72]	@ (80087ec <prvInitialiseTaskLists+0x60>)
 80087a4:	4413      	add	r3, r2
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fe fcae 	bl	8007108 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	3301      	adds	r3, #1
 80087b0:	607b      	str	r3, [r7, #4]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b37      	cmp	r3, #55	@ 0x37
 80087b6:	d9ef      	bls.n	8008798 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087b8:	480d      	ldr	r0, [pc, #52]	@ (80087f0 <prvInitialiseTaskLists+0x64>)
 80087ba:	f7fe fca5 	bl	8007108 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087be:	480d      	ldr	r0, [pc, #52]	@ (80087f4 <prvInitialiseTaskLists+0x68>)
 80087c0:	f7fe fca2 	bl	8007108 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087c4:	480c      	ldr	r0, [pc, #48]	@ (80087f8 <prvInitialiseTaskLists+0x6c>)
 80087c6:	f7fe fc9f 	bl	8007108 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087ca:	480c      	ldr	r0, [pc, #48]	@ (80087fc <prvInitialiseTaskLists+0x70>)
 80087cc:	f7fe fc9c 	bl	8007108 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087d0:	480b      	ldr	r0, [pc, #44]	@ (8008800 <prvInitialiseTaskLists+0x74>)
 80087d2:	f7fe fc99 	bl	8007108 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008804 <prvInitialiseTaskLists+0x78>)
 80087d8:	4a05      	ldr	r2, [pc, #20]	@ (80087f0 <prvInitialiseTaskLists+0x64>)
 80087da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008808 <prvInitialiseTaskLists+0x7c>)
 80087de:	4a05      	ldr	r2, [pc, #20]	@ (80087f4 <prvInitialiseTaskLists+0x68>)
 80087e0:	601a      	str	r2, [r3, #0]
}
 80087e2:	bf00      	nop
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20000b8c 	.word	0x20000b8c
 80087f0:	20000fec 	.word	0x20000fec
 80087f4:	20001000 	.word	0x20001000
 80087f8:	2000101c 	.word	0x2000101c
 80087fc:	20001030 	.word	0x20001030
 8008800:	20001048 	.word	0x20001048
 8008804:	20001014 	.word	0x20001014
 8008808:	20001018 	.word	0x20001018

0800880c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008812:	e019      	b.n	8008848 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008814:	f000 fde8 	bl	80093e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008818:	4b10      	ldr	r3, [pc, #64]	@ (800885c <prvCheckTasksWaitingTermination+0x50>)
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3304      	adds	r3, #4
 8008824:	4618      	mov	r0, r3
 8008826:	f7fe fcf9 	bl	800721c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800882a:	4b0d      	ldr	r3, [pc, #52]	@ (8008860 <prvCheckTasksWaitingTermination+0x54>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3b01      	subs	r3, #1
 8008830:	4a0b      	ldr	r2, [pc, #44]	@ (8008860 <prvCheckTasksWaitingTermination+0x54>)
 8008832:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008834:	4b0b      	ldr	r3, [pc, #44]	@ (8008864 <prvCheckTasksWaitingTermination+0x58>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3b01      	subs	r3, #1
 800883a:	4a0a      	ldr	r2, [pc, #40]	@ (8008864 <prvCheckTasksWaitingTermination+0x58>)
 800883c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800883e:	f000 fe05 	bl	800944c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f810 	bl	8008868 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008848:	4b06      	ldr	r3, [pc, #24]	@ (8008864 <prvCheckTasksWaitingTermination+0x58>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1e1      	bne.n	8008814 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008850:	bf00      	nop
 8008852:	bf00      	nop
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	20001030 	.word	0x20001030
 8008860:	2000105c 	.word	0x2000105c
 8008864:	20001044 	.word	0x20001044

08008868 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	3354      	adds	r3, #84	@ 0x54
 8008874:	4618      	mov	r0, r3
 8008876:	f001 fa19 	bl	8009cac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008880:	2b00      	cmp	r3, #0
 8008882:	d108      	bne.n	8008896 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008888:	4618      	mov	r0, r3
 800888a:	f000 ff9d 	bl	80097c8 <vPortFree>
				vPortFree( pxTCB );
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 ff9a 	bl	80097c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008894:	e019      	b.n	80088ca <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800889c:	2b01      	cmp	r3, #1
 800889e:	d103      	bne.n	80088a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 ff91 	bl	80097c8 <vPortFree>
	}
 80088a6:	e010      	b.n	80088ca <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d00b      	beq.n	80088ca <prvDeleteTCB+0x62>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	60fb      	str	r3, [r7, #12]
}
 80088c4:	bf00      	nop
 80088c6:	bf00      	nop
 80088c8:	e7fd      	b.n	80088c6 <prvDeleteTCB+0x5e>
	}
 80088ca:	bf00      	nop
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
	...

080088d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088da:	4b0c      	ldr	r3, [pc, #48]	@ (800890c <prvResetNextTaskUnblockTime+0x38>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d104      	bne.n	80088ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008910 <prvResetNextTaskUnblockTime+0x3c>)
 80088e6:	f04f 32ff 	mov.w	r2, #4294967295
 80088ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088ec:	e008      	b.n	8008900 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ee:	4b07      	ldr	r3, [pc, #28]	@ (800890c <prvResetNextTaskUnblockTime+0x38>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	4a04      	ldr	r2, [pc, #16]	@ (8008910 <prvResetNextTaskUnblockTime+0x3c>)
 80088fe:	6013      	str	r3, [r2, #0]
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	20001014 	.word	0x20001014
 8008910:	2000107c 	.word	0x2000107c

08008914 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800891a:	4b0b      	ldr	r3, [pc, #44]	@ (8008948 <xTaskGetSchedulerState+0x34>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d102      	bne.n	8008928 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008922:	2301      	movs	r3, #1
 8008924:	607b      	str	r3, [r7, #4]
 8008926:	e008      	b.n	800893a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008928:	4b08      	ldr	r3, [pc, #32]	@ (800894c <xTaskGetSchedulerState+0x38>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d102      	bne.n	8008936 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008930:	2302      	movs	r3, #2
 8008932:	607b      	str	r3, [r7, #4]
 8008934:	e001      	b.n	800893a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008936:	2300      	movs	r3, #0
 8008938:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800893a:	687b      	ldr	r3, [r7, #4]
	}
 800893c:	4618      	mov	r0, r3
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	20001068 	.word	0x20001068
 800894c:	20001084 	.word	0x20001084

08008950 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800895c:	2300      	movs	r3, #0
 800895e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d058      	beq.n	8008a18 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008966:	4b2f      	ldr	r3, [pc, #188]	@ (8008a24 <xTaskPriorityDisinherit+0xd4>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	429a      	cmp	r2, r3
 800896e:	d00b      	beq.n	8008988 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	60fb      	str	r3, [r7, #12]
}
 8008982:	bf00      	nop
 8008984:	bf00      	nop
 8008986:	e7fd      	b.n	8008984 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10b      	bne.n	80089a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	60bb      	str	r3, [r7, #8]
}
 80089a2:	bf00      	nop
 80089a4:	bf00      	nop
 80089a6:	e7fd      	b.n	80089a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ac:	1e5a      	subs	r2, r3, #1
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d02c      	beq.n	8008a18 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d128      	bne.n	8008a18 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	3304      	adds	r3, #4
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fe fc26 	bl	800721c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089e8:	4b0f      	ldr	r3, [pc, #60]	@ (8008a28 <xTaskPriorityDisinherit+0xd8>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d903      	bls.n	80089f8 <xTaskPriorityDisinherit+0xa8>
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f4:	4a0c      	ldr	r2, [pc, #48]	@ (8008a28 <xTaskPriorityDisinherit+0xd8>)
 80089f6:	6013      	str	r3, [r2, #0]
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089fc:	4613      	mov	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	4413      	add	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4a09      	ldr	r2, [pc, #36]	@ (8008a2c <xTaskPriorityDisinherit+0xdc>)
 8008a06:	441a      	add	r2, r3
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	4610      	mov	r0, r2
 8008a10:	f7fe fba7 	bl	8007162 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a14:	2301      	movs	r3, #1
 8008a16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a18:	697b      	ldr	r3, [r7, #20]
	}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3718      	adds	r7, #24
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	20000b88 	.word	0x20000b88
 8008a28:	20001064 	.word	0x20001064
 8008a2c:	20000b8c 	.word	0x20000b8c

08008a30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a3a:	4b21      	ldr	r3, [pc, #132]	@ (8008ac0 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a40:	4b20      	ldr	r3, [pc, #128]	@ (8008ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3304      	adds	r3, #4
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe fbe8 	bl	800721c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a52:	d10a      	bne.n	8008a6a <prvAddCurrentTaskToDelayedList+0x3a>
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d007      	beq.n	8008a6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3304      	adds	r3, #4
 8008a60:	4619      	mov	r1, r3
 8008a62:	4819      	ldr	r0, [pc, #100]	@ (8008ac8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008a64:	f7fe fb7d 	bl	8007162 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a68:	e026      	b.n	8008ab8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4413      	add	r3, r2
 8008a70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a72:	4b14      	ldr	r3, [pc, #80]	@ (8008ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d209      	bcs.n	8008a96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a82:	4b12      	ldr	r3, [pc, #72]	@ (8008acc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	4b0f      	ldr	r3, [pc, #60]	@ (8008ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	4610      	mov	r0, r2
 8008a90:	f7fe fb8b 	bl	80071aa <vListInsert>
}
 8008a94:	e010      	b.n	8008ab8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a96:	4b0e      	ldr	r3, [pc, #56]	@ (8008ad0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8008ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	f7fe fb81 	bl	80071aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d202      	bcs.n	8008ab8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008ab2:	4a08      	ldr	r2, [pc, #32]	@ (8008ad4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	6013      	str	r3, [r2, #0]
}
 8008ab8:	bf00      	nop
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	20001060 	.word	0x20001060
 8008ac4:	20000b88 	.word	0x20000b88
 8008ac8:	20001048 	.word	0x20001048
 8008acc:	20001018 	.word	0x20001018
 8008ad0:	20001014 	.word	0x20001014
 8008ad4:	2000107c 	.word	0x2000107c

08008ad8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b08a      	sub	sp, #40	@ 0x28
 8008adc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008ae2:	f000 fb13 	bl	800910c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8008b5c <xTimerCreateTimerTask+0x84>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d021      	beq.n	8008b32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008aee:	2300      	movs	r3, #0
 8008af0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008af2:	2300      	movs	r3, #0
 8008af4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008af6:	1d3a      	adds	r2, r7, #4
 8008af8:	f107 0108 	add.w	r1, r7, #8
 8008afc:	f107 030c 	add.w	r3, r7, #12
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fe fae7 	bl	80070d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	9202      	str	r2, [sp, #8]
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	2302      	movs	r3, #2
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	2300      	movs	r3, #0
 8008b16:	460a      	mov	r2, r1
 8008b18:	4911      	ldr	r1, [pc, #68]	@ (8008b60 <xTimerCreateTimerTask+0x88>)
 8008b1a:	4812      	ldr	r0, [pc, #72]	@ (8008b64 <xTimerCreateTimerTask+0x8c>)
 8008b1c:	f7ff f8a2 	bl	8007c64 <xTaskCreateStatic>
 8008b20:	4603      	mov	r3, r0
 8008b22:	4a11      	ldr	r2, [pc, #68]	@ (8008b68 <xTimerCreateTimerTask+0x90>)
 8008b24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b26:	4b10      	ldr	r3, [pc, #64]	@ (8008b68 <xTimerCreateTimerTask+0x90>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d001      	beq.n	8008b32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10b      	bne.n	8008b50 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b3c:	f383 8811 	msr	BASEPRI, r3
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	613b      	str	r3, [r7, #16]
}
 8008b4a:	bf00      	nop
 8008b4c:	bf00      	nop
 8008b4e:	e7fd      	b.n	8008b4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008b50:	697b      	ldr	r3, [r7, #20]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3718      	adds	r7, #24
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	200010b8 	.word	0x200010b8
 8008b60:	0800add0 	.word	0x0800add0
 8008b64:	08008ca5 	.word	0x08008ca5
 8008b68:	200010bc 	.word	0x200010bc

08008b6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b08a      	sub	sp, #40	@ 0x28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10b      	bne.n	8008b9c <xTimerGenericCommand+0x30>
	__asm volatile
 8008b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	623b      	str	r3, [r7, #32]
}
 8008b96:	bf00      	nop
 8008b98:	bf00      	nop
 8008b9a:	e7fd      	b.n	8008b98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008b9c:	4b19      	ldr	r3, [pc, #100]	@ (8008c04 <xTimerGenericCommand+0x98>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d02a      	beq.n	8008bfa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2b05      	cmp	r3, #5
 8008bb4:	dc18      	bgt.n	8008be8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008bb6:	f7ff fead 	bl	8008914 <xTaskGetSchedulerState>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d109      	bne.n	8008bd4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008bc0:	4b10      	ldr	r3, [pc, #64]	@ (8008c04 <xTimerGenericCommand+0x98>)
 8008bc2:	6818      	ldr	r0, [r3, #0]
 8008bc4:	f107 0110 	add.w	r1, r7, #16
 8008bc8:	2300      	movs	r3, #0
 8008bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bcc:	f7fe fc5a 	bl	8007484 <xQueueGenericSend>
 8008bd0:	6278      	str	r0, [r7, #36]	@ 0x24
 8008bd2:	e012      	b.n	8008bfa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8008c04 <xTimerGenericCommand+0x98>)
 8008bd6:	6818      	ldr	r0, [r3, #0]
 8008bd8:	f107 0110 	add.w	r1, r7, #16
 8008bdc:	2300      	movs	r3, #0
 8008bde:	2200      	movs	r2, #0
 8008be0:	f7fe fc50 	bl	8007484 <xQueueGenericSend>
 8008be4:	6278      	str	r0, [r7, #36]	@ 0x24
 8008be6:	e008      	b.n	8008bfa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008be8:	4b06      	ldr	r3, [pc, #24]	@ (8008c04 <xTimerGenericCommand+0x98>)
 8008bea:	6818      	ldr	r0, [r3, #0]
 8008bec:	f107 0110 	add.w	r1, r7, #16
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	f7fe fd48 	bl	8007688 <xQueueGenericSendFromISR>
 8008bf8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3728      	adds	r7, #40	@ 0x28
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	200010b8 	.word	0x200010b8

08008c08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b088      	sub	sp, #32
 8008c0c:	af02      	add	r7, sp, #8
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c12:	4b23      	ldr	r3, [pc, #140]	@ (8008ca0 <prvProcessExpiredTimer+0x98>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	3304      	adds	r3, #4
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fe fafb 	bl	800721c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d023      	beq.n	8008c7c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	699a      	ldr	r2, [r3, #24]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	18d1      	adds	r1, r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	6978      	ldr	r0, [r7, #20]
 8008c42:	f000 f8d5 	bl	8008df0 <prvInsertTimerInActiveList>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d020      	beq.n	8008c8e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	2300      	movs	r3, #0
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	2100      	movs	r1, #0
 8008c56:	6978      	ldr	r0, [r7, #20]
 8008c58:	f7ff ff88 	bl	8008b6c <xTimerGenericCommand>
 8008c5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d114      	bne.n	8008c8e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	60fb      	str	r3, [r7, #12]
}
 8008c76:	bf00      	nop
 8008c78:	bf00      	nop
 8008c7a:	e7fd      	b.n	8008c78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c82:	f023 0301 	bic.w	r3, r3, #1
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	6978      	ldr	r0, [r7, #20]
 8008c94:	4798      	blx	r3
}
 8008c96:	bf00      	nop
 8008c98:	3718      	adds	r7, #24
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	200010b0 	.word	0x200010b0

08008ca4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cac:	f107 0308 	add.w	r3, r7, #8
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 f859 	bl	8008d68 <prvGetNextExpireTime>
 8008cb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 f805 	bl	8008ccc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008cc2:	f000 f8d7 	bl	8008e74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cc6:	bf00      	nop
 8008cc8:	e7f0      	b.n	8008cac <prvTimerTask+0x8>
	...

08008ccc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008cd6:	f7ff fa29 	bl	800812c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cda:	f107 0308 	add.w	r3, r7, #8
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 f866 	bl	8008db0 <prvSampleTimeNow>
 8008ce4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d130      	bne.n	8008d4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10a      	bne.n	8008d08 <prvProcessTimerOrBlockTask+0x3c>
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d806      	bhi.n	8008d08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008cfa:	f7ff fa25 	bl	8008148 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008cfe:	68f9      	ldr	r1, [r7, #12]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff ff81 	bl	8008c08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d06:	e024      	b.n	8008d52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d008      	beq.n	8008d20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d0e:	4b13      	ldr	r3, [pc, #76]	@ (8008d5c <prvProcessTimerOrBlockTask+0x90>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d101      	bne.n	8008d1c <prvProcessTimerOrBlockTask+0x50>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e000      	b.n	8008d1e <prvProcessTimerOrBlockTask+0x52>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d20:	4b0f      	ldr	r3, [pc, #60]	@ (8008d60 <prvProcessTimerOrBlockTask+0x94>)
 8008d22:	6818      	ldr	r0, [r3, #0]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	f7fe ff65 	bl	8007bfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d32:	f7ff fa09 	bl	8008148 <xTaskResumeAll>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10a      	bne.n	8008d52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d3c:	4b09      	ldr	r3, [pc, #36]	@ (8008d64 <prvProcessTimerOrBlockTask+0x98>)
 8008d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	f3bf 8f6f 	isb	sy
}
 8008d4c:	e001      	b.n	8008d52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d4e:	f7ff f9fb 	bl	8008148 <xTaskResumeAll>
}
 8008d52:	bf00      	nop
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	200010b4 	.word	0x200010b4
 8008d60:	200010b8 	.word	0x200010b8
 8008d64:	e000ed04 	.word	0xe000ed04

08008d68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008d70:	4b0e      	ldr	r3, [pc, #56]	@ (8008dac <prvGetNextExpireTime+0x44>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d101      	bne.n	8008d7e <prvGetNextExpireTime+0x16>
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	e000      	b.n	8008d80 <prvGetNextExpireTime+0x18>
 8008d7e:	2200      	movs	r2, #0
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d105      	bne.n	8008d98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d8c:	4b07      	ldr	r3, [pc, #28]	@ (8008dac <prvGetNextExpireTime+0x44>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	60fb      	str	r3, [r7, #12]
 8008d96:	e001      	b.n	8008d9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	200010b0 	.word	0x200010b0

08008db0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008db8:	f7ff fa64 	bl	8008284 <xTaskGetTickCount>
 8008dbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8008dec <prvSampleTimeNow+0x3c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d205      	bcs.n	8008dd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008dc8:	f000 f93a 	bl	8009040 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	601a      	str	r2, [r3, #0]
 8008dd2:	e002      	b.n	8008dda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008dda:	4a04      	ldr	r2, [pc, #16]	@ (8008dec <prvSampleTimeNow+0x3c>)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008de0:	68fb      	ldr	r3, [r7, #12]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	200010c0 	.word	0x200010c0

08008df0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d812      	bhi.n	8008e3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	1ad2      	subs	r2, r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d302      	bcc.n	8008e2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e24:	2301      	movs	r3, #1
 8008e26:	617b      	str	r3, [r7, #20]
 8008e28:	e01b      	b.n	8008e62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e2a:	4b10      	ldr	r3, [pc, #64]	@ (8008e6c <prvInsertTimerInActiveList+0x7c>)
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	3304      	adds	r3, #4
 8008e32:	4619      	mov	r1, r3
 8008e34:	4610      	mov	r0, r2
 8008e36:	f7fe f9b8 	bl	80071aa <vListInsert>
 8008e3a:	e012      	b.n	8008e62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d206      	bcs.n	8008e52 <prvInsertTimerInActiveList+0x62>
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d302      	bcc.n	8008e52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	617b      	str	r3, [r7, #20]
 8008e50:	e007      	b.n	8008e62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e52:	4b07      	ldr	r3, [pc, #28]	@ (8008e70 <prvInsertTimerInActiveList+0x80>)
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3304      	adds	r3, #4
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	f7fe f9a4 	bl	80071aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008e62:	697b      	ldr	r3, [r7, #20]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3718      	adds	r7, #24
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	200010b4 	.word	0x200010b4
 8008e70:	200010b0 	.word	0x200010b0

08008e74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b08e      	sub	sp, #56	@ 0x38
 8008e78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e7a:	e0ce      	b.n	800901a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	da19      	bge.n	8008eb6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008e82:	1d3b      	adds	r3, r7, #4
 8008e84:	3304      	adds	r3, #4
 8008e86:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10b      	bne.n	8008ea6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	61fb      	str	r3, [r7, #28]
}
 8008ea0:	bf00      	nop
 8008ea2:	bf00      	nop
 8008ea4:	e7fd      	b.n	8008ea2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008eac:	6850      	ldr	r0, [r2, #4]
 8008eae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008eb0:	6892      	ldr	r2, [r2, #8]
 8008eb2:	4611      	mov	r1, r2
 8008eb4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f2c0 80ae 	blt.w	800901a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d004      	beq.n	8008ed4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ecc:	3304      	adds	r3, #4
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe f9a4 	bl	800721c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ed4:	463b      	mov	r3, r7
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7ff ff6a 	bl	8008db0 <prvSampleTimeNow>
 8008edc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2b09      	cmp	r3, #9
 8008ee2:	f200 8097 	bhi.w	8009014 <prvProcessReceivedCommands+0x1a0>
 8008ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8008eec <prvProcessReceivedCommands+0x78>)
 8008ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eec:	08008f15 	.word	0x08008f15
 8008ef0:	08008f15 	.word	0x08008f15
 8008ef4:	08008f15 	.word	0x08008f15
 8008ef8:	08008f8b 	.word	0x08008f8b
 8008efc:	08008f9f 	.word	0x08008f9f
 8008f00:	08008feb 	.word	0x08008feb
 8008f04:	08008f15 	.word	0x08008f15
 8008f08:	08008f15 	.word	0x08008f15
 8008f0c:	08008f8b 	.word	0x08008f8b
 8008f10:	08008f9f 	.word	0x08008f9f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f1a:	f043 0301 	orr.w	r3, r3, #1
 8008f1e:	b2da      	uxtb	r2, r3
 8008f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	18d1      	adds	r1, r2, r3
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f34:	f7ff ff5c 	bl	8008df0 <prvInsertTimerInActiveList>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d06c      	beq.n	8009018 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f4c:	f003 0304 	and.w	r3, r3, #4
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d061      	beq.n	8009018 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	441a      	add	r2, r3
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	2300      	movs	r3, #0
 8008f62:	2100      	movs	r1, #0
 8008f64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f66:	f7ff fe01 	bl	8008b6c <xTimerGenericCommand>
 8008f6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d152      	bne.n	8009018 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	61bb      	str	r3, [r7, #24]
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop
 8008f88:	e7fd      	b.n	8008f86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f90:	f023 0301 	bic.w	r3, r3, #1
 8008f94:	b2da      	uxtb	r2, r3
 8008f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008f9c:	e03d      	b.n	800901a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fa4:	f043 0301 	orr.w	r3, r3, #1
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008fb0:	68ba      	ldr	r2, [r7, #8]
 8008fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10b      	bne.n	8008fd6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	617b      	str	r3, [r7, #20]
}
 8008fd0:	bf00      	nop
 8008fd2:	bf00      	nop
 8008fd4:	e7fd      	b.n	8008fd2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd8:	699a      	ldr	r2, [r3, #24]
 8008fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fdc:	18d1      	adds	r1, r2, r3
 8008fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fe4:	f7ff ff04 	bl	8008df0 <prvInsertTimerInActiveList>
					break;
 8008fe8:	e017      	b.n	800901a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ff0:	f003 0302 	and.w	r3, r3, #2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d103      	bne.n	8009000 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008ff8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ffa:	f000 fbe5 	bl	80097c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008ffe:	e00c      	b.n	800901a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009002:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009006:	f023 0301 	bic.w	r3, r3, #1
 800900a:	b2da      	uxtb	r2, r3
 800900c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800900e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009012:	e002      	b.n	800901a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009014:	bf00      	nop
 8009016:	e000      	b.n	800901a <prvProcessReceivedCommands+0x1a6>
					break;
 8009018:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800901a:	4b08      	ldr	r3, [pc, #32]	@ (800903c <prvProcessReceivedCommands+0x1c8>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	1d39      	adds	r1, r7, #4
 8009020:	2200      	movs	r2, #0
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe fbce 	bl	80077c4 <xQueueReceive>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	f47f af26 	bne.w	8008e7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009030:	bf00      	nop
 8009032:	bf00      	nop
 8009034:	3730      	adds	r7, #48	@ 0x30
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	200010b8 	.word	0x200010b8

08009040 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b088      	sub	sp, #32
 8009044:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009046:	e049      	b.n	80090dc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009048:	4b2e      	ldr	r3, [pc, #184]	@ (8009104 <prvSwitchTimerLists+0xc4>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009052:	4b2c      	ldr	r3, [pc, #176]	@ (8009104 <prvSwitchTimerLists+0xc4>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	3304      	adds	r3, #4
 8009060:	4618      	mov	r0, r3
 8009062:	f7fe f8db 	bl	800721c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009074:	f003 0304 	and.w	r3, r3, #4
 8009078:	2b00      	cmp	r3, #0
 800907a:	d02f      	beq.n	80090dc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	4413      	add	r3, r2
 8009084:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	429a      	cmp	r2, r3
 800908c:	d90e      	bls.n	80090ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800909a:	4b1a      	ldr	r3, [pc, #104]	@ (8009104 <prvSwitchTimerLists+0xc4>)
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3304      	adds	r3, #4
 80090a2:	4619      	mov	r1, r3
 80090a4:	4610      	mov	r0, r2
 80090a6:	f7fe f880 	bl	80071aa <vListInsert>
 80090aa:	e017      	b.n	80090dc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090ac:	2300      	movs	r3, #0
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	2300      	movs	r3, #0
 80090b2:	693a      	ldr	r2, [r7, #16]
 80090b4:	2100      	movs	r1, #0
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f7ff fd58 	bl	8008b6c <xTimerGenericCommand>
 80090bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10b      	bne.n	80090dc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80090c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	603b      	str	r3, [r7, #0]
}
 80090d6:	bf00      	nop
 80090d8:	bf00      	nop
 80090da:	e7fd      	b.n	80090d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090dc:	4b09      	ldr	r3, [pc, #36]	@ (8009104 <prvSwitchTimerLists+0xc4>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1b0      	bne.n	8009048 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80090e6:	4b07      	ldr	r3, [pc, #28]	@ (8009104 <prvSwitchTimerLists+0xc4>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80090ec:	4b06      	ldr	r3, [pc, #24]	@ (8009108 <prvSwitchTimerLists+0xc8>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a04      	ldr	r2, [pc, #16]	@ (8009104 <prvSwitchTimerLists+0xc4>)
 80090f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80090f4:	4a04      	ldr	r2, [pc, #16]	@ (8009108 <prvSwitchTimerLists+0xc8>)
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	6013      	str	r3, [r2, #0]
}
 80090fa:	bf00      	nop
 80090fc:	3718      	adds	r7, #24
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	200010b0 	.word	0x200010b0
 8009108:	200010b4 	.word	0x200010b4

0800910c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009112:	f000 f969 	bl	80093e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009116:	4b15      	ldr	r3, [pc, #84]	@ (800916c <prvCheckForValidListAndQueue+0x60>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d120      	bne.n	8009160 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800911e:	4814      	ldr	r0, [pc, #80]	@ (8009170 <prvCheckForValidListAndQueue+0x64>)
 8009120:	f7fd fff2 	bl	8007108 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009124:	4813      	ldr	r0, [pc, #76]	@ (8009174 <prvCheckForValidListAndQueue+0x68>)
 8009126:	f7fd ffef 	bl	8007108 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800912a:	4b13      	ldr	r3, [pc, #76]	@ (8009178 <prvCheckForValidListAndQueue+0x6c>)
 800912c:	4a10      	ldr	r2, [pc, #64]	@ (8009170 <prvCheckForValidListAndQueue+0x64>)
 800912e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009130:	4b12      	ldr	r3, [pc, #72]	@ (800917c <prvCheckForValidListAndQueue+0x70>)
 8009132:	4a10      	ldr	r2, [pc, #64]	@ (8009174 <prvCheckForValidListAndQueue+0x68>)
 8009134:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009136:	2300      	movs	r3, #0
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	4b11      	ldr	r3, [pc, #68]	@ (8009180 <prvCheckForValidListAndQueue+0x74>)
 800913c:	4a11      	ldr	r2, [pc, #68]	@ (8009184 <prvCheckForValidListAndQueue+0x78>)
 800913e:	2110      	movs	r1, #16
 8009140:	200a      	movs	r0, #10
 8009142:	f7fe f8ff 	bl	8007344 <xQueueGenericCreateStatic>
 8009146:	4603      	mov	r3, r0
 8009148:	4a08      	ldr	r2, [pc, #32]	@ (800916c <prvCheckForValidListAndQueue+0x60>)
 800914a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800914c:	4b07      	ldr	r3, [pc, #28]	@ (800916c <prvCheckForValidListAndQueue+0x60>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d005      	beq.n	8009160 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009154:	4b05      	ldr	r3, [pc, #20]	@ (800916c <prvCheckForValidListAndQueue+0x60>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	490b      	ldr	r1, [pc, #44]	@ (8009188 <prvCheckForValidListAndQueue+0x7c>)
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe fd24 	bl	8007ba8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009160:	f000 f974 	bl	800944c <vPortExitCritical>
}
 8009164:	bf00      	nop
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	200010b8 	.word	0x200010b8
 8009170:	20001088 	.word	0x20001088
 8009174:	2000109c 	.word	0x2000109c
 8009178:	200010b0 	.word	0x200010b0
 800917c:	200010b4 	.word	0x200010b4
 8009180:	20001164 	.word	0x20001164
 8009184:	200010c4 	.word	0x200010c4
 8009188:	0800add8 	.word	0x0800add8

0800918c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	3b04      	subs	r3, #4
 800919c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80091a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	3b04      	subs	r3, #4
 80091aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f023 0201 	bic.w	r2, r3, #1
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	3b04      	subs	r3, #4
 80091ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80091bc:	4a0c      	ldr	r2, [pc, #48]	@ (80091f0 <pxPortInitialiseStack+0x64>)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	3b14      	subs	r3, #20
 80091c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	3b04      	subs	r3, #4
 80091d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f06f 0202 	mvn.w	r2, #2
 80091da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	3b20      	subs	r3, #32
 80091e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80091e2:	68fb      	ldr	r3, [r7, #12]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	080091f5 	.word	0x080091f5

080091f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80091fa:	2300      	movs	r3, #0
 80091fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80091fe:	4b13      	ldr	r3, [pc, #76]	@ (800924c <prvTaskExitError+0x58>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009206:	d00b      	beq.n	8009220 <prvTaskExitError+0x2c>
	__asm volatile
 8009208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	60fb      	str	r3, [r7, #12]
}
 800921a:	bf00      	nop
 800921c:	bf00      	nop
 800921e:	e7fd      	b.n	800921c <prvTaskExitError+0x28>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	60bb      	str	r3, [r7, #8]
}
 8009232:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009234:	bf00      	nop
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d0fc      	beq.n	8009236 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800923c:	bf00      	nop
 800923e:	bf00      	nop
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	20000064 	.word	0x20000064

08009250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009250:	4b07      	ldr	r3, [pc, #28]	@ (8009270 <pxCurrentTCBConst2>)
 8009252:	6819      	ldr	r1, [r3, #0]
 8009254:	6808      	ldr	r0, [r1, #0]
 8009256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925a:	f380 8809 	msr	PSP, r0
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f04f 0000 	mov.w	r0, #0
 8009266:	f380 8811 	msr	BASEPRI, r0
 800926a:	4770      	bx	lr
 800926c:	f3af 8000 	nop.w

08009270 <pxCurrentTCBConst2>:
 8009270:	20000b88 	.word	0x20000b88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009274:	bf00      	nop
 8009276:	bf00      	nop

08009278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009278:	4808      	ldr	r0, [pc, #32]	@ (800929c <prvPortStartFirstTask+0x24>)
 800927a:	6800      	ldr	r0, [r0, #0]
 800927c:	6800      	ldr	r0, [r0, #0]
 800927e:	f380 8808 	msr	MSP, r0
 8009282:	f04f 0000 	mov.w	r0, #0
 8009286:	f380 8814 	msr	CONTROL, r0
 800928a:	b662      	cpsie	i
 800928c:	b661      	cpsie	f
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	df00      	svc	0
 8009298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800929a:	bf00      	nop
 800929c:	e000ed08 	.word	0xe000ed08

080092a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80092a6:	4b47      	ldr	r3, [pc, #284]	@ (80093c4 <xPortStartScheduler+0x124>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a47      	ldr	r2, [pc, #284]	@ (80093c8 <xPortStartScheduler+0x128>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d10b      	bne.n	80092c8 <xPortStartScheduler+0x28>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	60fb      	str	r3, [r7, #12]
}
 80092c2:	bf00      	nop
 80092c4:	bf00      	nop
 80092c6:	e7fd      	b.n	80092c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80092c8:	4b3e      	ldr	r3, [pc, #248]	@ (80093c4 <xPortStartScheduler+0x124>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a3f      	ldr	r2, [pc, #252]	@ (80093cc <xPortStartScheduler+0x12c>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d10b      	bne.n	80092ea <xPortStartScheduler+0x4a>
	__asm volatile
 80092d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d6:	f383 8811 	msr	BASEPRI, r3
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	613b      	str	r3, [r7, #16]
}
 80092e4:	bf00      	nop
 80092e6:	bf00      	nop
 80092e8:	e7fd      	b.n	80092e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80092ea:	4b39      	ldr	r3, [pc, #228]	@ (80093d0 <xPortStartScheduler+0x130>)
 80092ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	22ff      	movs	r2, #255	@ 0xff
 80092fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	b2db      	uxtb	r3, r3
 8009302:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009304:	78fb      	ldrb	r3, [r7, #3]
 8009306:	b2db      	uxtb	r3, r3
 8009308:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800930c:	b2da      	uxtb	r2, r3
 800930e:	4b31      	ldr	r3, [pc, #196]	@ (80093d4 <xPortStartScheduler+0x134>)
 8009310:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009312:	4b31      	ldr	r3, [pc, #196]	@ (80093d8 <xPortStartScheduler+0x138>)
 8009314:	2207      	movs	r2, #7
 8009316:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009318:	e009      	b.n	800932e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800931a:	4b2f      	ldr	r3, [pc, #188]	@ (80093d8 <xPortStartScheduler+0x138>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3b01      	subs	r3, #1
 8009320:	4a2d      	ldr	r2, [pc, #180]	@ (80093d8 <xPortStartScheduler+0x138>)
 8009322:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009324:	78fb      	ldrb	r3, [r7, #3]
 8009326:	b2db      	uxtb	r3, r3
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	b2db      	uxtb	r3, r3
 800932c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800932e:	78fb      	ldrb	r3, [r7, #3]
 8009330:	b2db      	uxtb	r3, r3
 8009332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009336:	2b80      	cmp	r3, #128	@ 0x80
 8009338:	d0ef      	beq.n	800931a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800933a:	4b27      	ldr	r3, [pc, #156]	@ (80093d8 <xPortStartScheduler+0x138>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f1c3 0307 	rsb	r3, r3, #7
 8009342:	2b04      	cmp	r3, #4
 8009344:	d00b      	beq.n	800935e <xPortStartScheduler+0xbe>
	__asm volatile
 8009346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	60bb      	str	r3, [r7, #8]
}
 8009358:	bf00      	nop
 800935a:	bf00      	nop
 800935c:	e7fd      	b.n	800935a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800935e:	4b1e      	ldr	r3, [pc, #120]	@ (80093d8 <xPortStartScheduler+0x138>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	021b      	lsls	r3, r3, #8
 8009364:	4a1c      	ldr	r2, [pc, #112]	@ (80093d8 <xPortStartScheduler+0x138>)
 8009366:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009368:	4b1b      	ldr	r3, [pc, #108]	@ (80093d8 <xPortStartScheduler+0x138>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009370:	4a19      	ldr	r2, [pc, #100]	@ (80093d8 <xPortStartScheduler+0x138>)
 8009372:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	b2da      	uxtb	r2, r3
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800937c:	4b17      	ldr	r3, [pc, #92]	@ (80093dc <xPortStartScheduler+0x13c>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a16      	ldr	r2, [pc, #88]	@ (80093dc <xPortStartScheduler+0x13c>)
 8009382:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009386:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009388:	4b14      	ldr	r3, [pc, #80]	@ (80093dc <xPortStartScheduler+0x13c>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a13      	ldr	r2, [pc, #76]	@ (80093dc <xPortStartScheduler+0x13c>)
 800938e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009392:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009394:	f000 f8da 	bl	800954c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009398:	4b11      	ldr	r3, [pc, #68]	@ (80093e0 <xPortStartScheduler+0x140>)
 800939a:	2200      	movs	r2, #0
 800939c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800939e:	f000 f8f9 	bl	8009594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80093a2:	4b10      	ldr	r3, [pc, #64]	@ (80093e4 <xPortStartScheduler+0x144>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a0f      	ldr	r2, [pc, #60]	@ (80093e4 <xPortStartScheduler+0x144>)
 80093a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80093ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80093ae:	f7ff ff63 	bl	8009278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80093b2:	f7ff f831 	bl	8008418 <vTaskSwitchContext>
	prvTaskExitError();
 80093b6:	f7ff ff1d 	bl	80091f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3718      	adds	r7, #24
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	e000ed00 	.word	0xe000ed00
 80093c8:	410fc271 	.word	0x410fc271
 80093cc:	410fc270 	.word	0x410fc270
 80093d0:	e000e400 	.word	0xe000e400
 80093d4:	200011b4 	.word	0x200011b4
 80093d8:	200011b8 	.word	0x200011b8
 80093dc:	e000ed20 	.word	0xe000ed20
 80093e0:	20000064 	.word	0x20000064
 80093e4:	e000ef34 	.word	0xe000ef34

080093e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
	__asm volatile
 80093ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	607b      	str	r3, [r7, #4]
}
 8009400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009402:	4b10      	ldr	r3, [pc, #64]	@ (8009444 <vPortEnterCritical+0x5c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	3301      	adds	r3, #1
 8009408:	4a0e      	ldr	r2, [pc, #56]	@ (8009444 <vPortEnterCritical+0x5c>)
 800940a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800940c:	4b0d      	ldr	r3, [pc, #52]	@ (8009444 <vPortEnterCritical+0x5c>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d110      	bne.n	8009436 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009414:	4b0c      	ldr	r3, [pc, #48]	@ (8009448 <vPortEnterCritical+0x60>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	b2db      	uxtb	r3, r3
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00b      	beq.n	8009436 <vPortEnterCritical+0x4e>
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	603b      	str	r3, [r7, #0]
}
 8009430:	bf00      	nop
 8009432:	bf00      	nop
 8009434:	e7fd      	b.n	8009432 <vPortEnterCritical+0x4a>
	}
}
 8009436:	bf00      	nop
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	20000064 	.word	0x20000064
 8009448:	e000ed04 	.word	0xe000ed04

0800944c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009452:	4b12      	ldr	r3, [pc, #72]	@ (800949c <vPortExitCritical+0x50>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10b      	bne.n	8009472 <vPortExitCritical+0x26>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	607b      	str	r3, [r7, #4]
}
 800946c:	bf00      	nop
 800946e:	bf00      	nop
 8009470:	e7fd      	b.n	800946e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009472:	4b0a      	ldr	r3, [pc, #40]	@ (800949c <vPortExitCritical+0x50>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3b01      	subs	r3, #1
 8009478:	4a08      	ldr	r2, [pc, #32]	@ (800949c <vPortExitCritical+0x50>)
 800947a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800947c:	4b07      	ldr	r3, [pc, #28]	@ (800949c <vPortExitCritical+0x50>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d105      	bne.n	8009490 <vPortExitCritical+0x44>
 8009484:	2300      	movs	r3, #0
 8009486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	f383 8811 	msr	BASEPRI, r3
}
 800948e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	20000064 	.word	0x20000064

080094a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80094a0:	f3ef 8009 	mrs	r0, PSP
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	4b15      	ldr	r3, [pc, #84]	@ (8009500 <pxCurrentTCBConst>)
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	f01e 0f10 	tst.w	lr, #16
 80094b0:	bf08      	it	eq
 80094b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80094b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ba:	6010      	str	r0, [r2, #0]
 80094bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80094c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80094c4:	f380 8811 	msr	BASEPRI, r0
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f7fe ffa2 	bl	8008418 <vTaskSwitchContext>
 80094d4:	f04f 0000 	mov.w	r0, #0
 80094d8:	f380 8811 	msr	BASEPRI, r0
 80094dc:	bc09      	pop	{r0, r3}
 80094de:	6819      	ldr	r1, [r3, #0]
 80094e0:	6808      	ldr	r0, [r1, #0]
 80094e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e6:	f01e 0f10 	tst.w	lr, #16
 80094ea:	bf08      	it	eq
 80094ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80094f0:	f380 8809 	msr	PSP, r0
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	f3af 8000 	nop.w

08009500 <pxCurrentTCBConst>:
 8009500:	20000b88 	.word	0x20000b88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009504:	bf00      	nop
 8009506:	bf00      	nop

08009508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	607b      	str	r3, [r7, #4]
}
 8009520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009522:	f7fe febf 	bl	80082a4 <xTaskIncrementTick>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d003      	beq.n	8009534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800952c:	4b06      	ldr	r3, [pc, #24]	@ (8009548 <xPortSysTickHandler+0x40>)
 800952e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	2300      	movs	r3, #0
 8009536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	f383 8811 	msr	BASEPRI, r3
}
 800953e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009540:	bf00      	nop
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	e000ed04 	.word	0xe000ed04

0800954c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800954c:	b480      	push	{r7}
 800954e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009550:	4b0b      	ldr	r3, [pc, #44]	@ (8009580 <vPortSetupTimerInterrupt+0x34>)
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009556:	4b0b      	ldr	r3, [pc, #44]	@ (8009584 <vPortSetupTimerInterrupt+0x38>)
 8009558:	2200      	movs	r2, #0
 800955a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800955c:	4b0a      	ldr	r3, [pc, #40]	@ (8009588 <vPortSetupTimerInterrupt+0x3c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a0a      	ldr	r2, [pc, #40]	@ (800958c <vPortSetupTimerInterrupt+0x40>)
 8009562:	fba2 2303 	umull	r2, r3, r2, r3
 8009566:	099b      	lsrs	r3, r3, #6
 8009568:	4a09      	ldr	r2, [pc, #36]	@ (8009590 <vPortSetupTimerInterrupt+0x44>)
 800956a:	3b01      	subs	r3, #1
 800956c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800956e:	4b04      	ldr	r3, [pc, #16]	@ (8009580 <vPortSetupTimerInterrupt+0x34>)
 8009570:	2207      	movs	r2, #7
 8009572:	601a      	str	r2, [r3, #0]
}
 8009574:	bf00      	nop
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	e000e010 	.word	0xe000e010
 8009584:	e000e018 	.word	0xe000e018
 8009588:	20000004 	.word	0x20000004
 800958c:	10624dd3 	.word	0x10624dd3
 8009590:	e000e014 	.word	0xe000e014

08009594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009594:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80095a4 <vPortEnableVFP+0x10>
 8009598:	6801      	ldr	r1, [r0, #0]
 800959a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800959e:	6001      	str	r1, [r0, #0]
 80095a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80095a2:	bf00      	nop
 80095a4:	e000ed88 	.word	0xe000ed88

080095a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80095ae:	f3ef 8305 	mrs	r3, IPSR
 80095b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2b0f      	cmp	r3, #15
 80095b8:	d915      	bls.n	80095e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80095ba:	4a18      	ldr	r2, [pc, #96]	@ (800961c <vPortValidateInterruptPriority+0x74>)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	4413      	add	r3, r2
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80095c4:	4b16      	ldr	r3, [pc, #88]	@ (8009620 <vPortValidateInterruptPriority+0x78>)
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	7afa      	ldrb	r2, [r7, #11]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d20b      	bcs.n	80095e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	607b      	str	r3, [r7, #4]
}
 80095e0:	bf00      	nop
 80095e2:	bf00      	nop
 80095e4:	e7fd      	b.n	80095e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80095e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009624 <vPortValidateInterruptPriority+0x7c>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80095ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009628 <vPortValidateInterruptPriority+0x80>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d90b      	bls.n	800960e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80095f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095fa:	f383 8811 	msr	BASEPRI, r3
 80095fe:	f3bf 8f6f 	isb	sy
 8009602:	f3bf 8f4f 	dsb	sy
 8009606:	603b      	str	r3, [r7, #0]
}
 8009608:	bf00      	nop
 800960a:	bf00      	nop
 800960c:	e7fd      	b.n	800960a <vPortValidateInterruptPriority+0x62>
	}
 800960e:	bf00      	nop
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	e000e3f0 	.word	0xe000e3f0
 8009620:	200011b4 	.word	0x200011b4
 8009624:	e000ed0c 	.word	0xe000ed0c
 8009628:	200011b8 	.word	0x200011b8

0800962c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b08a      	sub	sp, #40	@ 0x28
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009634:	2300      	movs	r3, #0
 8009636:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009638:	f7fe fd78 	bl	800812c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800963c:	4b5c      	ldr	r3, [pc, #368]	@ (80097b0 <pvPortMalloc+0x184>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d101      	bne.n	8009648 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009644:	f000 f924 	bl	8009890 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009648:	4b5a      	ldr	r3, [pc, #360]	@ (80097b4 <pvPortMalloc+0x188>)
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4013      	ands	r3, r2
 8009650:	2b00      	cmp	r3, #0
 8009652:	f040 8095 	bne.w	8009780 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d01e      	beq.n	800969a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800965c:	2208      	movs	r2, #8
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4413      	add	r3, r2
 8009662:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f003 0307 	and.w	r3, r3, #7
 800966a:	2b00      	cmp	r3, #0
 800966c:	d015      	beq.n	800969a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f023 0307 	bic.w	r3, r3, #7
 8009674:	3308      	adds	r3, #8
 8009676:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f003 0307 	and.w	r3, r3, #7
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00b      	beq.n	800969a <pvPortMalloc+0x6e>
	__asm volatile
 8009682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009686:	f383 8811 	msr	BASEPRI, r3
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	617b      	str	r3, [r7, #20]
}
 8009694:	bf00      	nop
 8009696:	bf00      	nop
 8009698:	e7fd      	b.n	8009696 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d06f      	beq.n	8009780 <pvPortMalloc+0x154>
 80096a0:	4b45      	ldr	r3, [pc, #276]	@ (80097b8 <pvPortMalloc+0x18c>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d86a      	bhi.n	8009780 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096aa:	4b44      	ldr	r3, [pc, #272]	@ (80097bc <pvPortMalloc+0x190>)
 80096ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80096ae:	4b43      	ldr	r3, [pc, #268]	@ (80097bc <pvPortMalloc+0x190>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096b4:	e004      	b.n	80096c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80096b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d903      	bls.n	80096d2 <pvPortMalloc+0xa6>
 80096ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1f1      	bne.n	80096b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80096d2:	4b37      	ldr	r3, [pc, #220]	@ (80097b0 <pvPortMalloc+0x184>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096d8:	429a      	cmp	r2, r3
 80096da:	d051      	beq.n	8009780 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80096dc:	6a3b      	ldr	r3, [r7, #32]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2208      	movs	r2, #8
 80096e2:	4413      	add	r3, r2
 80096e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80096e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80096ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	1ad2      	subs	r2, r2, r3
 80096f6:	2308      	movs	r3, #8
 80096f8:	005b      	lsls	r3, r3, #1
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d920      	bls.n	8009740 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80096fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4413      	add	r3, r2
 8009704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	f003 0307 	and.w	r3, r3, #7
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00b      	beq.n	8009728 <pvPortMalloc+0xfc>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	613b      	str	r3, [r7, #16]
}
 8009722:	bf00      	nop
 8009724:	bf00      	nop
 8009726:	e7fd      	b.n	8009724 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972a:	685a      	ldr	r2, [r3, #4]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	1ad2      	subs	r2, r2, r3
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800973a:	69b8      	ldr	r0, [r7, #24]
 800973c:	f000 f90a 	bl	8009954 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009740:	4b1d      	ldr	r3, [pc, #116]	@ (80097b8 <pvPortMalloc+0x18c>)
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	4a1b      	ldr	r2, [pc, #108]	@ (80097b8 <pvPortMalloc+0x18c>)
 800974c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800974e:	4b1a      	ldr	r3, [pc, #104]	@ (80097b8 <pvPortMalloc+0x18c>)
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	4b1b      	ldr	r3, [pc, #108]	@ (80097c0 <pvPortMalloc+0x194>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	429a      	cmp	r2, r3
 8009758:	d203      	bcs.n	8009762 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800975a:	4b17      	ldr	r3, [pc, #92]	@ (80097b8 <pvPortMalloc+0x18c>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a18      	ldr	r2, [pc, #96]	@ (80097c0 <pvPortMalloc+0x194>)
 8009760:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009764:	685a      	ldr	r2, [r3, #4]
 8009766:	4b13      	ldr	r3, [pc, #76]	@ (80097b4 <pvPortMalloc+0x188>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	431a      	orrs	r2, r3
 800976c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009772:	2200      	movs	r2, #0
 8009774:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009776:	4b13      	ldr	r3, [pc, #76]	@ (80097c4 <pvPortMalloc+0x198>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3301      	adds	r3, #1
 800977c:	4a11      	ldr	r2, [pc, #68]	@ (80097c4 <pvPortMalloc+0x198>)
 800977e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009780:	f7fe fce2 	bl	8008148 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	f003 0307 	and.w	r3, r3, #7
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00b      	beq.n	80097a6 <pvPortMalloc+0x17a>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	60fb      	str	r3, [r7, #12]
}
 80097a0:	bf00      	nop
 80097a2:	bf00      	nop
 80097a4:	e7fd      	b.n	80097a2 <pvPortMalloc+0x176>
	return pvReturn;
 80097a6:	69fb      	ldr	r3, [r7, #28]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3728      	adds	r7, #40	@ 0x28
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	20004dc4 	.word	0x20004dc4
 80097b4:	20004dd8 	.word	0x20004dd8
 80097b8:	20004dc8 	.word	0x20004dc8
 80097bc:	20004dbc 	.word	0x20004dbc
 80097c0:	20004dcc 	.word	0x20004dcc
 80097c4:	20004dd0 	.word	0x20004dd0

080097c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d04f      	beq.n	800987a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80097da:	2308      	movs	r3, #8
 80097dc:	425b      	negs	r3, r3
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	4413      	add	r3, r2
 80097e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	4b25      	ldr	r3, [pc, #148]	@ (8009884 <vPortFree+0xbc>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4013      	ands	r3, r2
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10b      	bne.n	800980e <vPortFree+0x46>
	__asm volatile
 80097f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097fa:	f383 8811 	msr	BASEPRI, r3
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f3bf 8f4f 	dsb	sy
 8009806:	60fb      	str	r3, [r7, #12]
}
 8009808:	bf00      	nop
 800980a:	bf00      	nop
 800980c:	e7fd      	b.n	800980a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00b      	beq.n	800982e <vPortFree+0x66>
	__asm volatile
 8009816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981a:	f383 8811 	msr	BASEPRI, r3
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f3bf 8f4f 	dsb	sy
 8009826:	60bb      	str	r3, [r7, #8]
}
 8009828:	bf00      	nop
 800982a:	bf00      	nop
 800982c:	e7fd      	b.n	800982a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	685a      	ldr	r2, [r3, #4]
 8009832:	4b14      	ldr	r3, [pc, #80]	@ (8009884 <vPortFree+0xbc>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4013      	ands	r3, r2
 8009838:	2b00      	cmp	r3, #0
 800983a:	d01e      	beq.n	800987a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d11a      	bne.n	800987a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	685a      	ldr	r2, [r3, #4]
 8009848:	4b0e      	ldr	r3, [pc, #56]	@ (8009884 <vPortFree+0xbc>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	43db      	mvns	r3, r3
 800984e:	401a      	ands	r2, r3
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009854:	f7fe fc6a 	bl	800812c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	4b0a      	ldr	r3, [pc, #40]	@ (8009888 <vPortFree+0xc0>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4413      	add	r3, r2
 8009862:	4a09      	ldr	r2, [pc, #36]	@ (8009888 <vPortFree+0xc0>)
 8009864:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009866:	6938      	ldr	r0, [r7, #16]
 8009868:	f000 f874 	bl	8009954 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800986c:	4b07      	ldr	r3, [pc, #28]	@ (800988c <vPortFree+0xc4>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	3301      	adds	r3, #1
 8009872:	4a06      	ldr	r2, [pc, #24]	@ (800988c <vPortFree+0xc4>)
 8009874:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009876:	f7fe fc67 	bl	8008148 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800987a:	bf00      	nop
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	20004dd8 	.word	0x20004dd8
 8009888:	20004dc8 	.word	0x20004dc8
 800988c:	20004dd4 	.word	0x20004dd4

08009890 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009896:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800989a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800989c:	4b27      	ldr	r3, [pc, #156]	@ (800993c <prvHeapInit+0xac>)
 800989e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f003 0307 	and.w	r3, r3, #7
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00c      	beq.n	80098c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3307      	adds	r3, #7
 80098ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f023 0307 	bic.w	r3, r3, #7
 80098b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	4a1f      	ldr	r2, [pc, #124]	@ (800993c <prvHeapInit+0xac>)
 80098c0:	4413      	add	r3, r2
 80098c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009940 <prvHeapInit+0xb0>)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098ce:	4b1c      	ldr	r3, [pc, #112]	@ (8009940 <prvHeapInit+0xb0>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	4413      	add	r3, r2
 80098da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80098dc:	2208      	movs	r2, #8
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	1a9b      	subs	r3, r3, r2
 80098e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f023 0307 	bic.w	r3, r3, #7
 80098ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	4a15      	ldr	r2, [pc, #84]	@ (8009944 <prvHeapInit+0xb4>)
 80098f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80098f2:	4b14      	ldr	r3, [pc, #80]	@ (8009944 <prvHeapInit+0xb4>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2200      	movs	r2, #0
 80098f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80098fa:	4b12      	ldr	r3, [pc, #72]	@ (8009944 <prvHeapInit+0xb4>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2200      	movs	r2, #0
 8009900:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	1ad2      	subs	r2, r2, r3
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009910:	4b0c      	ldr	r3, [pc, #48]	@ (8009944 <prvHeapInit+0xb4>)
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	4a0a      	ldr	r2, [pc, #40]	@ (8009948 <prvHeapInit+0xb8>)
 800991e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	4a09      	ldr	r2, [pc, #36]	@ (800994c <prvHeapInit+0xbc>)
 8009926:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009928:	4b09      	ldr	r3, [pc, #36]	@ (8009950 <prvHeapInit+0xc0>)
 800992a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800992e:	601a      	str	r2, [r3, #0]
}
 8009930:	bf00      	nop
 8009932:	3714      	adds	r7, #20
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	200011bc 	.word	0x200011bc
 8009940:	20004dbc 	.word	0x20004dbc
 8009944:	20004dc4 	.word	0x20004dc4
 8009948:	20004dcc 	.word	0x20004dcc
 800994c:	20004dc8 	.word	0x20004dc8
 8009950:	20004dd8 	.word	0x20004dd8

08009954 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800995c:	4b28      	ldr	r3, [pc, #160]	@ (8009a00 <prvInsertBlockIntoFreeList+0xac>)
 800995e:	60fb      	str	r3, [r7, #12]
 8009960:	e002      	b.n	8009968 <prvInsertBlockIntoFreeList+0x14>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	60fb      	str	r3, [r7, #12]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	429a      	cmp	r2, r3
 8009970:	d8f7      	bhi.n	8009962 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	4413      	add	r3, r2
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	429a      	cmp	r2, r3
 8009982:	d108      	bne.n	8009996 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	685a      	ldr	r2, [r3, #4]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	441a      	add	r2, r3
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	68ba      	ldr	r2, [r7, #8]
 80099a0:	441a      	add	r2, r3
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d118      	bne.n	80099dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	4b15      	ldr	r3, [pc, #84]	@ (8009a04 <prvInsertBlockIntoFreeList+0xb0>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d00d      	beq.n	80099d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	441a      	add	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	601a      	str	r2, [r3, #0]
 80099d0:	e008      	b.n	80099e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009a04 <prvInsertBlockIntoFreeList+0xb0>)
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	601a      	str	r2, [r3, #0]
 80099da:	e003      	b.n	80099e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d002      	beq.n	80099f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099f2:	bf00      	nop
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	20004dbc 	.word	0x20004dbc
 8009a04:	20004dc4 	.word	0x20004dc4

08009a08 <std>:
 8009a08:	2300      	movs	r3, #0
 8009a0a:	b510      	push	{r4, lr}
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	e9c0 3300 	strd	r3, r3, [r0]
 8009a12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a16:	6083      	str	r3, [r0, #8]
 8009a18:	8181      	strh	r1, [r0, #12]
 8009a1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009a1c:	81c2      	strh	r2, [r0, #14]
 8009a1e:	6183      	str	r3, [r0, #24]
 8009a20:	4619      	mov	r1, r3
 8009a22:	2208      	movs	r2, #8
 8009a24:	305c      	adds	r0, #92	@ 0x5c
 8009a26:	f000 f928 	bl	8009c7a <memset>
 8009a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a60 <std+0x58>)
 8009a2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a64 <std+0x5c>)
 8009a30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009a32:	4b0d      	ldr	r3, [pc, #52]	@ (8009a68 <std+0x60>)
 8009a34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a36:	4b0d      	ldr	r3, [pc, #52]	@ (8009a6c <std+0x64>)
 8009a38:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a70 <std+0x68>)
 8009a3c:	6224      	str	r4, [r4, #32]
 8009a3e:	429c      	cmp	r4, r3
 8009a40:	d006      	beq.n	8009a50 <std+0x48>
 8009a42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a46:	4294      	cmp	r4, r2
 8009a48:	d002      	beq.n	8009a50 <std+0x48>
 8009a4a:	33d0      	adds	r3, #208	@ 0xd0
 8009a4c:	429c      	cmp	r4, r3
 8009a4e:	d105      	bne.n	8009a5c <std+0x54>
 8009a50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a58:	f000 b9e6 	b.w	8009e28 <__retarget_lock_init_recursive>
 8009a5c:	bd10      	pop	{r4, pc}
 8009a5e:	bf00      	nop
 8009a60:	08009bf5 	.word	0x08009bf5
 8009a64:	08009c17 	.word	0x08009c17
 8009a68:	08009c4f 	.word	0x08009c4f
 8009a6c:	08009c73 	.word	0x08009c73
 8009a70:	20004ddc 	.word	0x20004ddc

08009a74 <stdio_exit_handler>:
 8009a74:	4a02      	ldr	r2, [pc, #8]	@ (8009a80 <stdio_exit_handler+0xc>)
 8009a76:	4903      	ldr	r1, [pc, #12]	@ (8009a84 <stdio_exit_handler+0x10>)
 8009a78:	4803      	ldr	r0, [pc, #12]	@ (8009a88 <stdio_exit_handler+0x14>)
 8009a7a:	f000 b869 	b.w	8009b50 <_fwalk_sglue>
 8009a7e:	bf00      	nop
 8009a80:	20000068 	.word	0x20000068
 8009a84:	0800a991 	.word	0x0800a991
 8009a88:	20000078 	.word	0x20000078

08009a8c <cleanup_stdio>:
 8009a8c:	6841      	ldr	r1, [r0, #4]
 8009a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ac0 <cleanup_stdio+0x34>)
 8009a90:	4299      	cmp	r1, r3
 8009a92:	b510      	push	{r4, lr}
 8009a94:	4604      	mov	r4, r0
 8009a96:	d001      	beq.n	8009a9c <cleanup_stdio+0x10>
 8009a98:	f000 ff7a 	bl	800a990 <_fflush_r>
 8009a9c:	68a1      	ldr	r1, [r4, #8]
 8009a9e:	4b09      	ldr	r3, [pc, #36]	@ (8009ac4 <cleanup_stdio+0x38>)
 8009aa0:	4299      	cmp	r1, r3
 8009aa2:	d002      	beq.n	8009aaa <cleanup_stdio+0x1e>
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f000 ff73 	bl	800a990 <_fflush_r>
 8009aaa:	68e1      	ldr	r1, [r4, #12]
 8009aac:	4b06      	ldr	r3, [pc, #24]	@ (8009ac8 <cleanup_stdio+0x3c>)
 8009aae:	4299      	cmp	r1, r3
 8009ab0:	d004      	beq.n	8009abc <cleanup_stdio+0x30>
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ab8:	f000 bf6a 	b.w	800a990 <_fflush_r>
 8009abc:	bd10      	pop	{r4, pc}
 8009abe:	bf00      	nop
 8009ac0:	20004ddc 	.word	0x20004ddc
 8009ac4:	20004e44 	.word	0x20004e44
 8009ac8:	20004eac 	.word	0x20004eac

08009acc <global_stdio_init.part.0>:
 8009acc:	b510      	push	{r4, lr}
 8009ace:	4b0b      	ldr	r3, [pc, #44]	@ (8009afc <global_stdio_init.part.0+0x30>)
 8009ad0:	4c0b      	ldr	r4, [pc, #44]	@ (8009b00 <global_stdio_init.part.0+0x34>)
 8009ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8009b04 <global_stdio_init.part.0+0x38>)
 8009ad4:	601a      	str	r2, [r3, #0]
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	2200      	movs	r2, #0
 8009ada:	2104      	movs	r1, #4
 8009adc:	f7ff ff94 	bl	8009a08 <std>
 8009ae0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	2109      	movs	r1, #9
 8009ae8:	f7ff ff8e 	bl	8009a08 <std>
 8009aec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009af0:	2202      	movs	r2, #2
 8009af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009af6:	2112      	movs	r1, #18
 8009af8:	f7ff bf86 	b.w	8009a08 <std>
 8009afc:	20004f14 	.word	0x20004f14
 8009b00:	20004ddc 	.word	0x20004ddc
 8009b04:	08009a75 	.word	0x08009a75

08009b08 <__sfp_lock_acquire>:
 8009b08:	4801      	ldr	r0, [pc, #4]	@ (8009b10 <__sfp_lock_acquire+0x8>)
 8009b0a:	f000 b98e 	b.w	8009e2a <__retarget_lock_acquire_recursive>
 8009b0e:	bf00      	nop
 8009b10:	20004f1d 	.word	0x20004f1d

08009b14 <__sfp_lock_release>:
 8009b14:	4801      	ldr	r0, [pc, #4]	@ (8009b1c <__sfp_lock_release+0x8>)
 8009b16:	f000 b989 	b.w	8009e2c <__retarget_lock_release_recursive>
 8009b1a:	bf00      	nop
 8009b1c:	20004f1d 	.word	0x20004f1d

08009b20 <__sinit>:
 8009b20:	b510      	push	{r4, lr}
 8009b22:	4604      	mov	r4, r0
 8009b24:	f7ff fff0 	bl	8009b08 <__sfp_lock_acquire>
 8009b28:	6a23      	ldr	r3, [r4, #32]
 8009b2a:	b11b      	cbz	r3, 8009b34 <__sinit+0x14>
 8009b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b30:	f7ff bff0 	b.w	8009b14 <__sfp_lock_release>
 8009b34:	4b04      	ldr	r3, [pc, #16]	@ (8009b48 <__sinit+0x28>)
 8009b36:	6223      	str	r3, [r4, #32]
 8009b38:	4b04      	ldr	r3, [pc, #16]	@ (8009b4c <__sinit+0x2c>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1f5      	bne.n	8009b2c <__sinit+0xc>
 8009b40:	f7ff ffc4 	bl	8009acc <global_stdio_init.part.0>
 8009b44:	e7f2      	b.n	8009b2c <__sinit+0xc>
 8009b46:	bf00      	nop
 8009b48:	08009a8d 	.word	0x08009a8d
 8009b4c:	20004f14 	.word	0x20004f14

08009b50 <_fwalk_sglue>:
 8009b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b54:	4607      	mov	r7, r0
 8009b56:	4688      	mov	r8, r1
 8009b58:	4614      	mov	r4, r2
 8009b5a:	2600      	movs	r6, #0
 8009b5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b60:	f1b9 0901 	subs.w	r9, r9, #1
 8009b64:	d505      	bpl.n	8009b72 <_fwalk_sglue+0x22>
 8009b66:	6824      	ldr	r4, [r4, #0]
 8009b68:	2c00      	cmp	r4, #0
 8009b6a:	d1f7      	bne.n	8009b5c <_fwalk_sglue+0xc>
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b72:	89ab      	ldrh	r3, [r5, #12]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d907      	bls.n	8009b88 <_fwalk_sglue+0x38>
 8009b78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	d003      	beq.n	8009b88 <_fwalk_sglue+0x38>
 8009b80:	4629      	mov	r1, r5
 8009b82:	4638      	mov	r0, r7
 8009b84:	47c0      	blx	r8
 8009b86:	4306      	orrs	r6, r0
 8009b88:	3568      	adds	r5, #104	@ 0x68
 8009b8a:	e7e9      	b.n	8009b60 <_fwalk_sglue+0x10>

08009b8c <iprintf>:
 8009b8c:	b40f      	push	{r0, r1, r2, r3}
 8009b8e:	b507      	push	{r0, r1, r2, lr}
 8009b90:	4906      	ldr	r1, [pc, #24]	@ (8009bac <iprintf+0x20>)
 8009b92:	ab04      	add	r3, sp, #16
 8009b94:	6808      	ldr	r0, [r1, #0]
 8009b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b9a:	6881      	ldr	r1, [r0, #8]
 8009b9c:	9301      	str	r3, [sp, #4]
 8009b9e:	f000 fbcf 	bl	800a340 <_vfiprintf_r>
 8009ba2:	b003      	add	sp, #12
 8009ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ba8:	b004      	add	sp, #16
 8009baa:	4770      	bx	lr
 8009bac:	20000074 	.word	0x20000074

08009bb0 <siprintf>:
 8009bb0:	b40e      	push	{r1, r2, r3}
 8009bb2:	b510      	push	{r4, lr}
 8009bb4:	b09d      	sub	sp, #116	@ 0x74
 8009bb6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009bb8:	9002      	str	r0, [sp, #8]
 8009bba:	9006      	str	r0, [sp, #24]
 8009bbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009bc0:	480a      	ldr	r0, [pc, #40]	@ (8009bec <siprintf+0x3c>)
 8009bc2:	9107      	str	r1, [sp, #28]
 8009bc4:	9104      	str	r1, [sp, #16]
 8009bc6:	490a      	ldr	r1, [pc, #40]	@ (8009bf0 <siprintf+0x40>)
 8009bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bcc:	9105      	str	r1, [sp, #20]
 8009bce:	2400      	movs	r4, #0
 8009bd0:	a902      	add	r1, sp, #8
 8009bd2:	6800      	ldr	r0, [r0, #0]
 8009bd4:	9301      	str	r3, [sp, #4]
 8009bd6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009bd8:	f000 fa8c 	bl	800a0f4 <_svfiprintf_r>
 8009bdc:	9b02      	ldr	r3, [sp, #8]
 8009bde:	701c      	strb	r4, [r3, #0]
 8009be0:	b01d      	add	sp, #116	@ 0x74
 8009be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009be6:	b003      	add	sp, #12
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	20000074 	.word	0x20000074
 8009bf0:	ffff0208 	.word	0xffff0208

08009bf4 <__sread>:
 8009bf4:	b510      	push	{r4, lr}
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bfc:	f000 f8c6 	bl	8009d8c <_read_r>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	bfab      	itete	ge
 8009c04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009c06:	89a3      	ldrhlt	r3, [r4, #12]
 8009c08:	181b      	addge	r3, r3, r0
 8009c0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009c0e:	bfac      	ite	ge
 8009c10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009c12:	81a3      	strhlt	r3, [r4, #12]
 8009c14:	bd10      	pop	{r4, pc}

08009c16 <__swrite>:
 8009c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c1a:	461f      	mov	r7, r3
 8009c1c:	898b      	ldrh	r3, [r1, #12]
 8009c1e:	05db      	lsls	r3, r3, #23
 8009c20:	4605      	mov	r5, r0
 8009c22:	460c      	mov	r4, r1
 8009c24:	4616      	mov	r6, r2
 8009c26:	d505      	bpl.n	8009c34 <__swrite+0x1e>
 8009c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f000 f89a 	bl	8009d68 <_lseek_r>
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c3e:	81a3      	strh	r3, [r4, #12]
 8009c40:	4632      	mov	r2, r6
 8009c42:	463b      	mov	r3, r7
 8009c44:	4628      	mov	r0, r5
 8009c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c4a:	f000 b8b1 	b.w	8009db0 <_write_r>

08009c4e <__sseek>:
 8009c4e:	b510      	push	{r4, lr}
 8009c50:	460c      	mov	r4, r1
 8009c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c56:	f000 f887 	bl	8009d68 <_lseek_r>
 8009c5a:	1c43      	adds	r3, r0, #1
 8009c5c:	89a3      	ldrh	r3, [r4, #12]
 8009c5e:	bf15      	itete	ne
 8009c60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009c62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009c66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009c6a:	81a3      	strheq	r3, [r4, #12]
 8009c6c:	bf18      	it	ne
 8009c6e:	81a3      	strhne	r3, [r4, #12]
 8009c70:	bd10      	pop	{r4, pc}

08009c72 <__sclose>:
 8009c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c76:	f000 b809 	b.w	8009c8c <_close_r>

08009c7a <memset>:
 8009c7a:	4402      	add	r2, r0
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d100      	bne.n	8009c84 <memset+0xa>
 8009c82:	4770      	bx	lr
 8009c84:	f803 1b01 	strb.w	r1, [r3], #1
 8009c88:	e7f9      	b.n	8009c7e <memset+0x4>
	...

08009c8c <_close_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4d06      	ldr	r5, [pc, #24]	@ (8009ca8 <_close_r+0x1c>)
 8009c90:	2300      	movs	r3, #0
 8009c92:	4604      	mov	r4, r0
 8009c94:	4608      	mov	r0, r1
 8009c96:	602b      	str	r3, [r5, #0]
 8009c98:	f7f7 fb95 	bl	80013c6 <_close>
 8009c9c:	1c43      	adds	r3, r0, #1
 8009c9e:	d102      	bne.n	8009ca6 <_close_r+0x1a>
 8009ca0:	682b      	ldr	r3, [r5, #0]
 8009ca2:	b103      	cbz	r3, 8009ca6 <_close_r+0x1a>
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	bd38      	pop	{r3, r4, r5, pc}
 8009ca8:	20004f18 	.word	0x20004f18

08009cac <_reclaim_reent>:
 8009cac:	4b2d      	ldr	r3, [pc, #180]	@ (8009d64 <_reclaim_reent+0xb8>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4283      	cmp	r3, r0
 8009cb2:	b570      	push	{r4, r5, r6, lr}
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	d053      	beq.n	8009d60 <_reclaim_reent+0xb4>
 8009cb8:	69c3      	ldr	r3, [r0, #28]
 8009cba:	b31b      	cbz	r3, 8009d04 <_reclaim_reent+0x58>
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	b163      	cbz	r3, 8009cda <_reclaim_reent+0x2e>
 8009cc0:	2500      	movs	r5, #0
 8009cc2:	69e3      	ldr	r3, [r4, #28]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	5959      	ldr	r1, [r3, r5]
 8009cc8:	b9b1      	cbnz	r1, 8009cf8 <_reclaim_reent+0x4c>
 8009cca:	3504      	adds	r5, #4
 8009ccc:	2d80      	cmp	r5, #128	@ 0x80
 8009cce:	d1f8      	bne.n	8009cc2 <_reclaim_reent+0x16>
 8009cd0:	69e3      	ldr	r3, [r4, #28]
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	68d9      	ldr	r1, [r3, #12]
 8009cd6:	f000 f8b9 	bl	8009e4c <_free_r>
 8009cda:	69e3      	ldr	r3, [r4, #28]
 8009cdc:	6819      	ldr	r1, [r3, #0]
 8009cde:	b111      	cbz	r1, 8009ce6 <_reclaim_reent+0x3a>
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f000 f8b3 	bl	8009e4c <_free_r>
 8009ce6:	69e3      	ldr	r3, [r4, #28]
 8009ce8:	689d      	ldr	r5, [r3, #8]
 8009cea:	b15d      	cbz	r5, 8009d04 <_reclaim_reent+0x58>
 8009cec:	4629      	mov	r1, r5
 8009cee:	4620      	mov	r0, r4
 8009cf0:	682d      	ldr	r5, [r5, #0]
 8009cf2:	f000 f8ab 	bl	8009e4c <_free_r>
 8009cf6:	e7f8      	b.n	8009cea <_reclaim_reent+0x3e>
 8009cf8:	680e      	ldr	r6, [r1, #0]
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f000 f8a6 	bl	8009e4c <_free_r>
 8009d00:	4631      	mov	r1, r6
 8009d02:	e7e1      	b.n	8009cc8 <_reclaim_reent+0x1c>
 8009d04:	6961      	ldr	r1, [r4, #20]
 8009d06:	b111      	cbz	r1, 8009d0e <_reclaim_reent+0x62>
 8009d08:	4620      	mov	r0, r4
 8009d0a:	f000 f89f 	bl	8009e4c <_free_r>
 8009d0e:	69e1      	ldr	r1, [r4, #28]
 8009d10:	b111      	cbz	r1, 8009d18 <_reclaim_reent+0x6c>
 8009d12:	4620      	mov	r0, r4
 8009d14:	f000 f89a 	bl	8009e4c <_free_r>
 8009d18:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009d1a:	b111      	cbz	r1, 8009d22 <_reclaim_reent+0x76>
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	f000 f895 	bl	8009e4c <_free_r>
 8009d22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d24:	b111      	cbz	r1, 8009d2c <_reclaim_reent+0x80>
 8009d26:	4620      	mov	r0, r4
 8009d28:	f000 f890 	bl	8009e4c <_free_r>
 8009d2c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009d2e:	b111      	cbz	r1, 8009d36 <_reclaim_reent+0x8a>
 8009d30:	4620      	mov	r0, r4
 8009d32:	f000 f88b 	bl	8009e4c <_free_r>
 8009d36:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009d38:	b111      	cbz	r1, 8009d40 <_reclaim_reent+0x94>
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f000 f886 	bl	8009e4c <_free_r>
 8009d40:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009d42:	b111      	cbz	r1, 8009d4a <_reclaim_reent+0x9e>
 8009d44:	4620      	mov	r0, r4
 8009d46:	f000 f881 	bl	8009e4c <_free_r>
 8009d4a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009d4c:	b111      	cbz	r1, 8009d54 <_reclaim_reent+0xa8>
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f000 f87c 	bl	8009e4c <_free_r>
 8009d54:	6a23      	ldr	r3, [r4, #32]
 8009d56:	b11b      	cbz	r3, 8009d60 <_reclaim_reent+0xb4>
 8009d58:	4620      	mov	r0, r4
 8009d5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d5e:	4718      	bx	r3
 8009d60:	bd70      	pop	{r4, r5, r6, pc}
 8009d62:	bf00      	nop
 8009d64:	20000074 	.word	0x20000074

08009d68 <_lseek_r>:
 8009d68:	b538      	push	{r3, r4, r5, lr}
 8009d6a:	4d07      	ldr	r5, [pc, #28]	@ (8009d88 <_lseek_r+0x20>)
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	4608      	mov	r0, r1
 8009d70:	4611      	mov	r1, r2
 8009d72:	2200      	movs	r2, #0
 8009d74:	602a      	str	r2, [r5, #0]
 8009d76:	461a      	mov	r2, r3
 8009d78:	f7f7 fb4c 	bl	8001414 <_lseek>
 8009d7c:	1c43      	adds	r3, r0, #1
 8009d7e:	d102      	bne.n	8009d86 <_lseek_r+0x1e>
 8009d80:	682b      	ldr	r3, [r5, #0]
 8009d82:	b103      	cbz	r3, 8009d86 <_lseek_r+0x1e>
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	bd38      	pop	{r3, r4, r5, pc}
 8009d88:	20004f18 	.word	0x20004f18

08009d8c <_read_r>:
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	4d07      	ldr	r5, [pc, #28]	@ (8009dac <_read_r+0x20>)
 8009d90:	4604      	mov	r4, r0
 8009d92:	4608      	mov	r0, r1
 8009d94:	4611      	mov	r1, r2
 8009d96:	2200      	movs	r2, #0
 8009d98:	602a      	str	r2, [r5, #0]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	f7f7 fada 	bl	8001354 <_read>
 8009da0:	1c43      	adds	r3, r0, #1
 8009da2:	d102      	bne.n	8009daa <_read_r+0x1e>
 8009da4:	682b      	ldr	r3, [r5, #0]
 8009da6:	b103      	cbz	r3, 8009daa <_read_r+0x1e>
 8009da8:	6023      	str	r3, [r4, #0]
 8009daa:	bd38      	pop	{r3, r4, r5, pc}
 8009dac:	20004f18 	.word	0x20004f18

08009db0 <_write_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	4d07      	ldr	r5, [pc, #28]	@ (8009dd0 <_write_r+0x20>)
 8009db4:	4604      	mov	r4, r0
 8009db6:	4608      	mov	r0, r1
 8009db8:	4611      	mov	r1, r2
 8009dba:	2200      	movs	r2, #0
 8009dbc:	602a      	str	r2, [r5, #0]
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	f7f7 fae5 	bl	800138e <_write>
 8009dc4:	1c43      	adds	r3, r0, #1
 8009dc6:	d102      	bne.n	8009dce <_write_r+0x1e>
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	b103      	cbz	r3, 8009dce <_write_r+0x1e>
 8009dcc:	6023      	str	r3, [r4, #0]
 8009dce:	bd38      	pop	{r3, r4, r5, pc}
 8009dd0:	20004f18 	.word	0x20004f18

08009dd4 <__errno>:
 8009dd4:	4b01      	ldr	r3, [pc, #4]	@ (8009ddc <__errno+0x8>)
 8009dd6:	6818      	ldr	r0, [r3, #0]
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	20000074 	.word	0x20000074

08009de0 <__libc_init_array>:
 8009de0:	b570      	push	{r4, r5, r6, lr}
 8009de2:	4d0d      	ldr	r5, [pc, #52]	@ (8009e18 <__libc_init_array+0x38>)
 8009de4:	4c0d      	ldr	r4, [pc, #52]	@ (8009e1c <__libc_init_array+0x3c>)
 8009de6:	1b64      	subs	r4, r4, r5
 8009de8:	10a4      	asrs	r4, r4, #2
 8009dea:	2600      	movs	r6, #0
 8009dec:	42a6      	cmp	r6, r4
 8009dee:	d109      	bne.n	8009e04 <__libc_init_array+0x24>
 8009df0:	4d0b      	ldr	r5, [pc, #44]	@ (8009e20 <__libc_init_array+0x40>)
 8009df2:	4c0c      	ldr	r4, [pc, #48]	@ (8009e24 <__libc_init_array+0x44>)
 8009df4:	f000 ff6c 	bl	800acd0 <_init>
 8009df8:	1b64      	subs	r4, r4, r5
 8009dfa:	10a4      	asrs	r4, r4, #2
 8009dfc:	2600      	movs	r6, #0
 8009dfe:	42a6      	cmp	r6, r4
 8009e00:	d105      	bne.n	8009e0e <__libc_init_array+0x2e>
 8009e02:	bd70      	pop	{r4, r5, r6, pc}
 8009e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e08:	4798      	blx	r3
 8009e0a:	3601      	adds	r6, #1
 8009e0c:	e7ee      	b.n	8009dec <__libc_init_array+0xc>
 8009e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e12:	4798      	blx	r3
 8009e14:	3601      	adds	r6, #1
 8009e16:	e7f2      	b.n	8009dfe <__libc_init_array+0x1e>
 8009e18:	0800aecc 	.word	0x0800aecc
 8009e1c:	0800aecc 	.word	0x0800aecc
 8009e20:	0800aecc 	.word	0x0800aecc
 8009e24:	0800aed0 	.word	0x0800aed0

08009e28 <__retarget_lock_init_recursive>:
 8009e28:	4770      	bx	lr

08009e2a <__retarget_lock_acquire_recursive>:
 8009e2a:	4770      	bx	lr

08009e2c <__retarget_lock_release_recursive>:
 8009e2c:	4770      	bx	lr

08009e2e <memcpy>:
 8009e2e:	440a      	add	r2, r1
 8009e30:	4291      	cmp	r1, r2
 8009e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e36:	d100      	bne.n	8009e3a <memcpy+0xc>
 8009e38:	4770      	bx	lr
 8009e3a:	b510      	push	{r4, lr}
 8009e3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e44:	4291      	cmp	r1, r2
 8009e46:	d1f9      	bne.n	8009e3c <memcpy+0xe>
 8009e48:	bd10      	pop	{r4, pc}
	...

08009e4c <_free_r>:
 8009e4c:	b538      	push	{r3, r4, r5, lr}
 8009e4e:	4605      	mov	r5, r0
 8009e50:	2900      	cmp	r1, #0
 8009e52:	d041      	beq.n	8009ed8 <_free_r+0x8c>
 8009e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e58:	1f0c      	subs	r4, r1, #4
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	bfb8      	it	lt
 8009e5e:	18e4      	addlt	r4, r4, r3
 8009e60:	f000 f8e0 	bl	800a024 <__malloc_lock>
 8009e64:	4a1d      	ldr	r2, [pc, #116]	@ (8009edc <_free_r+0x90>)
 8009e66:	6813      	ldr	r3, [r2, #0]
 8009e68:	b933      	cbnz	r3, 8009e78 <_free_r+0x2c>
 8009e6a:	6063      	str	r3, [r4, #4]
 8009e6c:	6014      	str	r4, [r2, #0]
 8009e6e:	4628      	mov	r0, r5
 8009e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e74:	f000 b8dc 	b.w	800a030 <__malloc_unlock>
 8009e78:	42a3      	cmp	r3, r4
 8009e7a:	d908      	bls.n	8009e8e <_free_r+0x42>
 8009e7c:	6820      	ldr	r0, [r4, #0]
 8009e7e:	1821      	adds	r1, r4, r0
 8009e80:	428b      	cmp	r3, r1
 8009e82:	bf01      	itttt	eq
 8009e84:	6819      	ldreq	r1, [r3, #0]
 8009e86:	685b      	ldreq	r3, [r3, #4]
 8009e88:	1809      	addeq	r1, r1, r0
 8009e8a:	6021      	streq	r1, [r4, #0]
 8009e8c:	e7ed      	b.n	8009e6a <_free_r+0x1e>
 8009e8e:	461a      	mov	r2, r3
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	b10b      	cbz	r3, 8009e98 <_free_r+0x4c>
 8009e94:	42a3      	cmp	r3, r4
 8009e96:	d9fa      	bls.n	8009e8e <_free_r+0x42>
 8009e98:	6811      	ldr	r1, [r2, #0]
 8009e9a:	1850      	adds	r0, r2, r1
 8009e9c:	42a0      	cmp	r0, r4
 8009e9e:	d10b      	bne.n	8009eb8 <_free_r+0x6c>
 8009ea0:	6820      	ldr	r0, [r4, #0]
 8009ea2:	4401      	add	r1, r0
 8009ea4:	1850      	adds	r0, r2, r1
 8009ea6:	4283      	cmp	r3, r0
 8009ea8:	6011      	str	r1, [r2, #0]
 8009eaa:	d1e0      	bne.n	8009e6e <_free_r+0x22>
 8009eac:	6818      	ldr	r0, [r3, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	6053      	str	r3, [r2, #4]
 8009eb2:	4408      	add	r0, r1
 8009eb4:	6010      	str	r0, [r2, #0]
 8009eb6:	e7da      	b.n	8009e6e <_free_r+0x22>
 8009eb8:	d902      	bls.n	8009ec0 <_free_r+0x74>
 8009eba:	230c      	movs	r3, #12
 8009ebc:	602b      	str	r3, [r5, #0]
 8009ebe:	e7d6      	b.n	8009e6e <_free_r+0x22>
 8009ec0:	6820      	ldr	r0, [r4, #0]
 8009ec2:	1821      	adds	r1, r4, r0
 8009ec4:	428b      	cmp	r3, r1
 8009ec6:	bf04      	itt	eq
 8009ec8:	6819      	ldreq	r1, [r3, #0]
 8009eca:	685b      	ldreq	r3, [r3, #4]
 8009ecc:	6063      	str	r3, [r4, #4]
 8009ece:	bf04      	itt	eq
 8009ed0:	1809      	addeq	r1, r1, r0
 8009ed2:	6021      	streq	r1, [r4, #0]
 8009ed4:	6054      	str	r4, [r2, #4]
 8009ed6:	e7ca      	b.n	8009e6e <_free_r+0x22>
 8009ed8:	bd38      	pop	{r3, r4, r5, pc}
 8009eda:	bf00      	nop
 8009edc:	20004f24 	.word	0x20004f24

08009ee0 <sbrk_aligned>:
 8009ee0:	b570      	push	{r4, r5, r6, lr}
 8009ee2:	4e0f      	ldr	r6, [pc, #60]	@ (8009f20 <sbrk_aligned+0x40>)
 8009ee4:	460c      	mov	r4, r1
 8009ee6:	6831      	ldr	r1, [r6, #0]
 8009ee8:	4605      	mov	r5, r0
 8009eea:	b911      	cbnz	r1, 8009ef2 <sbrk_aligned+0x12>
 8009eec:	f000 fe26 	bl	800ab3c <_sbrk_r>
 8009ef0:	6030      	str	r0, [r6, #0]
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	f000 fe21 	bl	800ab3c <_sbrk_r>
 8009efa:	1c43      	adds	r3, r0, #1
 8009efc:	d103      	bne.n	8009f06 <sbrk_aligned+0x26>
 8009efe:	f04f 34ff 	mov.w	r4, #4294967295
 8009f02:	4620      	mov	r0, r4
 8009f04:	bd70      	pop	{r4, r5, r6, pc}
 8009f06:	1cc4      	adds	r4, r0, #3
 8009f08:	f024 0403 	bic.w	r4, r4, #3
 8009f0c:	42a0      	cmp	r0, r4
 8009f0e:	d0f8      	beq.n	8009f02 <sbrk_aligned+0x22>
 8009f10:	1a21      	subs	r1, r4, r0
 8009f12:	4628      	mov	r0, r5
 8009f14:	f000 fe12 	bl	800ab3c <_sbrk_r>
 8009f18:	3001      	adds	r0, #1
 8009f1a:	d1f2      	bne.n	8009f02 <sbrk_aligned+0x22>
 8009f1c:	e7ef      	b.n	8009efe <sbrk_aligned+0x1e>
 8009f1e:	bf00      	nop
 8009f20:	20004f20 	.word	0x20004f20

08009f24 <_malloc_r>:
 8009f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f28:	1ccd      	adds	r5, r1, #3
 8009f2a:	f025 0503 	bic.w	r5, r5, #3
 8009f2e:	3508      	adds	r5, #8
 8009f30:	2d0c      	cmp	r5, #12
 8009f32:	bf38      	it	cc
 8009f34:	250c      	movcc	r5, #12
 8009f36:	2d00      	cmp	r5, #0
 8009f38:	4606      	mov	r6, r0
 8009f3a:	db01      	blt.n	8009f40 <_malloc_r+0x1c>
 8009f3c:	42a9      	cmp	r1, r5
 8009f3e:	d904      	bls.n	8009f4a <_malloc_r+0x26>
 8009f40:	230c      	movs	r3, #12
 8009f42:	6033      	str	r3, [r6, #0]
 8009f44:	2000      	movs	r0, #0
 8009f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a020 <_malloc_r+0xfc>
 8009f4e:	f000 f869 	bl	800a024 <__malloc_lock>
 8009f52:	f8d8 3000 	ldr.w	r3, [r8]
 8009f56:	461c      	mov	r4, r3
 8009f58:	bb44      	cbnz	r4, 8009fac <_malloc_r+0x88>
 8009f5a:	4629      	mov	r1, r5
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	f7ff ffbf 	bl	8009ee0 <sbrk_aligned>
 8009f62:	1c43      	adds	r3, r0, #1
 8009f64:	4604      	mov	r4, r0
 8009f66:	d158      	bne.n	800a01a <_malloc_r+0xf6>
 8009f68:	f8d8 4000 	ldr.w	r4, [r8]
 8009f6c:	4627      	mov	r7, r4
 8009f6e:	2f00      	cmp	r7, #0
 8009f70:	d143      	bne.n	8009ffa <_malloc_r+0xd6>
 8009f72:	2c00      	cmp	r4, #0
 8009f74:	d04b      	beq.n	800a00e <_malloc_r+0xea>
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	4639      	mov	r1, r7
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	eb04 0903 	add.w	r9, r4, r3
 8009f80:	f000 fddc 	bl	800ab3c <_sbrk_r>
 8009f84:	4581      	cmp	r9, r0
 8009f86:	d142      	bne.n	800a00e <_malloc_r+0xea>
 8009f88:	6821      	ldr	r1, [r4, #0]
 8009f8a:	1a6d      	subs	r5, r5, r1
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	4630      	mov	r0, r6
 8009f90:	f7ff ffa6 	bl	8009ee0 <sbrk_aligned>
 8009f94:	3001      	adds	r0, #1
 8009f96:	d03a      	beq.n	800a00e <_malloc_r+0xea>
 8009f98:	6823      	ldr	r3, [r4, #0]
 8009f9a:	442b      	add	r3, r5
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8009fa2:	685a      	ldr	r2, [r3, #4]
 8009fa4:	bb62      	cbnz	r2, 800a000 <_malloc_r+0xdc>
 8009fa6:	f8c8 7000 	str.w	r7, [r8]
 8009faa:	e00f      	b.n	8009fcc <_malloc_r+0xa8>
 8009fac:	6822      	ldr	r2, [r4, #0]
 8009fae:	1b52      	subs	r2, r2, r5
 8009fb0:	d420      	bmi.n	8009ff4 <_malloc_r+0xd0>
 8009fb2:	2a0b      	cmp	r2, #11
 8009fb4:	d917      	bls.n	8009fe6 <_malloc_r+0xc2>
 8009fb6:	1961      	adds	r1, r4, r5
 8009fb8:	42a3      	cmp	r3, r4
 8009fba:	6025      	str	r5, [r4, #0]
 8009fbc:	bf18      	it	ne
 8009fbe:	6059      	strne	r1, [r3, #4]
 8009fc0:	6863      	ldr	r3, [r4, #4]
 8009fc2:	bf08      	it	eq
 8009fc4:	f8c8 1000 	streq.w	r1, [r8]
 8009fc8:	5162      	str	r2, [r4, r5]
 8009fca:	604b      	str	r3, [r1, #4]
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f000 f82f 	bl	800a030 <__malloc_unlock>
 8009fd2:	f104 000b 	add.w	r0, r4, #11
 8009fd6:	1d23      	adds	r3, r4, #4
 8009fd8:	f020 0007 	bic.w	r0, r0, #7
 8009fdc:	1ac2      	subs	r2, r0, r3
 8009fde:	bf1c      	itt	ne
 8009fe0:	1a1b      	subne	r3, r3, r0
 8009fe2:	50a3      	strne	r3, [r4, r2]
 8009fe4:	e7af      	b.n	8009f46 <_malloc_r+0x22>
 8009fe6:	6862      	ldr	r2, [r4, #4]
 8009fe8:	42a3      	cmp	r3, r4
 8009fea:	bf0c      	ite	eq
 8009fec:	f8c8 2000 	streq.w	r2, [r8]
 8009ff0:	605a      	strne	r2, [r3, #4]
 8009ff2:	e7eb      	b.n	8009fcc <_malloc_r+0xa8>
 8009ff4:	4623      	mov	r3, r4
 8009ff6:	6864      	ldr	r4, [r4, #4]
 8009ff8:	e7ae      	b.n	8009f58 <_malloc_r+0x34>
 8009ffa:	463c      	mov	r4, r7
 8009ffc:	687f      	ldr	r7, [r7, #4]
 8009ffe:	e7b6      	b.n	8009f6e <_malloc_r+0x4a>
 800a000:	461a      	mov	r2, r3
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	42a3      	cmp	r3, r4
 800a006:	d1fb      	bne.n	800a000 <_malloc_r+0xdc>
 800a008:	2300      	movs	r3, #0
 800a00a:	6053      	str	r3, [r2, #4]
 800a00c:	e7de      	b.n	8009fcc <_malloc_r+0xa8>
 800a00e:	230c      	movs	r3, #12
 800a010:	6033      	str	r3, [r6, #0]
 800a012:	4630      	mov	r0, r6
 800a014:	f000 f80c 	bl	800a030 <__malloc_unlock>
 800a018:	e794      	b.n	8009f44 <_malloc_r+0x20>
 800a01a:	6005      	str	r5, [r0, #0]
 800a01c:	e7d6      	b.n	8009fcc <_malloc_r+0xa8>
 800a01e:	bf00      	nop
 800a020:	20004f24 	.word	0x20004f24

0800a024 <__malloc_lock>:
 800a024:	4801      	ldr	r0, [pc, #4]	@ (800a02c <__malloc_lock+0x8>)
 800a026:	f7ff bf00 	b.w	8009e2a <__retarget_lock_acquire_recursive>
 800a02a:	bf00      	nop
 800a02c:	20004f1c 	.word	0x20004f1c

0800a030 <__malloc_unlock>:
 800a030:	4801      	ldr	r0, [pc, #4]	@ (800a038 <__malloc_unlock+0x8>)
 800a032:	f7ff befb 	b.w	8009e2c <__retarget_lock_release_recursive>
 800a036:	bf00      	nop
 800a038:	20004f1c 	.word	0x20004f1c

0800a03c <__ssputs_r>:
 800a03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a040:	688e      	ldr	r6, [r1, #8]
 800a042:	461f      	mov	r7, r3
 800a044:	42be      	cmp	r6, r7
 800a046:	680b      	ldr	r3, [r1, #0]
 800a048:	4682      	mov	sl, r0
 800a04a:	460c      	mov	r4, r1
 800a04c:	4690      	mov	r8, r2
 800a04e:	d82d      	bhi.n	800a0ac <__ssputs_r+0x70>
 800a050:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a054:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a058:	d026      	beq.n	800a0a8 <__ssputs_r+0x6c>
 800a05a:	6965      	ldr	r5, [r4, #20]
 800a05c:	6909      	ldr	r1, [r1, #16]
 800a05e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a062:	eba3 0901 	sub.w	r9, r3, r1
 800a066:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a06a:	1c7b      	adds	r3, r7, #1
 800a06c:	444b      	add	r3, r9
 800a06e:	106d      	asrs	r5, r5, #1
 800a070:	429d      	cmp	r5, r3
 800a072:	bf38      	it	cc
 800a074:	461d      	movcc	r5, r3
 800a076:	0553      	lsls	r3, r2, #21
 800a078:	d527      	bpl.n	800a0ca <__ssputs_r+0x8e>
 800a07a:	4629      	mov	r1, r5
 800a07c:	f7ff ff52 	bl	8009f24 <_malloc_r>
 800a080:	4606      	mov	r6, r0
 800a082:	b360      	cbz	r0, 800a0de <__ssputs_r+0xa2>
 800a084:	6921      	ldr	r1, [r4, #16]
 800a086:	464a      	mov	r2, r9
 800a088:	f7ff fed1 	bl	8009e2e <memcpy>
 800a08c:	89a3      	ldrh	r3, [r4, #12]
 800a08e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a096:	81a3      	strh	r3, [r4, #12]
 800a098:	6126      	str	r6, [r4, #16]
 800a09a:	6165      	str	r5, [r4, #20]
 800a09c:	444e      	add	r6, r9
 800a09e:	eba5 0509 	sub.w	r5, r5, r9
 800a0a2:	6026      	str	r6, [r4, #0]
 800a0a4:	60a5      	str	r5, [r4, #8]
 800a0a6:	463e      	mov	r6, r7
 800a0a8:	42be      	cmp	r6, r7
 800a0aa:	d900      	bls.n	800a0ae <__ssputs_r+0x72>
 800a0ac:	463e      	mov	r6, r7
 800a0ae:	6820      	ldr	r0, [r4, #0]
 800a0b0:	4632      	mov	r2, r6
 800a0b2:	4641      	mov	r1, r8
 800a0b4:	f000 fd28 	bl	800ab08 <memmove>
 800a0b8:	68a3      	ldr	r3, [r4, #8]
 800a0ba:	1b9b      	subs	r3, r3, r6
 800a0bc:	60a3      	str	r3, [r4, #8]
 800a0be:	6823      	ldr	r3, [r4, #0]
 800a0c0:	4433      	add	r3, r6
 800a0c2:	6023      	str	r3, [r4, #0]
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ca:	462a      	mov	r2, r5
 800a0cc:	f000 fd46 	bl	800ab5c <_realloc_r>
 800a0d0:	4606      	mov	r6, r0
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	d1e0      	bne.n	800a098 <__ssputs_r+0x5c>
 800a0d6:	6921      	ldr	r1, [r4, #16]
 800a0d8:	4650      	mov	r0, sl
 800a0da:	f7ff feb7 	bl	8009e4c <_free_r>
 800a0de:	230c      	movs	r3, #12
 800a0e0:	f8ca 3000 	str.w	r3, [sl]
 800a0e4:	89a3      	ldrh	r3, [r4, #12]
 800a0e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0ea:	81a3      	strh	r3, [r4, #12]
 800a0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f0:	e7e9      	b.n	800a0c6 <__ssputs_r+0x8a>
	...

0800a0f4 <_svfiprintf_r>:
 800a0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f8:	4698      	mov	r8, r3
 800a0fa:	898b      	ldrh	r3, [r1, #12]
 800a0fc:	061b      	lsls	r3, r3, #24
 800a0fe:	b09d      	sub	sp, #116	@ 0x74
 800a100:	4607      	mov	r7, r0
 800a102:	460d      	mov	r5, r1
 800a104:	4614      	mov	r4, r2
 800a106:	d510      	bpl.n	800a12a <_svfiprintf_r+0x36>
 800a108:	690b      	ldr	r3, [r1, #16]
 800a10a:	b973      	cbnz	r3, 800a12a <_svfiprintf_r+0x36>
 800a10c:	2140      	movs	r1, #64	@ 0x40
 800a10e:	f7ff ff09 	bl	8009f24 <_malloc_r>
 800a112:	6028      	str	r0, [r5, #0]
 800a114:	6128      	str	r0, [r5, #16]
 800a116:	b930      	cbnz	r0, 800a126 <_svfiprintf_r+0x32>
 800a118:	230c      	movs	r3, #12
 800a11a:	603b      	str	r3, [r7, #0]
 800a11c:	f04f 30ff 	mov.w	r0, #4294967295
 800a120:	b01d      	add	sp, #116	@ 0x74
 800a122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a126:	2340      	movs	r3, #64	@ 0x40
 800a128:	616b      	str	r3, [r5, #20]
 800a12a:	2300      	movs	r3, #0
 800a12c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a12e:	2320      	movs	r3, #32
 800a130:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a134:	f8cd 800c 	str.w	r8, [sp, #12]
 800a138:	2330      	movs	r3, #48	@ 0x30
 800a13a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a2d8 <_svfiprintf_r+0x1e4>
 800a13e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a142:	f04f 0901 	mov.w	r9, #1
 800a146:	4623      	mov	r3, r4
 800a148:	469a      	mov	sl, r3
 800a14a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a14e:	b10a      	cbz	r2, 800a154 <_svfiprintf_r+0x60>
 800a150:	2a25      	cmp	r2, #37	@ 0x25
 800a152:	d1f9      	bne.n	800a148 <_svfiprintf_r+0x54>
 800a154:	ebba 0b04 	subs.w	fp, sl, r4
 800a158:	d00b      	beq.n	800a172 <_svfiprintf_r+0x7e>
 800a15a:	465b      	mov	r3, fp
 800a15c:	4622      	mov	r2, r4
 800a15e:	4629      	mov	r1, r5
 800a160:	4638      	mov	r0, r7
 800a162:	f7ff ff6b 	bl	800a03c <__ssputs_r>
 800a166:	3001      	adds	r0, #1
 800a168:	f000 80a7 	beq.w	800a2ba <_svfiprintf_r+0x1c6>
 800a16c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a16e:	445a      	add	r2, fp
 800a170:	9209      	str	r2, [sp, #36]	@ 0x24
 800a172:	f89a 3000 	ldrb.w	r3, [sl]
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 809f 	beq.w	800a2ba <_svfiprintf_r+0x1c6>
 800a17c:	2300      	movs	r3, #0
 800a17e:	f04f 32ff 	mov.w	r2, #4294967295
 800a182:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a186:	f10a 0a01 	add.w	sl, sl, #1
 800a18a:	9304      	str	r3, [sp, #16]
 800a18c:	9307      	str	r3, [sp, #28]
 800a18e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a192:	931a      	str	r3, [sp, #104]	@ 0x68
 800a194:	4654      	mov	r4, sl
 800a196:	2205      	movs	r2, #5
 800a198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a19c:	484e      	ldr	r0, [pc, #312]	@ (800a2d8 <_svfiprintf_r+0x1e4>)
 800a19e:	f7f6 f81f 	bl	80001e0 <memchr>
 800a1a2:	9a04      	ldr	r2, [sp, #16]
 800a1a4:	b9d8      	cbnz	r0, 800a1de <_svfiprintf_r+0xea>
 800a1a6:	06d0      	lsls	r0, r2, #27
 800a1a8:	bf44      	itt	mi
 800a1aa:	2320      	movmi	r3, #32
 800a1ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1b0:	0711      	lsls	r1, r2, #28
 800a1b2:	bf44      	itt	mi
 800a1b4:	232b      	movmi	r3, #43	@ 0x2b
 800a1b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a1be:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1c0:	d015      	beq.n	800a1ee <_svfiprintf_r+0xfa>
 800a1c2:	9a07      	ldr	r2, [sp, #28]
 800a1c4:	4654      	mov	r4, sl
 800a1c6:	2000      	movs	r0, #0
 800a1c8:	f04f 0c0a 	mov.w	ip, #10
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1d2:	3b30      	subs	r3, #48	@ 0x30
 800a1d4:	2b09      	cmp	r3, #9
 800a1d6:	d94b      	bls.n	800a270 <_svfiprintf_r+0x17c>
 800a1d8:	b1b0      	cbz	r0, 800a208 <_svfiprintf_r+0x114>
 800a1da:	9207      	str	r2, [sp, #28]
 800a1dc:	e014      	b.n	800a208 <_svfiprintf_r+0x114>
 800a1de:	eba0 0308 	sub.w	r3, r0, r8
 800a1e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	9304      	str	r3, [sp, #16]
 800a1ea:	46a2      	mov	sl, r4
 800a1ec:	e7d2      	b.n	800a194 <_svfiprintf_r+0xa0>
 800a1ee:	9b03      	ldr	r3, [sp, #12]
 800a1f0:	1d19      	adds	r1, r3, #4
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	9103      	str	r1, [sp, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	bfbb      	ittet	lt
 800a1fa:	425b      	neglt	r3, r3
 800a1fc:	f042 0202 	orrlt.w	r2, r2, #2
 800a200:	9307      	strge	r3, [sp, #28]
 800a202:	9307      	strlt	r3, [sp, #28]
 800a204:	bfb8      	it	lt
 800a206:	9204      	strlt	r2, [sp, #16]
 800a208:	7823      	ldrb	r3, [r4, #0]
 800a20a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a20c:	d10a      	bne.n	800a224 <_svfiprintf_r+0x130>
 800a20e:	7863      	ldrb	r3, [r4, #1]
 800a210:	2b2a      	cmp	r3, #42	@ 0x2a
 800a212:	d132      	bne.n	800a27a <_svfiprintf_r+0x186>
 800a214:	9b03      	ldr	r3, [sp, #12]
 800a216:	1d1a      	adds	r2, r3, #4
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	9203      	str	r2, [sp, #12]
 800a21c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a220:	3402      	adds	r4, #2
 800a222:	9305      	str	r3, [sp, #20]
 800a224:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a2e8 <_svfiprintf_r+0x1f4>
 800a228:	7821      	ldrb	r1, [r4, #0]
 800a22a:	2203      	movs	r2, #3
 800a22c:	4650      	mov	r0, sl
 800a22e:	f7f5 ffd7 	bl	80001e0 <memchr>
 800a232:	b138      	cbz	r0, 800a244 <_svfiprintf_r+0x150>
 800a234:	9b04      	ldr	r3, [sp, #16]
 800a236:	eba0 000a 	sub.w	r0, r0, sl
 800a23a:	2240      	movs	r2, #64	@ 0x40
 800a23c:	4082      	lsls	r2, r0
 800a23e:	4313      	orrs	r3, r2
 800a240:	3401      	adds	r4, #1
 800a242:	9304      	str	r3, [sp, #16]
 800a244:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a248:	4824      	ldr	r0, [pc, #144]	@ (800a2dc <_svfiprintf_r+0x1e8>)
 800a24a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a24e:	2206      	movs	r2, #6
 800a250:	f7f5 ffc6 	bl	80001e0 <memchr>
 800a254:	2800      	cmp	r0, #0
 800a256:	d036      	beq.n	800a2c6 <_svfiprintf_r+0x1d2>
 800a258:	4b21      	ldr	r3, [pc, #132]	@ (800a2e0 <_svfiprintf_r+0x1ec>)
 800a25a:	bb1b      	cbnz	r3, 800a2a4 <_svfiprintf_r+0x1b0>
 800a25c:	9b03      	ldr	r3, [sp, #12]
 800a25e:	3307      	adds	r3, #7
 800a260:	f023 0307 	bic.w	r3, r3, #7
 800a264:	3308      	adds	r3, #8
 800a266:	9303      	str	r3, [sp, #12]
 800a268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a26a:	4433      	add	r3, r6
 800a26c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a26e:	e76a      	b.n	800a146 <_svfiprintf_r+0x52>
 800a270:	fb0c 3202 	mla	r2, ip, r2, r3
 800a274:	460c      	mov	r4, r1
 800a276:	2001      	movs	r0, #1
 800a278:	e7a8      	b.n	800a1cc <_svfiprintf_r+0xd8>
 800a27a:	2300      	movs	r3, #0
 800a27c:	3401      	adds	r4, #1
 800a27e:	9305      	str	r3, [sp, #20]
 800a280:	4619      	mov	r1, r3
 800a282:	f04f 0c0a 	mov.w	ip, #10
 800a286:	4620      	mov	r0, r4
 800a288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a28c:	3a30      	subs	r2, #48	@ 0x30
 800a28e:	2a09      	cmp	r2, #9
 800a290:	d903      	bls.n	800a29a <_svfiprintf_r+0x1a6>
 800a292:	2b00      	cmp	r3, #0
 800a294:	d0c6      	beq.n	800a224 <_svfiprintf_r+0x130>
 800a296:	9105      	str	r1, [sp, #20]
 800a298:	e7c4      	b.n	800a224 <_svfiprintf_r+0x130>
 800a29a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a29e:	4604      	mov	r4, r0
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e7f0      	b.n	800a286 <_svfiprintf_r+0x192>
 800a2a4:	ab03      	add	r3, sp, #12
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	462a      	mov	r2, r5
 800a2aa:	4b0e      	ldr	r3, [pc, #56]	@ (800a2e4 <_svfiprintf_r+0x1f0>)
 800a2ac:	a904      	add	r1, sp, #16
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	f3af 8000 	nop.w
 800a2b4:	1c42      	adds	r2, r0, #1
 800a2b6:	4606      	mov	r6, r0
 800a2b8:	d1d6      	bne.n	800a268 <_svfiprintf_r+0x174>
 800a2ba:	89ab      	ldrh	r3, [r5, #12]
 800a2bc:	065b      	lsls	r3, r3, #25
 800a2be:	f53f af2d 	bmi.w	800a11c <_svfiprintf_r+0x28>
 800a2c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2c4:	e72c      	b.n	800a120 <_svfiprintf_r+0x2c>
 800a2c6:	ab03      	add	r3, sp, #12
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	462a      	mov	r2, r5
 800a2cc:	4b05      	ldr	r3, [pc, #20]	@ (800a2e4 <_svfiprintf_r+0x1f0>)
 800a2ce:	a904      	add	r1, sp, #16
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	f000 f9bb 	bl	800a64c <_printf_i>
 800a2d6:	e7ed      	b.n	800a2b4 <_svfiprintf_r+0x1c0>
 800a2d8:	0800ae90 	.word	0x0800ae90
 800a2dc:	0800ae9a 	.word	0x0800ae9a
 800a2e0:	00000000 	.word	0x00000000
 800a2e4:	0800a03d 	.word	0x0800a03d
 800a2e8:	0800ae96 	.word	0x0800ae96

0800a2ec <__sfputc_r>:
 800a2ec:	6893      	ldr	r3, [r2, #8]
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	b410      	push	{r4}
 800a2f4:	6093      	str	r3, [r2, #8]
 800a2f6:	da08      	bge.n	800a30a <__sfputc_r+0x1e>
 800a2f8:	6994      	ldr	r4, [r2, #24]
 800a2fa:	42a3      	cmp	r3, r4
 800a2fc:	db01      	blt.n	800a302 <__sfputc_r+0x16>
 800a2fe:	290a      	cmp	r1, #10
 800a300:	d103      	bne.n	800a30a <__sfputc_r+0x1e>
 800a302:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a306:	f000 bb6b 	b.w	800a9e0 <__swbuf_r>
 800a30a:	6813      	ldr	r3, [r2, #0]
 800a30c:	1c58      	adds	r0, r3, #1
 800a30e:	6010      	str	r0, [r2, #0]
 800a310:	7019      	strb	r1, [r3, #0]
 800a312:	4608      	mov	r0, r1
 800a314:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <__sfputs_r>:
 800a31a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31c:	4606      	mov	r6, r0
 800a31e:	460f      	mov	r7, r1
 800a320:	4614      	mov	r4, r2
 800a322:	18d5      	adds	r5, r2, r3
 800a324:	42ac      	cmp	r4, r5
 800a326:	d101      	bne.n	800a32c <__sfputs_r+0x12>
 800a328:	2000      	movs	r0, #0
 800a32a:	e007      	b.n	800a33c <__sfputs_r+0x22>
 800a32c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a330:	463a      	mov	r2, r7
 800a332:	4630      	mov	r0, r6
 800a334:	f7ff ffda 	bl	800a2ec <__sfputc_r>
 800a338:	1c43      	adds	r3, r0, #1
 800a33a:	d1f3      	bne.n	800a324 <__sfputs_r+0xa>
 800a33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a340 <_vfiprintf_r>:
 800a340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a344:	460d      	mov	r5, r1
 800a346:	b09d      	sub	sp, #116	@ 0x74
 800a348:	4614      	mov	r4, r2
 800a34a:	4698      	mov	r8, r3
 800a34c:	4606      	mov	r6, r0
 800a34e:	b118      	cbz	r0, 800a358 <_vfiprintf_r+0x18>
 800a350:	6a03      	ldr	r3, [r0, #32]
 800a352:	b90b      	cbnz	r3, 800a358 <_vfiprintf_r+0x18>
 800a354:	f7ff fbe4 	bl	8009b20 <__sinit>
 800a358:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a35a:	07d9      	lsls	r1, r3, #31
 800a35c:	d405      	bmi.n	800a36a <_vfiprintf_r+0x2a>
 800a35e:	89ab      	ldrh	r3, [r5, #12]
 800a360:	059a      	lsls	r2, r3, #22
 800a362:	d402      	bmi.n	800a36a <_vfiprintf_r+0x2a>
 800a364:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a366:	f7ff fd60 	bl	8009e2a <__retarget_lock_acquire_recursive>
 800a36a:	89ab      	ldrh	r3, [r5, #12]
 800a36c:	071b      	lsls	r3, r3, #28
 800a36e:	d501      	bpl.n	800a374 <_vfiprintf_r+0x34>
 800a370:	692b      	ldr	r3, [r5, #16]
 800a372:	b99b      	cbnz	r3, 800a39c <_vfiprintf_r+0x5c>
 800a374:	4629      	mov	r1, r5
 800a376:	4630      	mov	r0, r6
 800a378:	f000 fb70 	bl	800aa5c <__swsetup_r>
 800a37c:	b170      	cbz	r0, 800a39c <_vfiprintf_r+0x5c>
 800a37e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a380:	07dc      	lsls	r4, r3, #31
 800a382:	d504      	bpl.n	800a38e <_vfiprintf_r+0x4e>
 800a384:	f04f 30ff 	mov.w	r0, #4294967295
 800a388:	b01d      	add	sp, #116	@ 0x74
 800a38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38e:	89ab      	ldrh	r3, [r5, #12]
 800a390:	0598      	lsls	r0, r3, #22
 800a392:	d4f7      	bmi.n	800a384 <_vfiprintf_r+0x44>
 800a394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a396:	f7ff fd49 	bl	8009e2c <__retarget_lock_release_recursive>
 800a39a:	e7f3      	b.n	800a384 <_vfiprintf_r+0x44>
 800a39c:	2300      	movs	r3, #0
 800a39e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3a0:	2320      	movs	r3, #32
 800a3a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a3a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3aa:	2330      	movs	r3, #48	@ 0x30
 800a3ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a55c <_vfiprintf_r+0x21c>
 800a3b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3b4:	f04f 0901 	mov.w	r9, #1
 800a3b8:	4623      	mov	r3, r4
 800a3ba:	469a      	mov	sl, r3
 800a3bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3c0:	b10a      	cbz	r2, 800a3c6 <_vfiprintf_r+0x86>
 800a3c2:	2a25      	cmp	r2, #37	@ 0x25
 800a3c4:	d1f9      	bne.n	800a3ba <_vfiprintf_r+0x7a>
 800a3c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a3ca:	d00b      	beq.n	800a3e4 <_vfiprintf_r+0xa4>
 800a3cc:	465b      	mov	r3, fp
 800a3ce:	4622      	mov	r2, r4
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f7ff ffa1 	bl	800a31a <__sfputs_r>
 800a3d8:	3001      	adds	r0, #1
 800a3da:	f000 80a7 	beq.w	800a52c <_vfiprintf_r+0x1ec>
 800a3de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3e0:	445a      	add	r2, fp
 800a3e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 809f 	beq.w	800a52c <_vfiprintf_r+0x1ec>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3f8:	f10a 0a01 	add.w	sl, sl, #1
 800a3fc:	9304      	str	r3, [sp, #16]
 800a3fe:	9307      	str	r3, [sp, #28]
 800a400:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a404:	931a      	str	r3, [sp, #104]	@ 0x68
 800a406:	4654      	mov	r4, sl
 800a408:	2205      	movs	r2, #5
 800a40a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a40e:	4853      	ldr	r0, [pc, #332]	@ (800a55c <_vfiprintf_r+0x21c>)
 800a410:	f7f5 fee6 	bl	80001e0 <memchr>
 800a414:	9a04      	ldr	r2, [sp, #16]
 800a416:	b9d8      	cbnz	r0, 800a450 <_vfiprintf_r+0x110>
 800a418:	06d1      	lsls	r1, r2, #27
 800a41a:	bf44      	itt	mi
 800a41c:	2320      	movmi	r3, #32
 800a41e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a422:	0713      	lsls	r3, r2, #28
 800a424:	bf44      	itt	mi
 800a426:	232b      	movmi	r3, #43	@ 0x2b
 800a428:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a42c:	f89a 3000 	ldrb.w	r3, [sl]
 800a430:	2b2a      	cmp	r3, #42	@ 0x2a
 800a432:	d015      	beq.n	800a460 <_vfiprintf_r+0x120>
 800a434:	9a07      	ldr	r2, [sp, #28]
 800a436:	4654      	mov	r4, sl
 800a438:	2000      	movs	r0, #0
 800a43a:	f04f 0c0a 	mov.w	ip, #10
 800a43e:	4621      	mov	r1, r4
 800a440:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a444:	3b30      	subs	r3, #48	@ 0x30
 800a446:	2b09      	cmp	r3, #9
 800a448:	d94b      	bls.n	800a4e2 <_vfiprintf_r+0x1a2>
 800a44a:	b1b0      	cbz	r0, 800a47a <_vfiprintf_r+0x13a>
 800a44c:	9207      	str	r2, [sp, #28]
 800a44e:	e014      	b.n	800a47a <_vfiprintf_r+0x13a>
 800a450:	eba0 0308 	sub.w	r3, r0, r8
 800a454:	fa09 f303 	lsl.w	r3, r9, r3
 800a458:	4313      	orrs	r3, r2
 800a45a:	9304      	str	r3, [sp, #16]
 800a45c:	46a2      	mov	sl, r4
 800a45e:	e7d2      	b.n	800a406 <_vfiprintf_r+0xc6>
 800a460:	9b03      	ldr	r3, [sp, #12]
 800a462:	1d19      	adds	r1, r3, #4
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	9103      	str	r1, [sp, #12]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	bfbb      	ittet	lt
 800a46c:	425b      	neglt	r3, r3
 800a46e:	f042 0202 	orrlt.w	r2, r2, #2
 800a472:	9307      	strge	r3, [sp, #28]
 800a474:	9307      	strlt	r3, [sp, #28]
 800a476:	bfb8      	it	lt
 800a478:	9204      	strlt	r2, [sp, #16]
 800a47a:	7823      	ldrb	r3, [r4, #0]
 800a47c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a47e:	d10a      	bne.n	800a496 <_vfiprintf_r+0x156>
 800a480:	7863      	ldrb	r3, [r4, #1]
 800a482:	2b2a      	cmp	r3, #42	@ 0x2a
 800a484:	d132      	bne.n	800a4ec <_vfiprintf_r+0x1ac>
 800a486:	9b03      	ldr	r3, [sp, #12]
 800a488:	1d1a      	adds	r2, r3, #4
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	9203      	str	r2, [sp, #12]
 800a48e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a492:	3402      	adds	r4, #2
 800a494:	9305      	str	r3, [sp, #20]
 800a496:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a56c <_vfiprintf_r+0x22c>
 800a49a:	7821      	ldrb	r1, [r4, #0]
 800a49c:	2203      	movs	r2, #3
 800a49e:	4650      	mov	r0, sl
 800a4a0:	f7f5 fe9e 	bl	80001e0 <memchr>
 800a4a4:	b138      	cbz	r0, 800a4b6 <_vfiprintf_r+0x176>
 800a4a6:	9b04      	ldr	r3, [sp, #16]
 800a4a8:	eba0 000a 	sub.w	r0, r0, sl
 800a4ac:	2240      	movs	r2, #64	@ 0x40
 800a4ae:	4082      	lsls	r2, r0
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	3401      	adds	r4, #1
 800a4b4:	9304      	str	r3, [sp, #16]
 800a4b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ba:	4829      	ldr	r0, [pc, #164]	@ (800a560 <_vfiprintf_r+0x220>)
 800a4bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a4c0:	2206      	movs	r2, #6
 800a4c2:	f7f5 fe8d 	bl	80001e0 <memchr>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d03f      	beq.n	800a54a <_vfiprintf_r+0x20a>
 800a4ca:	4b26      	ldr	r3, [pc, #152]	@ (800a564 <_vfiprintf_r+0x224>)
 800a4cc:	bb1b      	cbnz	r3, 800a516 <_vfiprintf_r+0x1d6>
 800a4ce:	9b03      	ldr	r3, [sp, #12]
 800a4d0:	3307      	adds	r3, #7
 800a4d2:	f023 0307 	bic.w	r3, r3, #7
 800a4d6:	3308      	adds	r3, #8
 800a4d8:	9303      	str	r3, [sp, #12]
 800a4da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4dc:	443b      	add	r3, r7
 800a4de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4e0:	e76a      	b.n	800a3b8 <_vfiprintf_r+0x78>
 800a4e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	2001      	movs	r0, #1
 800a4ea:	e7a8      	b.n	800a43e <_vfiprintf_r+0xfe>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	3401      	adds	r4, #1
 800a4f0:	9305      	str	r3, [sp, #20]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	f04f 0c0a 	mov.w	ip, #10
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4fe:	3a30      	subs	r2, #48	@ 0x30
 800a500:	2a09      	cmp	r2, #9
 800a502:	d903      	bls.n	800a50c <_vfiprintf_r+0x1cc>
 800a504:	2b00      	cmp	r3, #0
 800a506:	d0c6      	beq.n	800a496 <_vfiprintf_r+0x156>
 800a508:	9105      	str	r1, [sp, #20]
 800a50a:	e7c4      	b.n	800a496 <_vfiprintf_r+0x156>
 800a50c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a510:	4604      	mov	r4, r0
 800a512:	2301      	movs	r3, #1
 800a514:	e7f0      	b.n	800a4f8 <_vfiprintf_r+0x1b8>
 800a516:	ab03      	add	r3, sp, #12
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	462a      	mov	r2, r5
 800a51c:	4b12      	ldr	r3, [pc, #72]	@ (800a568 <_vfiprintf_r+0x228>)
 800a51e:	a904      	add	r1, sp, #16
 800a520:	4630      	mov	r0, r6
 800a522:	f3af 8000 	nop.w
 800a526:	4607      	mov	r7, r0
 800a528:	1c78      	adds	r0, r7, #1
 800a52a:	d1d6      	bne.n	800a4da <_vfiprintf_r+0x19a>
 800a52c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a52e:	07d9      	lsls	r1, r3, #31
 800a530:	d405      	bmi.n	800a53e <_vfiprintf_r+0x1fe>
 800a532:	89ab      	ldrh	r3, [r5, #12]
 800a534:	059a      	lsls	r2, r3, #22
 800a536:	d402      	bmi.n	800a53e <_vfiprintf_r+0x1fe>
 800a538:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a53a:	f7ff fc77 	bl	8009e2c <__retarget_lock_release_recursive>
 800a53e:	89ab      	ldrh	r3, [r5, #12]
 800a540:	065b      	lsls	r3, r3, #25
 800a542:	f53f af1f 	bmi.w	800a384 <_vfiprintf_r+0x44>
 800a546:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a548:	e71e      	b.n	800a388 <_vfiprintf_r+0x48>
 800a54a:	ab03      	add	r3, sp, #12
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	462a      	mov	r2, r5
 800a550:	4b05      	ldr	r3, [pc, #20]	@ (800a568 <_vfiprintf_r+0x228>)
 800a552:	a904      	add	r1, sp, #16
 800a554:	4630      	mov	r0, r6
 800a556:	f000 f879 	bl	800a64c <_printf_i>
 800a55a:	e7e4      	b.n	800a526 <_vfiprintf_r+0x1e6>
 800a55c:	0800ae90 	.word	0x0800ae90
 800a560:	0800ae9a 	.word	0x0800ae9a
 800a564:	00000000 	.word	0x00000000
 800a568:	0800a31b 	.word	0x0800a31b
 800a56c:	0800ae96 	.word	0x0800ae96

0800a570 <_printf_common>:
 800a570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a574:	4616      	mov	r6, r2
 800a576:	4698      	mov	r8, r3
 800a578:	688a      	ldr	r2, [r1, #8]
 800a57a:	690b      	ldr	r3, [r1, #16]
 800a57c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a580:	4293      	cmp	r3, r2
 800a582:	bfb8      	it	lt
 800a584:	4613      	movlt	r3, r2
 800a586:	6033      	str	r3, [r6, #0]
 800a588:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a58c:	4607      	mov	r7, r0
 800a58e:	460c      	mov	r4, r1
 800a590:	b10a      	cbz	r2, 800a596 <_printf_common+0x26>
 800a592:	3301      	adds	r3, #1
 800a594:	6033      	str	r3, [r6, #0]
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	0699      	lsls	r1, r3, #26
 800a59a:	bf42      	ittt	mi
 800a59c:	6833      	ldrmi	r3, [r6, #0]
 800a59e:	3302      	addmi	r3, #2
 800a5a0:	6033      	strmi	r3, [r6, #0]
 800a5a2:	6825      	ldr	r5, [r4, #0]
 800a5a4:	f015 0506 	ands.w	r5, r5, #6
 800a5a8:	d106      	bne.n	800a5b8 <_printf_common+0x48>
 800a5aa:	f104 0a19 	add.w	sl, r4, #25
 800a5ae:	68e3      	ldr	r3, [r4, #12]
 800a5b0:	6832      	ldr	r2, [r6, #0]
 800a5b2:	1a9b      	subs	r3, r3, r2
 800a5b4:	42ab      	cmp	r3, r5
 800a5b6:	dc26      	bgt.n	800a606 <_printf_common+0x96>
 800a5b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a5bc:	6822      	ldr	r2, [r4, #0]
 800a5be:	3b00      	subs	r3, #0
 800a5c0:	bf18      	it	ne
 800a5c2:	2301      	movne	r3, #1
 800a5c4:	0692      	lsls	r2, r2, #26
 800a5c6:	d42b      	bmi.n	800a620 <_printf_common+0xb0>
 800a5c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a5cc:	4641      	mov	r1, r8
 800a5ce:	4638      	mov	r0, r7
 800a5d0:	47c8      	blx	r9
 800a5d2:	3001      	adds	r0, #1
 800a5d4:	d01e      	beq.n	800a614 <_printf_common+0xa4>
 800a5d6:	6823      	ldr	r3, [r4, #0]
 800a5d8:	6922      	ldr	r2, [r4, #16]
 800a5da:	f003 0306 	and.w	r3, r3, #6
 800a5de:	2b04      	cmp	r3, #4
 800a5e0:	bf02      	ittt	eq
 800a5e2:	68e5      	ldreq	r5, [r4, #12]
 800a5e4:	6833      	ldreq	r3, [r6, #0]
 800a5e6:	1aed      	subeq	r5, r5, r3
 800a5e8:	68a3      	ldr	r3, [r4, #8]
 800a5ea:	bf0c      	ite	eq
 800a5ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5f0:	2500      	movne	r5, #0
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	bfc4      	itt	gt
 800a5f6:	1a9b      	subgt	r3, r3, r2
 800a5f8:	18ed      	addgt	r5, r5, r3
 800a5fa:	2600      	movs	r6, #0
 800a5fc:	341a      	adds	r4, #26
 800a5fe:	42b5      	cmp	r5, r6
 800a600:	d11a      	bne.n	800a638 <_printf_common+0xc8>
 800a602:	2000      	movs	r0, #0
 800a604:	e008      	b.n	800a618 <_printf_common+0xa8>
 800a606:	2301      	movs	r3, #1
 800a608:	4652      	mov	r2, sl
 800a60a:	4641      	mov	r1, r8
 800a60c:	4638      	mov	r0, r7
 800a60e:	47c8      	blx	r9
 800a610:	3001      	adds	r0, #1
 800a612:	d103      	bne.n	800a61c <_printf_common+0xac>
 800a614:	f04f 30ff 	mov.w	r0, #4294967295
 800a618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a61c:	3501      	adds	r5, #1
 800a61e:	e7c6      	b.n	800a5ae <_printf_common+0x3e>
 800a620:	18e1      	adds	r1, r4, r3
 800a622:	1c5a      	adds	r2, r3, #1
 800a624:	2030      	movs	r0, #48	@ 0x30
 800a626:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a62a:	4422      	add	r2, r4
 800a62c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a630:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a634:	3302      	adds	r3, #2
 800a636:	e7c7      	b.n	800a5c8 <_printf_common+0x58>
 800a638:	2301      	movs	r3, #1
 800a63a:	4622      	mov	r2, r4
 800a63c:	4641      	mov	r1, r8
 800a63e:	4638      	mov	r0, r7
 800a640:	47c8      	blx	r9
 800a642:	3001      	adds	r0, #1
 800a644:	d0e6      	beq.n	800a614 <_printf_common+0xa4>
 800a646:	3601      	adds	r6, #1
 800a648:	e7d9      	b.n	800a5fe <_printf_common+0x8e>
	...

0800a64c <_printf_i>:
 800a64c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a650:	7e0f      	ldrb	r7, [r1, #24]
 800a652:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a654:	2f78      	cmp	r7, #120	@ 0x78
 800a656:	4691      	mov	r9, r2
 800a658:	4680      	mov	r8, r0
 800a65a:	460c      	mov	r4, r1
 800a65c:	469a      	mov	sl, r3
 800a65e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a662:	d807      	bhi.n	800a674 <_printf_i+0x28>
 800a664:	2f62      	cmp	r7, #98	@ 0x62
 800a666:	d80a      	bhi.n	800a67e <_printf_i+0x32>
 800a668:	2f00      	cmp	r7, #0
 800a66a:	f000 80d1 	beq.w	800a810 <_printf_i+0x1c4>
 800a66e:	2f58      	cmp	r7, #88	@ 0x58
 800a670:	f000 80b8 	beq.w	800a7e4 <_printf_i+0x198>
 800a674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a678:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a67c:	e03a      	b.n	800a6f4 <_printf_i+0xa8>
 800a67e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a682:	2b15      	cmp	r3, #21
 800a684:	d8f6      	bhi.n	800a674 <_printf_i+0x28>
 800a686:	a101      	add	r1, pc, #4	@ (adr r1, 800a68c <_printf_i+0x40>)
 800a688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a68c:	0800a6e5 	.word	0x0800a6e5
 800a690:	0800a6f9 	.word	0x0800a6f9
 800a694:	0800a675 	.word	0x0800a675
 800a698:	0800a675 	.word	0x0800a675
 800a69c:	0800a675 	.word	0x0800a675
 800a6a0:	0800a675 	.word	0x0800a675
 800a6a4:	0800a6f9 	.word	0x0800a6f9
 800a6a8:	0800a675 	.word	0x0800a675
 800a6ac:	0800a675 	.word	0x0800a675
 800a6b0:	0800a675 	.word	0x0800a675
 800a6b4:	0800a675 	.word	0x0800a675
 800a6b8:	0800a7f7 	.word	0x0800a7f7
 800a6bc:	0800a723 	.word	0x0800a723
 800a6c0:	0800a7b1 	.word	0x0800a7b1
 800a6c4:	0800a675 	.word	0x0800a675
 800a6c8:	0800a675 	.word	0x0800a675
 800a6cc:	0800a819 	.word	0x0800a819
 800a6d0:	0800a675 	.word	0x0800a675
 800a6d4:	0800a723 	.word	0x0800a723
 800a6d8:	0800a675 	.word	0x0800a675
 800a6dc:	0800a675 	.word	0x0800a675
 800a6e0:	0800a7b9 	.word	0x0800a7b9
 800a6e4:	6833      	ldr	r3, [r6, #0]
 800a6e6:	1d1a      	adds	r2, r3, #4
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	6032      	str	r2, [r6, #0]
 800a6ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e09c      	b.n	800a832 <_printf_i+0x1e6>
 800a6f8:	6833      	ldr	r3, [r6, #0]
 800a6fa:	6820      	ldr	r0, [r4, #0]
 800a6fc:	1d19      	adds	r1, r3, #4
 800a6fe:	6031      	str	r1, [r6, #0]
 800a700:	0606      	lsls	r6, r0, #24
 800a702:	d501      	bpl.n	800a708 <_printf_i+0xbc>
 800a704:	681d      	ldr	r5, [r3, #0]
 800a706:	e003      	b.n	800a710 <_printf_i+0xc4>
 800a708:	0645      	lsls	r5, r0, #25
 800a70a:	d5fb      	bpl.n	800a704 <_printf_i+0xb8>
 800a70c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a710:	2d00      	cmp	r5, #0
 800a712:	da03      	bge.n	800a71c <_printf_i+0xd0>
 800a714:	232d      	movs	r3, #45	@ 0x2d
 800a716:	426d      	negs	r5, r5
 800a718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a71c:	4858      	ldr	r0, [pc, #352]	@ (800a880 <_printf_i+0x234>)
 800a71e:	230a      	movs	r3, #10
 800a720:	e011      	b.n	800a746 <_printf_i+0xfa>
 800a722:	6821      	ldr	r1, [r4, #0]
 800a724:	6833      	ldr	r3, [r6, #0]
 800a726:	0608      	lsls	r0, r1, #24
 800a728:	f853 5b04 	ldr.w	r5, [r3], #4
 800a72c:	d402      	bmi.n	800a734 <_printf_i+0xe8>
 800a72e:	0649      	lsls	r1, r1, #25
 800a730:	bf48      	it	mi
 800a732:	b2ad      	uxthmi	r5, r5
 800a734:	2f6f      	cmp	r7, #111	@ 0x6f
 800a736:	4852      	ldr	r0, [pc, #328]	@ (800a880 <_printf_i+0x234>)
 800a738:	6033      	str	r3, [r6, #0]
 800a73a:	bf14      	ite	ne
 800a73c:	230a      	movne	r3, #10
 800a73e:	2308      	moveq	r3, #8
 800a740:	2100      	movs	r1, #0
 800a742:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a746:	6866      	ldr	r6, [r4, #4]
 800a748:	60a6      	str	r6, [r4, #8]
 800a74a:	2e00      	cmp	r6, #0
 800a74c:	db05      	blt.n	800a75a <_printf_i+0x10e>
 800a74e:	6821      	ldr	r1, [r4, #0]
 800a750:	432e      	orrs	r6, r5
 800a752:	f021 0104 	bic.w	r1, r1, #4
 800a756:	6021      	str	r1, [r4, #0]
 800a758:	d04b      	beq.n	800a7f2 <_printf_i+0x1a6>
 800a75a:	4616      	mov	r6, r2
 800a75c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a760:	fb03 5711 	mls	r7, r3, r1, r5
 800a764:	5dc7      	ldrb	r7, [r0, r7]
 800a766:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a76a:	462f      	mov	r7, r5
 800a76c:	42bb      	cmp	r3, r7
 800a76e:	460d      	mov	r5, r1
 800a770:	d9f4      	bls.n	800a75c <_printf_i+0x110>
 800a772:	2b08      	cmp	r3, #8
 800a774:	d10b      	bne.n	800a78e <_printf_i+0x142>
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	07df      	lsls	r7, r3, #31
 800a77a:	d508      	bpl.n	800a78e <_printf_i+0x142>
 800a77c:	6923      	ldr	r3, [r4, #16]
 800a77e:	6861      	ldr	r1, [r4, #4]
 800a780:	4299      	cmp	r1, r3
 800a782:	bfde      	ittt	le
 800a784:	2330      	movle	r3, #48	@ 0x30
 800a786:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a78a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a78e:	1b92      	subs	r2, r2, r6
 800a790:	6122      	str	r2, [r4, #16]
 800a792:	f8cd a000 	str.w	sl, [sp]
 800a796:	464b      	mov	r3, r9
 800a798:	aa03      	add	r2, sp, #12
 800a79a:	4621      	mov	r1, r4
 800a79c:	4640      	mov	r0, r8
 800a79e:	f7ff fee7 	bl	800a570 <_printf_common>
 800a7a2:	3001      	adds	r0, #1
 800a7a4:	d14a      	bne.n	800a83c <_printf_i+0x1f0>
 800a7a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7aa:	b004      	add	sp, #16
 800a7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7b0:	6823      	ldr	r3, [r4, #0]
 800a7b2:	f043 0320 	orr.w	r3, r3, #32
 800a7b6:	6023      	str	r3, [r4, #0]
 800a7b8:	4832      	ldr	r0, [pc, #200]	@ (800a884 <_printf_i+0x238>)
 800a7ba:	2778      	movs	r7, #120	@ 0x78
 800a7bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a7c0:	6823      	ldr	r3, [r4, #0]
 800a7c2:	6831      	ldr	r1, [r6, #0]
 800a7c4:	061f      	lsls	r7, r3, #24
 800a7c6:	f851 5b04 	ldr.w	r5, [r1], #4
 800a7ca:	d402      	bmi.n	800a7d2 <_printf_i+0x186>
 800a7cc:	065f      	lsls	r7, r3, #25
 800a7ce:	bf48      	it	mi
 800a7d0:	b2ad      	uxthmi	r5, r5
 800a7d2:	6031      	str	r1, [r6, #0]
 800a7d4:	07d9      	lsls	r1, r3, #31
 800a7d6:	bf44      	itt	mi
 800a7d8:	f043 0320 	orrmi.w	r3, r3, #32
 800a7dc:	6023      	strmi	r3, [r4, #0]
 800a7de:	b11d      	cbz	r5, 800a7e8 <_printf_i+0x19c>
 800a7e0:	2310      	movs	r3, #16
 800a7e2:	e7ad      	b.n	800a740 <_printf_i+0xf4>
 800a7e4:	4826      	ldr	r0, [pc, #152]	@ (800a880 <_printf_i+0x234>)
 800a7e6:	e7e9      	b.n	800a7bc <_printf_i+0x170>
 800a7e8:	6823      	ldr	r3, [r4, #0]
 800a7ea:	f023 0320 	bic.w	r3, r3, #32
 800a7ee:	6023      	str	r3, [r4, #0]
 800a7f0:	e7f6      	b.n	800a7e0 <_printf_i+0x194>
 800a7f2:	4616      	mov	r6, r2
 800a7f4:	e7bd      	b.n	800a772 <_printf_i+0x126>
 800a7f6:	6833      	ldr	r3, [r6, #0]
 800a7f8:	6825      	ldr	r5, [r4, #0]
 800a7fa:	6961      	ldr	r1, [r4, #20]
 800a7fc:	1d18      	adds	r0, r3, #4
 800a7fe:	6030      	str	r0, [r6, #0]
 800a800:	062e      	lsls	r6, r5, #24
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	d501      	bpl.n	800a80a <_printf_i+0x1be>
 800a806:	6019      	str	r1, [r3, #0]
 800a808:	e002      	b.n	800a810 <_printf_i+0x1c4>
 800a80a:	0668      	lsls	r0, r5, #25
 800a80c:	d5fb      	bpl.n	800a806 <_printf_i+0x1ba>
 800a80e:	8019      	strh	r1, [r3, #0]
 800a810:	2300      	movs	r3, #0
 800a812:	6123      	str	r3, [r4, #16]
 800a814:	4616      	mov	r6, r2
 800a816:	e7bc      	b.n	800a792 <_printf_i+0x146>
 800a818:	6833      	ldr	r3, [r6, #0]
 800a81a:	1d1a      	adds	r2, r3, #4
 800a81c:	6032      	str	r2, [r6, #0]
 800a81e:	681e      	ldr	r6, [r3, #0]
 800a820:	6862      	ldr	r2, [r4, #4]
 800a822:	2100      	movs	r1, #0
 800a824:	4630      	mov	r0, r6
 800a826:	f7f5 fcdb 	bl	80001e0 <memchr>
 800a82a:	b108      	cbz	r0, 800a830 <_printf_i+0x1e4>
 800a82c:	1b80      	subs	r0, r0, r6
 800a82e:	6060      	str	r0, [r4, #4]
 800a830:	6863      	ldr	r3, [r4, #4]
 800a832:	6123      	str	r3, [r4, #16]
 800a834:	2300      	movs	r3, #0
 800a836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a83a:	e7aa      	b.n	800a792 <_printf_i+0x146>
 800a83c:	6923      	ldr	r3, [r4, #16]
 800a83e:	4632      	mov	r2, r6
 800a840:	4649      	mov	r1, r9
 800a842:	4640      	mov	r0, r8
 800a844:	47d0      	blx	sl
 800a846:	3001      	adds	r0, #1
 800a848:	d0ad      	beq.n	800a7a6 <_printf_i+0x15a>
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	079b      	lsls	r3, r3, #30
 800a84e:	d413      	bmi.n	800a878 <_printf_i+0x22c>
 800a850:	68e0      	ldr	r0, [r4, #12]
 800a852:	9b03      	ldr	r3, [sp, #12]
 800a854:	4298      	cmp	r0, r3
 800a856:	bfb8      	it	lt
 800a858:	4618      	movlt	r0, r3
 800a85a:	e7a6      	b.n	800a7aa <_printf_i+0x15e>
 800a85c:	2301      	movs	r3, #1
 800a85e:	4632      	mov	r2, r6
 800a860:	4649      	mov	r1, r9
 800a862:	4640      	mov	r0, r8
 800a864:	47d0      	blx	sl
 800a866:	3001      	adds	r0, #1
 800a868:	d09d      	beq.n	800a7a6 <_printf_i+0x15a>
 800a86a:	3501      	adds	r5, #1
 800a86c:	68e3      	ldr	r3, [r4, #12]
 800a86e:	9903      	ldr	r1, [sp, #12]
 800a870:	1a5b      	subs	r3, r3, r1
 800a872:	42ab      	cmp	r3, r5
 800a874:	dcf2      	bgt.n	800a85c <_printf_i+0x210>
 800a876:	e7eb      	b.n	800a850 <_printf_i+0x204>
 800a878:	2500      	movs	r5, #0
 800a87a:	f104 0619 	add.w	r6, r4, #25
 800a87e:	e7f5      	b.n	800a86c <_printf_i+0x220>
 800a880:	0800aea1 	.word	0x0800aea1
 800a884:	0800aeb2 	.word	0x0800aeb2

0800a888 <__sflush_r>:
 800a888:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a890:	0716      	lsls	r6, r2, #28
 800a892:	4605      	mov	r5, r0
 800a894:	460c      	mov	r4, r1
 800a896:	d454      	bmi.n	800a942 <__sflush_r+0xba>
 800a898:	684b      	ldr	r3, [r1, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	dc02      	bgt.n	800a8a4 <__sflush_r+0x1c>
 800a89e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	dd48      	ble.n	800a936 <__sflush_r+0xae>
 800a8a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8a6:	2e00      	cmp	r6, #0
 800a8a8:	d045      	beq.n	800a936 <__sflush_r+0xae>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8b0:	682f      	ldr	r7, [r5, #0]
 800a8b2:	6a21      	ldr	r1, [r4, #32]
 800a8b4:	602b      	str	r3, [r5, #0]
 800a8b6:	d030      	beq.n	800a91a <__sflush_r+0x92>
 800a8b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8ba:	89a3      	ldrh	r3, [r4, #12]
 800a8bc:	0759      	lsls	r1, r3, #29
 800a8be:	d505      	bpl.n	800a8cc <__sflush_r+0x44>
 800a8c0:	6863      	ldr	r3, [r4, #4]
 800a8c2:	1ad2      	subs	r2, r2, r3
 800a8c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8c6:	b10b      	cbz	r3, 800a8cc <__sflush_r+0x44>
 800a8c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8ca:	1ad2      	subs	r2, r2, r3
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8d0:	6a21      	ldr	r1, [r4, #32]
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	47b0      	blx	r6
 800a8d6:	1c43      	adds	r3, r0, #1
 800a8d8:	89a3      	ldrh	r3, [r4, #12]
 800a8da:	d106      	bne.n	800a8ea <__sflush_r+0x62>
 800a8dc:	6829      	ldr	r1, [r5, #0]
 800a8de:	291d      	cmp	r1, #29
 800a8e0:	d82b      	bhi.n	800a93a <__sflush_r+0xb2>
 800a8e2:	4a2a      	ldr	r2, [pc, #168]	@ (800a98c <__sflush_r+0x104>)
 800a8e4:	40ca      	lsrs	r2, r1
 800a8e6:	07d6      	lsls	r6, r2, #31
 800a8e8:	d527      	bpl.n	800a93a <__sflush_r+0xb2>
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	6062      	str	r2, [r4, #4]
 800a8ee:	04d9      	lsls	r1, r3, #19
 800a8f0:	6922      	ldr	r2, [r4, #16]
 800a8f2:	6022      	str	r2, [r4, #0]
 800a8f4:	d504      	bpl.n	800a900 <__sflush_r+0x78>
 800a8f6:	1c42      	adds	r2, r0, #1
 800a8f8:	d101      	bne.n	800a8fe <__sflush_r+0x76>
 800a8fa:	682b      	ldr	r3, [r5, #0]
 800a8fc:	b903      	cbnz	r3, 800a900 <__sflush_r+0x78>
 800a8fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800a900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a902:	602f      	str	r7, [r5, #0]
 800a904:	b1b9      	cbz	r1, 800a936 <__sflush_r+0xae>
 800a906:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a90a:	4299      	cmp	r1, r3
 800a90c:	d002      	beq.n	800a914 <__sflush_r+0x8c>
 800a90e:	4628      	mov	r0, r5
 800a910:	f7ff fa9c 	bl	8009e4c <_free_r>
 800a914:	2300      	movs	r3, #0
 800a916:	6363      	str	r3, [r4, #52]	@ 0x34
 800a918:	e00d      	b.n	800a936 <__sflush_r+0xae>
 800a91a:	2301      	movs	r3, #1
 800a91c:	4628      	mov	r0, r5
 800a91e:	47b0      	blx	r6
 800a920:	4602      	mov	r2, r0
 800a922:	1c50      	adds	r0, r2, #1
 800a924:	d1c9      	bne.n	800a8ba <__sflush_r+0x32>
 800a926:	682b      	ldr	r3, [r5, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d0c6      	beq.n	800a8ba <__sflush_r+0x32>
 800a92c:	2b1d      	cmp	r3, #29
 800a92e:	d001      	beq.n	800a934 <__sflush_r+0xac>
 800a930:	2b16      	cmp	r3, #22
 800a932:	d11e      	bne.n	800a972 <__sflush_r+0xea>
 800a934:	602f      	str	r7, [r5, #0]
 800a936:	2000      	movs	r0, #0
 800a938:	e022      	b.n	800a980 <__sflush_r+0xf8>
 800a93a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a93e:	b21b      	sxth	r3, r3
 800a940:	e01b      	b.n	800a97a <__sflush_r+0xf2>
 800a942:	690f      	ldr	r7, [r1, #16]
 800a944:	2f00      	cmp	r7, #0
 800a946:	d0f6      	beq.n	800a936 <__sflush_r+0xae>
 800a948:	0793      	lsls	r3, r2, #30
 800a94a:	680e      	ldr	r6, [r1, #0]
 800a94c:	bf08      	it	eq
 800a94e:	694b      	ldreq	r3, [r1, #20]
 800a950:	600f      	str	r7, [r1, #0]
 800a952:	bf18      	it	ne
 800a954:	2300      	movne	r3, #0
 800a956:	eba6 0807 	sub.w	r8, r6, r7
 800a95a:	608b      	str	r3, [r1, #8]
 800a95c:	f1b8 0f00 	cmp.w	r8, #0
 800a960:	dde9      	ble.n	800a936 <__sflush_r+0xae>
 800a962:	6a21      	ldr	r1, [r4, #32]
 800a964:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a966:	4643      	mov	r3, r8
 800a968:	463a      	mov	r2, r7
 800a96a:	4628      	mov	r0, r5
 800a96c:	47b0      	blx	r6
 800a96e:	2800      	cmp	r0, #0
 800a970:	dc08      	bgt.n	800a984 <__sflush_r+0xfc>
 800a972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a97a:	81a3      	strh	r3, [r4, #12]
 800a97c:	f04f 30ff 	mov.w	r0, #4294967295
 800a980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a984:	4407      	add	r7, r0
 800a986:	eba8 0800 	sub.w	r8, r8, r0
 800a98a:	e7e7      	b.n	800a95c <__sflush_r+0xd4>
 800a98c:	20400001 	.word	0x20400001

0800a990 <_fflush_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	690b      	ldr	r3, [r1, #16]
 800a994:	4605      	mov	r5, r0
 800a996:	460c      	mov	r4, r1
 800a998:	b913      	cbnz	r3, 800a9a0 <_fflush_r+0x10>
 800a99a:	2500      	movs	r5, #0
 800a99c:	4628      	mov	r0, r5
 800a99e:	bd38      	pop	{r3, r4, r5, pc}
 800a9a0:	b118      	cbz	r0, 800a9aa <_fflush_r+0x1a>
 800a9a2:	6a03      	ldr	r3, [r0, #32]
 800a9a4:	b90b      	cbnz	r3, 800a9aa <_fflush_r+0x1a>
 800a9a6:	f7ff f8bb 	bl	8009b20 <__sinit>
 800a9aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d0f3      	beq.n	800a99a <_fflush_r+0xa>
 800a9b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9b4:	07d0      	lsls	r0, r2, #31
 800a9b6:	d404      	bmi.n	800a9c2 <_fflush_r+0x32>
 800a9b8:	0599      	lsls	r1, r3, #22
 800a9ba:	d402      	bmi.n	800a9c2 <_fflush_r+0x32>
 800a9bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9be:	f7ff fa34 	bl	8009e2a <__retarget_lock_acquire_recursive>
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	f7ff ff5f 	bl	800a888 <__sflush_r>
 800a9ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9cc:	07da      	lsls	r2, r3, #31
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	d4e4      	bmi.n	800a99c <_fflush_r+0xc>
 800a9d2:	89a3      	ldrh	r3, [r4, #12]
 800a9d4:	059b      	lsls	r3, r3, #22
 800a9d6:	d4e1      	bmi.n	800a99c <_fflush_r+0xc>
 800a9d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9da:	f7ff fa27 	bl	8009e2c <__retarget_lock_release_recursive>
 800a9de:	e7dd      	b.n	800a99c <_fflush_r+0xc>

0800a9e0 <__swbuf_r>:
 800a9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e2:	460e      	mov	r6, r1
 800a9e4:	4614      	mov	r4, r2
 800a9e6:	4605      	mov	r5, r0
 800a9e8:	b118      	cbz	r0, 800a9f2 <__swbuf_r+0x12>
 800a9ea:	6a03      	ldr	r3, [r0, #32]
 800a9ec:	b90b      	cbnz	r3, 800a9f2 <__swbuf_r+0x12>
 800a9ee:	f7ff f897 	bl	8009b20 <__sinit>
 800a9f2:	69a3      	ldr	r3, [r4, #24]
 800a9f4:	60a3      	str	r3, [r4, #8]
 800a9f6:	89a3      	ldrh	r3, [r4, #12]
 800a9f8:	071a      	lsls	r2, r3, #28
 800a9fa:	d501      	bpl.n	800aa00 <__swbuf_r+0x20>
 800a9fc:	6923      	ldr	r3, [r4, #16]
 800a9fe:	b943      	cbnz	r3, 800aa12 <__swbuf_r+0x32>
 800aa00:	4621      	mov	r1, r4
 800aa02:	4628      	mov	r0, r5
 800aa04:	f000 f82a 	bl	800aa5c <__swsetup_r>
 800aa08:	b118      	cbz	r0, 800aa12 <__swbuf_r+0x32>
 800aa0a:	f04f 37ff 	mov.w	r7, #4294967295
 800aa0e:	4638      	mov	r0, r7
 800aa10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	6922      	ldr	r2, [r4, #16]
 800aa16:	1a98      	subs	r0, r3, r2
 800aa18:	6963      	ldr	r3, [r4, #20]
 800aa1a:	b2f6      	uxtb	r6, r6
 800aa1c:	4283      	cmp	r3, r0
 800aa1e:	4637      	mov	r7, r6
 800aa20:	dc05      	bgt.n	800aa2e <__swbuf_r+0x4e>
 800aa22:	4621      	mov	r1, r4
 800aa24:	4628      	mov	r0, r5
 800aa26:	f7ff ffb3 	bl	800a990 <_fflush_r>
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	d1ed      	bne.n	800aa0a <__swbuf_r+0x2a>
 800aa2e:	68a3      	ldr	r3, [r4, #8]
 800aa30:	3b01      	subs	r3, #1
 800aa32:	60a3      	str	r3, [r4, #8]
 800aa34:	6823      	ldr	r3, [r4, #0]
 800aa36:	1c5a      	adds	r2, r3, #1
 800aa38:	6022      	str	r2, [r4, #0]
 800aa3a:	701e      	strb	r6, [r3, #0]
 800aa3c:	6962      	ldr	r2, [r4, #20]
 800aa3e:	1c43      	adds	r3, r0, #1
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d004      	beq.n	800aa4e <__swbuf_r+0x6e>
 800aa44:	89a3      	ldrh	r3, [r4, #12]
 800aa46:	07db      	lsls	r3, r3, #31
 800aa48:	d5e1      	bpl.n	800aa0e <__swbuf_r+0x2e>
 800aa4a:	2e0a      	cmp	r6, #10
 800aa4c:	d1df      	bne.n	800aa0e <__swbuf_r+0x2e>
 800aa4e:	4621      	mov	r1, r4
 800aa50:	4628      	mov	r0, r5
 800aa52:	f7ff ff9d 	bl	800a990 <_fflush_r>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	d0d9      	beq.n	800aa0e <__swbuf_r+0x2e>
 800aa5a:	e7d6      	b.n	800aa0a <__swbuf_r+0x2a>

0800aa5c <__swsetup_r>:
 800aa5c:	b538      	push	{r3, r4, r5, lr}
 800aa5e:	4b29      	ldr	r3, [pc, #164]	@ (800ab04 <__swsetup_r+0xa8>)
 800aa60:	4605      	mov	r5, r0
 800aa62:	6818      	ldr	r0, [r3, #0]
 800aa64:	460c      	mov	r4, r1
 800aa66:	b118      	cbz	r0, 800aa70 <__swsetup_r+0x14>
 800aa68:	6a03      	ldr	r3, [r0, #32]
 800aa6a:	b90b      	cbnz	r3, 800aa70 <__swsetup_r+0x14>
 800aa6c:	f7ff f858 	bl	8009b20 <__sinit>
 800aa70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa74:	0719      	lsls	r1, r3, #28
 800aa76:	d422      	bmi.n	800aabe <__swsetup_r+0x62>
 800aa78:	06da      	lsls	r2, r3, #27
 800aa7a:	d407      	bmi.n	800aa8c <__swsetup_r+0x30>
 800aa7c:	2209      	movs	r2, #9
 800aa7e:	602a      	str	r2, [r5, #0]
 800aa80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa84:	81a3      	strh	r3, [r4, #12]
 800aa86:	f04f 30ff 	mov.w	r0, #4294967295
 800aa8a:	e033      	b.n	800aaf4 <__swsetup_r+0x98>
 800aa8c:	0758      	lsls	r0, r3, #29
 800aa8e:	d512      	bpl.n	800aab6 <__swsetup_r+0x5a>
 800aa90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa92:	b141      	cbz	r1, 800aaa6 <__swsetup_r+0x4a>
 800aa94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa98:	4299      	cmp	r1, r3
 800aa9a:	d002      	beq.n	800aaa2 <__swsetup_r+0x46>
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	f7ff f9d5 	bl	8009e4c <_free_r>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	6363      	str	r3, [r4, #52]	@ 0x34
 800aaa6:	89a3      	ldrh	r3, [r4, #12]
 800aaa8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aaac:	81a3      	strh	r3, [r4, #12]
 800aaae:	2300      	movs	r3, #0
 800aab0:	6063      	str	r3, [r4, #4]
 800aab2:	6923      	ldr	r3, [r4, #16]
 800aab4:	6023      	str	r3, [r4, #0]
 800aab6:	89a3      	ldrh	r3, [r4, #12]
 800aab8:	f043 0308 	orr.w	r3, r3, #8
 800aabc:	81a3      	strh	r3, [r4, #12]
 800aabe:	6923      	ldr	r3, [r4, #16]
 800aac0:	b94b      	cbnz	r3, 800aad6 <__swsetup_r+0x7a>
 800aac2:	89a3      	ldrh	r3, [r4, #12]
 800aac4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aacc:	d003      	beq.n	800aad6 <__swsetup_r+0x7a>
 800aace:	4621      	mov	r1, r4
 800aad0:	4628      	mov	r0, r5
 800aad2:	f000 f897 	bl	800ac04 <__smakebuf_r>
 800aad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aada:	f013 0201 	ands.w	r2, r3, #1
 800aade:	d00a      	beq.n	800aaf6 <__swsetup_r+0x9a>
 800aae0:	2200      	movs	r2, #0
 800aae2:	60a2      	str	r2, [r4, #8]
 800aae4:	6962      	ldr	r2, [r4, #20]
 800aae6:	4252      	negs	r2, r2
 800aae8:	61a2      	str	r2, [r4, #24]
 800aaea:	6922      	ldr	r2, [r4, #16]
 800aaec:	b942      	cbnz	r2, 800ab00 <__swsetup_r+0xa4>
 800aaee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aaf2:	d1c5      	bne.n	800aa80 <__swsetup_r+0x24>
 800aaf4:	bd38      	pop	{r3, r4, r5, pc}
 800aaf6:	0799      	lsls	r1, r3, #30
 800aaf8:	bf58      	it	pl
 800aafa:	6962      	ldrpl	r2, [r4, #20]
 800aafc:	60a2      	str	r2, [r4, #8]
 800aafe:	e7f4      	b.n	800aaea <__swsetup_r+0x8e>
 800ab00:	2000      	movs	r0, #0
 800ab02:	e7f7      	b.n	800aaf4 <__swsetup_r+0x98>
 800ab04:	20000074 	.word	0x20000074

0800ab08 <memmove>:
 800ab08:	4288      	cmp	r0, r1
 800ab0a:	b510      	push	{r4, lr}
 800ab0c:	eb01 0402 	add.w	r4, r1, r2
 800ab10:	d902      	bls.n	800ab18 <memmove+0x10>
 800ab12:	4284      	cmp	r4, r0
 800ab14:	4623      	mov	r3, r4
 800ab16:	d807      	bhi.n	800ab28 <memmove+0x20>
 800ab18:	1e43      	subs	r3, r0, #1
 800ab1a:	42a1      	cmp	r1, r4
 800ab1c:	d008      	beq.n	800ab30 <memmove+0x28>
 800ab1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab22:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab26:	e7f8      	b.n	800ab1a <memmove+0x12>
 800ab28:	4402      	add	r2, r0
 800ab2a:	4601      	mov	r1, r0
 800ab2c:	428a      	cmp	r2, r1
 800ab2e:	d100      	bne.n	800ab32 <memmove+0x2a>
 800ab30:	bd10      	pop	{r4, pc}
 800ab32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab3a:	e7f7      	b.n	800ab2c <memmove+0x24>

0800ab3c <_sbrk_r>:
 800ab3c:	b538      	push	{r3, r4, r5, lr}
 800ab3e:	4d06      	ldr	r5, [pc, #24]	@ (800ab58 <_sbrk_r+0x1c>)
 800ab40:	2300      	movs	r3, #0
 800ab42:	4604      	mov	r4, r0
 800ab44:	4608      	mov	r0, r1
 800ab46:	602b      	str	r3, [r5, #0]
 800ab48:	f7f6 fc72 	bl	8001430 <_sbrk>
 800ab4c:	1c43      	adds	r3, r0, #1
 800ab4e:	d102      	bne.n	800ab56 <_sbrk_r+0x1a>
 800ab50:	682b      	ldr	r3, [r5, #0]
 800ab52:	b103      	cbz	r3, 800ab56 <_sbrk_r+0x1a>
 800ab54:	6023      	str	r3, [r4, #0]
 800ab56:	bd38      	pop	{r3, r4, r5, pc}
 800ab58:	20004f18 	.word	0x20004f18

0800ab5c <_realloc_r>:
 800ab5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab60:	4607      	mov	r7, r0
 800ab62:	4614      	mov	r4, r2
 800ab64:	460d      	mov	r5, r1
 800ab66:	b921      	cbnz	r1, 800ab72 <_realloc_r+0x16>
 800ab68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab6c:	4611      	mov	r1, r2
 800ab6e:	f7ff b9d9 	b.w	8009f24 <_malloc_r>
 800ab72:	b92a      	cbnz	r2, 800ab80 <_realloc_r+0x24>
 800ab74:	f7ff f96a 	bl	8009e4c <_free_r>
 800ab78:	4625      	mov	r5, r4
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab80:	f000 f89e 	bl	800acc0 <_malloc_usable_size_r>
 800ab84:	4284      	cmp	r4, r0
 800ab86:	4606      	mov	r6, r0
 800ab88:	d802      	bhi.n	800ab90 <_realloc_r+0x34>
 800ab8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab8e:	d8f4      	bhi.n	800ab7a <_realloc_r+0x1e>
 800ab90:	4621      	mov	r1, r4
 800ab92:	4638      	mov	r0, r7
 800ab94:	f7ff f9c6 	bl	8009f24 <_malloc_r>
 800ab98:	4680      	mov	r8, r0
 800ab9a:	b908      	cbnz	r0, 800aba0 <_realloc_r+0x44>
 800ab9c:	4645      	mov	r5, r8
 800ab9e:	e7ec      	b.n	800ab7a <_realloc_r+0x1e>
 800aba0:	42b4      	cmp	r4, r6
 800aba2:	4622      	mov	r2, r4
 800aba4:	4629      	mov	r1, r5
 800aba6:	bf28      	it	cs
 800aba8:	4632      	movcs	r2, r6
 800abaa:	f7ff f940 	bl	8009e2e <memcpy>
 800abae:	4629      	mov	r1, r5
 800abb0:	4638      	mov	r0, r7
 800abb2:	f7ff f94b 	bl	8009e4c <_free_r>
 800abb6:	e7f1      	b.n	800ab9c <_realloc_r+0x40>

0800abb8 <__swhatbuf_r>:
 800abb8:	b570      	push	{r4, r5, r6, lr}
 800abba:	460c      	mov	r4, r1
 800abbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc0:	2900      	cmp	r1, #0
 800abc2:	b096      	sub	sp, #88	@ 0x58
 800abc4:	4615      	mov	r5, r2
 800abc6:	461e      	mov	r6, r3
 800abc8:	da0d      	bge.n	800abe6 <__swhatbuf_r+0x2e>
 800abca:	89a3      	ldrh	r3, [r4, #12]
 800abcc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800abd0:	f04f 0100 	mov.w	r1, #0
 800abd4:	bf14      	ite	ne
 800abd6:	2340      	movne	r3, #64	@ 0x40
 800abd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800abdc:	2000      	movs	r0, #0
 800abde:	6031      	str	r1, [r6, #0]
 800abe0:	602b      	str	r3, [r5, #0]
 800abe2:	b016      	add	sp, #88	@ 0x58
 800abe4:	bd70      	pop	{r4, r5, r6, pc}
 800abe6:	466a      	mov	r2, sp
 800abe8:	f000 f848 	bl	800ac7c <_fstat_r>
 800abec:	2800      	cmp	r0, #0
 800abee:	dbec      	blt.n	800abca <__swhatbuf_r+0x12>
 800abf0:	9901      	ldr	r1, [sp, #4]
 800abf2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800abf6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800abfa:	4259      	negs	r1, r3
 800abfc:	4159      	adcs	r1, r3
 800abfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac02:	e7eb      	b.n	800abdc <__swhatbuf_r+0x24>

0800ac04 <__smakebuf_r>:
 800ac04:	898b      	ldrh	r3, [r1, #12]
 800ac06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac08:	079d      	lsls	r5, r3, #30
 800ac0a:	4606      	mov	r6, r0
 800ac0c:	460c      	mov	r4, r1
 800ac0e:	d507      	bpl.n	800ac20 <__smakebuf_r+0x1c>
 800ac10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac14:	6023      	str	r3, [r4, #0]
 800ac16:	6123      	str	r3, [r4, #16]
 800ac18:	2301      	movs	r3, #1
 800ac1a:	6163      	str	r3, [r4, #20]
 800ac1c:	b003      	add	sp, #12
 800ac1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac20:	ab01      	add	r3, sp, #4
 800ac22:	466a      	mov	r2, sp
 800ac24:	f7ff ffc8 	bl	800abb8 <__swhatbuf_r>
 800ac28:	9f00      	ldr	r7, [sp, #0]
 800ac2a:	4605      	mov	r5, r0
 800ac2c:	4639      	mov	r1, r7
 800ac2e:	4630      	mov	r0, r6
 800ac30:	f7ff f978 	bl	8009f24 <_malloc_r>
 800ac34:	b948      	cbnz	r0, 800ac4a <__smakebuf_r+0x46>
 800ac36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac3a:	059a      	lsls	r2, r3, #22
 800ac3c:	d4ee      	bmi.n	800ac1c <__smakebuf_r+0x18>
 800ac3e:	f023 0303 	bic.w	r3, r3, #3
 800ac42:	f043 0302 	orr.w	r3, r3, #2
 800ac46:	81a3      	strh	r3, [r4, #12]
 800ac48:	e7e2      	b.n	800ac10 <__smakebuf_r+0xc>
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	6020      	str	r0, [r4, #0]
 800ac4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac52:	81a3      	strh	r3, [r4, #12]
 800ac54:	9b01      	ldr	r3, [sp, #4]
 800ac56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac5a:	b15b      	cbz	r3, 800ac74 <__smakebuf_r+0x70>
 800ac5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac60:	4630      	mov	r0, r6
 800ac62:	f000 f81d 	bl	800aca0 <_isatty_r>
 800ac66:	b128      	cbz	r0, 800ac74 <__smakebuf_r+0x70>
 800ac68:	89a3      	ldrh	r3, [r4, #12]
 800ac6a:	f023 0303 	bic.w	r3, r3, #3
 800ac6e:	f043 0301 	orr.w	r3, r3, #1
 800ac72:	81a3      	strh	r3, [r4, #12]
 800ac74:	89a3      	ldrh	r3, [r4, #12]
 800ac76:	431d      	orrs	r5, r3
 800ac78:	81a5      	strh	r5, [r4, #12]
 800ac7a:	e7cf      	b.n	800ac1c <__smakebuf_r+0x18>

0800ac7c <_fstat_r>:
 800ac7c:	b538      	push	{r3, r4, r5, lr}
 800ac7e:	4d07      	ldr	r5, [pc, #28]	@ (800ac9c <_fstat_r+0x20>)
 800ac80:	2300      	movs	r3, #0
 800ac82:	4604      	mov	r4, r0
 800ac84:	4608      	mov	r0, r1
 800ac86:	4611      	mov	r1, r2
 800ac88:	602b      	str	r3, [r5, #0]
 800ac8a:	f7f6 fba8 	bl	80013de <_fstat>
 800ac8e:	1c43      	adds	r3, r0, #1
 800ac90:	d102      	bne.n	800ac98 <_fstat_r+0x1c>
 800ac92:	682b      	ldr	r3, [r5, #0]
 800ac94:	b103      	cbz	r3, 800ac98 <_fstat_r+0x1c>
 800ac96:	6023      	str	r3, [r4, #0]
 800ac98:	bd38      	pop	{r3, r4, r5, pc}
 800ac9a:	bf00      	nop
 800ac9c:	20004f18 	.word	0x20004f18

0800aca0 <_isatty_r>:
 800aca0:	b538      	push	{r3, r4, r5, lr}
 800aca2:	4d06      	ldr	r5, [pc, #24]	@ (800acbc <_isatty_r+0x1c>)
 800aca4:	2300      	movs	r3, #0
 800aca6:	4604      	mov	r4, r0
 800aca8:	4608      	mov	r0, r1
 800acaa:	602b      	str	r3, [r5, #0]
 800acac:	f7f6 fba7 	bl	80013fe <_isatty>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	d102      	bne.n	800acba <_isatty_r+0x1a>
 800acb4:	682b      	ldr	r3, [r5, #0]
 800acb6:	b103      	cbz	r3, 800acba <_isatty_r+0x1a>
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	bd38      	pop	{r3, r4, r5, pc}
 800acbc:	20004f18 	.word	0x20004f18

0800acc0 <_malloc_usable_size_r>:
 800acc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acc4:	1f18      	subs	r0, r3, #4
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	bfbc      	itt	lt
 800acca:	580b      	ldrlt	r3, [r1, r0]
 800accc:	18c0      	addlt	r0, r0, r3
 800acce:	4770      	bx	lr

0800acd0 <_init>:
 800acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd2:	bf00      	nop
 800acd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acd6:	bc08      	pop	{r3}
 800acd8:	469e      	mov	lr, r3
 800acda:	4770      	bx	lr

0800acdc <_fini>:
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	bf00      	nop
 800ace0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace2:	bc08      	pop	{r3}
 800ace4:	469e      	mov	lr, r3
 800ace6:	4770      	bx	lr
